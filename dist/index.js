#!/usr/bin/env node
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 5541:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* eslint-disable global-require */
const { Var, Vars, Doc } = __nccwpck_require__(7205);
const WOQLClient = __nccwpck_require__(5489);
const UTILS = __nccwpck_require__(4948);
const View = __nccwpck_require__(5174);
const WOQL = __nccwpck_require__(5054);
const WOQLResult = __nccwpck_require__(5156);
const WOQLTable = __nccwpck_require__(1480);
const WOQLGraph = __nccwpck_require__(5441);
const axiosInstance = __nccwpck_require__(9330);
const AccessControl = __nccwpck_require__(7629);
const WOQLQuery = __nccwpck_require__(9269);

module.exports = {
  Var,
  Doc,
  Vars,
  WOQLClient,
  UTILS,
  View,
  WOQL,
  WOQLResult,
  WOQLTable,
  WOQLGraph,
  axiosInstance,
  AccessControl,
  WOQLQuery,
};


/***/ }),

/***/ 7629:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* eslint-disable max-len */
/* eslint-disable no-underscore-dangle */
const DispatchRequest = __nccwpck_require__(3154);
const ErrorMessage = __nccwpck_require__(181);
const CONST = __nccwpck_require__(229);
const UTILS = __nccwpck_require__(4948);
// eslint-disable-next-line no-unused-vars
const typedef = __nccwpck_require__(1072);
/**
 * @license Apache Version 2
 * @module AccessControl
 * @constructor AccessControl
 * @description The AccessControl is a driver to work with
 * TerminusDB and TerminusX access control api
 * for the credential you can use the JWT token, the API token or
 * the basic authentication with username and password
 * @example
 * //connect with the API token
 * //(to request a token create an account in  https://terminusdb.com/)
 * const accessContol = new AccessControl("https://servername.com",
 * {organization:"my_team_name",
 * token:"dGVybWludXNkYjovLy9kYXRhL2tleXNfYXB........"})
 * accessControl.getOrgUsers().then(result=>{
 *      console.log(result)
 * })
 *
 * //connect with the jwt token this type of connection is only for the dashboard
 * //or for application integrate with our login workflow
 * const accessContol = new AccessControl("https://servername.com",
 * {organization:"my_team_name",
 * jwt:"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IkpXUjBIOXYyeTFORUd........"})
 * accessControl.getOrgUsers().then(result=>{
 *      console.log(result)
 * })
 *
 * //if the jwt is expired you can change it with
 * accessControl.setJwtToken("eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IkpXUjBIOXYy
 * eTFORUd.......")
 *
 * //connect with the base authentication this type of connection is only for the local installation
 * const accessContol = new AccessControl("http://localhost:6363",
 * {organization:"my_team_name", user:"admin"
 * key:"mykey"})
 * accessControl.getOrgUsers().then(result=>{
 *     console.log(result)
 * })
 *
 */

function AccessControl(cloudAPIUrl, params) {
  this.baseURL = this.getAPIUrl(cloudAPIUrl);
  if (!params) return;
  if (params.jwt) {
    this.setJwtToken(params.jwt);
  } else if (params.token) {
    this.setApiToken(params.token);
  } else if (params.key) {
    this.setApiKey(params.key);
    this.user = params.user;
  }
  this.defaultOrganization = this.getDefaultOrganization(params);
}

/**
 * Get a organization from parameters.
 * @param {object} params -  The parameters
 * @return {string|undefined} - organization
 */
AccessControl.prototype.getDefaultOrganization = function (params) {
  if (params && params.organization && typeof params.organization === 'string') {
    return params.organization;
  }
  return undefined;
};
/**
 * Sets the Jwt token for the object
 * @param {string} jwt -  The jwt api token to use
 */
AccessControl.prototype.setJwtToken = function (jwt) {
  if (!jwt) {
    throw new Error('TerminusX Access token required');
  }

  this.apiKey = jwt;
  this.apiType = 'jwt';
};

/**
 * Sets the API token for the object, to request a token create an account in  https://terminusdb.com/
 * @param {string} atokenpi  -  The API token to use to connect with TerminusX
 */
AccessControl.prototype.setApiToken = function (token) {
  if (!token) {
    throw new Error('TerminusX Access token required');
  }

  this.apiKey = token;
  this.apiType = 'apikey';
};

/**
 * Sets the API token for the object, to request a token create an account in  https://terminusdb.com/
 * @param {string} atokenpi  -  The API token to use to connect with TerminusX
 */
AccessControl.prototype.setApiKey = function (key) {
  if (!key) {
    throw new Error('TerminusDB bacis authentication key required');
  }

  this.apiKey = key;
  this.apiType = 'basic';
};

/**
 * Get a API url from cloudAPIUrl
 * @param {string} cloudAPIUrl -  The base url for cloud
 * @return {string} apiUrl
 */
AccessControl.prototype.getAPIUrl = function (cloudAPIUrl) {
  if (!cloudAPIUrl || typeof cloudAPIUrl !== 'string') {
    throw new Error('TerminusX api url required!');
  }
  if (cloudAPIUrl.lastIndexOf('/') !== cloudAPIUrl.length - 1) {
    // eslint-disable-next-line no-param-reassign
    cloudAPIUrl += '/'; // always append slash to ensure regularity
  }
  return `${cloudAPIUrl}api`;
};

AccessControl.prototype.dispatch = function (requestUrl, action, payload) {
  if (!requestUrl) {
    return Promise.reject(
      new Error(
        ErrorMessage.getInvalidParameterMessage(
          action,
          'Invalid request URL',
        ),
      ),
    );
  }
  return DispatchRequest(
    requestUrl,
    action,
    payload,
    { type: this.apiType, key: this.apiKey, user: this.user },
    null,
    this.customHeaders(),
  );
};

/**
 * add extra headers to your request
 * @param {object} customHeaders
 * @returns {object}
 */

// eslint-disable-next-line consistent-return
AccessControl.prototype.customHeaders = function (customHeaders) {
  if (customHeaders) this._customHeaders = customHeaders;
  else return this._customHeaders;
};

/**
 * -- TerminusDB API ---
 * Get an organization from the TerminusDB API.
 * @param {string} organization -  The organization
 * @return {object} - organization
 */
AccessControl.prototype.getOrganization = function (org) {
  return this.dispatch(`${this.baseURL}/organizations/${org}`, CONST.GET);
};

/**
 * -- TerminusDB API ---
 * This end point works in basic authentication, admin user
 * Get list of organizations
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 */

AccessControl.prototype.getAllOrganizations = function () {
  return this.dispatch(`${this.baseURL}/organizations`, CONST.GET);
};

/**
 * -- TerminusDB API ---
 * This end point works in basic authentication, admin user
 * Create an organization
 * @param {string} orgName -  The organization name to create
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * accessControl.createOrganization("my_org_name").then(result=>{
 *      console.log(result)
 * })
 */
AccessControl.prototype.createOrganization = function (orgName) {
  // maybe we have to review this
  return this.dispatch(`${this.baseURL}/organizations/${UTILS.encodeURISegment(orgName)}`, CONST.POST, {});
};

/**
 * -- TerminusDB API ---
 * Delete an Organization
 * @param {string} orgName -  The organization name to delete
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * accessControl.deleteOrganization("my_org_name").then(result=>{
 *      console.log(result)
 * })
 */
AccessControl.prototype.deleteOrganization = function (orgName) {
  return this.dispatch(`${this.baseURL}/organizations/${UTILS.encodeURISegment(orgName)}`, CONST.DELETE);
};

/**
 * --TerminusDB API ---
 * basic authentication, admin user.
 * Create a new role in the system database.
 * @param {string} [name] -  The role name.
 * @param {typedef.RolesActions} [actions] - A list of actions
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * accessControl.createRole("Reader",[ACTIONS.INSTANCE_READ_ACCESS]).then(result=>{
 *  console.log(result)
 * })
 *
 */
AccessControl.prototype.createRole = function (name, actions) {
  const payload = { name, action: actions };
  return this.dispatch(`${this.baseURL}/roles`, CONST.POST, payload);
};

/**
 * -- TerminusdDB API ---
 * basic Authentication, admin user.
 * Delete role in the system database, (this api is enabled only in the local installation)
 * @param {string} [name] -  The role name.
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * accessControl.deleteRole("Reader").then(result=>{
 *  console.log(result)
 * })
 *
 */
AccessControl.prototype.deleteRole = function (name) {
  return this.dispatch(`${this.baseURL}/roles/${UTILS.encodeURISegment(name)}`, CONST.DELETE);
};

/**
 * -- TerminusdDB API ---
 * basic Authentication, admin user.
 * Return the list of all the users (this api is enabled only in the local installation)
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * accessControl.getAllUsers().then(result=>{
 *  console.log(result)
 * })
 *
 */

AccessControl.prototype.getAllUsers = function () {
  return this.dispatch(`${this.baseURL}/users`, CONST.GET);
};

/**
 * -- TerminusdDB API ---
 * basic Authentication, admin user.
 * Add the user into the system database
 * @param  {string}  name - the user name
 * @param  {string}  [password] - you need the password for basic authentication
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * accessControl.deleteUser(userId).then(result=>{
 *  console.log(result)
 * })
 *
 */

AccessControl.prototype.createUser = function (name, password) {
  const payload = { name, password };
  return this.dispatch(`${this.baseURL}/users`, CONST.POST, payload);
};

/**
 * -- TerminusdDB API ---
 * basic Authentication, admin user.
 * Remove the user from the system database.
 * @param  {string}  userId - the document user id
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * accessControl.deleteUser(userId).then(result=>{
 *  console.log(result)
 * })
 *
 */

AccessControl.prototype.deleteUser = function (userId) {
  return this.dispatch(`${this.baseURL}/users/${UTILS.encodeURISegment(userId)}`, CONST.DELETE);
};

/**
 * -- TerminusdDB API ---
 * Grant/Revoke Capability
 * @param  {string}  userName - the document user id
 * @param  {string}  resourceName - the name of a (database or team)
 * @param  {array}   rolesArr - the roles name list
 * @param  {typedef.CapabilityCommand}  operation - grant/revoke operation
 * @param  {typedef.ScopeType}  [scopeType] - the resource type (database or organization)
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * //we add an user to an organization and manage users' access
 * //the user myUser can  access the Organization and all the database under the organization with "reader" Role
 * client.manageCapability(myUser,myteam,[reader],"grant","organization").then(result=>{
 *  consol.log(result)
 * })
 *
 * //the user myUser can  access the database db__001 under the organization myteam
 * //with "writer" Role
 * client.manageCapability(myUser,myteam/db__001,[writer],"grant","database").then(result=>{
 *  consol.log(result)
 * })
 */

AccessControl.prototype.manageCapability = function (userName, resourceName, rolesArr, operation, scopeType) {
  const payload = {
    operation,
    user: userName,
    roles: rolesArr,
    scope: resourceName,
    scope_type: scopeType,
  };
  return this.dispatch(`${this.baseURL}/capabilities`, CONST.POST, payload);
};

/**
 * --TerminusX and TerminusDB API ---
 * Get all the system database roles types.
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 */
AccessControl.prototype.getAccessRoles = function () {
  return this.dispatch(`${this.baseURL}/roles`, CONST.GET);
};

/**
 * -- TerminusX and TerminusDB API --
 * Get all the organization's users and roles,
 * @param {string} [orgName] -  The organization name.
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * accessControl.getOrgUsers().then(result=>{
 *  console.log(result)
 * })
 *
 * //this function will return an array of capabilities with users and roles
 * //-- TerminusX --  response array example
 * //[{capability: "Capability/3ea26e1d698821c570afe9cb4fe81a3......"
 * //     email: {@type: "xsd:string", @value: "user@terminusdb.com"}
 * //     picture: {@type: "xsd:string",…}
 * //     role: "Role/dataReader"
 * //     scope: "Organization/my_org_name"
 * //     user: "User/auth0%7C613f5dnndjdjkTTT"}]
 * //
 * //
 * // -- Local Installation -- response array example
 * //[{ "@id":"User/auth0%7C615462f8ab33f4006a6bee0c",
 * //  "capability": [{
 * //   "@id":"Capability/c52af34b71f6f8916ac0115ecb5fe0e31248ead8b1e3d100852015...",
 * //   "@type":"Capability",
 * //  "role": [{
 * //    "@id":"Role/admin",
 * //    "@type":"Role",
 * //    "action": ["instance_read_access"],
 * //     "name":"Admin Role"
 * //     }],
 * //  "scope":"Organization/@team"}]]
 */

AccessControl.prototype.getOrgUsers = function (orgName) {
  if (!orgName && !this.defaultOrganization) {
    return Promise.reject(
      new Error(
        ErrorMessage.getInvalidParameterMessage(
          'GET',
          'Please provide a organization name',
        ),
      ),
    );
  }
  const org = orgName || this.defaultOrganization;
  return this.dispatch(`${this.baseURL}/organizations/${UTILS.encodeURISegment(org)}/users`, CONST.GET);
};

/**
 * -- TerminusX and TerminusDB API --
 * Get the user roles for a given organization or the default organization,
 * @param {string} [userName] -  The organization name.
 * @param {string} [orgName] -  The organization name.
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * accessControl.getTeamUserRole("myUser").then(result=>{
 *  console.log(result)
 * })
 *
 * //response object example
 * {
 *  "@id": "User/myUser",
 *   "capability": [
 *         {
 *           "@id":"Capability/server_access",
 *           "@type":"Capability",
 *           "role": [{
 *              "@id":"Role/reader",
 *               "@type":"Role",
 *              "action": [
 *                 "instance_read_access",
 *              ],
 *               "name":"reader"
 *             }],
 *           "scope":"Organization/myteam"
 *         }
 *       ],
 *   "name": "myUser"
 *}
 */

AccessControl.prototype.getTeamUserRoles = function (userName, orgName) {
  if (!orgName && !this.defaultOrganization) {
    return Promise.reject(
      new Error(
        ErrorMessage.getInvalidParameterMessage(
          'GET',
          'Please provide a organization name',
        ),
      ),
    );
  }
  const org = orgName || this.defaultOrganization;
  return this.dispatch(`${this.baseURL}/organizations/${UTILS.encodeURISegment(org)}/users/${UTILS.encodeURISegment(userName)}`, CONST.GET);
};

/**
 * -- TerminusX API ---
 * Check if the organization exists. it is a Head call .
 * IMPORTANT This does not work with the API-TOKEN.
 * @param {string} orgName -  The organization name to check if exists.
 * @return {Promise} A promise that returns the call status object,  200: if the organization
 * exists and 404: if the organization does not exist
 */
AccessControl.prototype.ifOrganizationExists = function (orgName) {
  if (!orgName) {
    return Promise.reject(
      new Error(
        ErrorMessage.getInvalidParameterMessage(
          'HEAD',
          'Please provide a organization name',
        ),
      ),
    );
  }

  return this.dispatch(`${this.baseURL}/private/organizations/${UTILS.encodeURISegment(orgName)}`, CONST.HEAD);
};

/**
 * -- TerminusX API ---
 * IMPORTANT This does not work with the API-TOKEN.
 * Create an organization
 * @param {string} orgName -  The organization name to create
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * accessControl.createOrganization("my_org_name").then(result=>{
 *      console.log(result)
 * })
 */
AccessControl.prototype.createOrganizationRemote = function (orgName) {
  const payload = { organization: orgName };
  return this.dispatch(`${this.baseURL}/private/organizations`, CONST.POST, payload);
};

/**
 * -- TerminusX API ---
 * Get the pending invitations list.
 * @param {string} [orgName] -  The organization name.
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * const invitationList = accessControl.getPendingOrgInvites().then(result=>{
 *    console.log(invitationList)
 *
 * })
 * //this will return an array of invitations object like this
 * //[{@id: "Organization/my_team_name/invitations/Invitation/7ad0c9eb82b6175bcda9c0dfc2ac51161ef5ba
 * cb0988d992c4bce82b3fa5d25"
 * //      @type: "Invitation"
 * //      creation_date: "2021-10-22T11:13:28.762Z"
 * //      email_to: "new_user@terminusdb.com"
 * //      invited_by: "User/auth0%7C6162f8ab33567406a6bee0c"
 * //      role: "Role/dataReader"
 * //      status: "needs_invite"}]
 *
 */
AccessControl.prototype.getPendingOrgInvites = function (orgName) {
  if (!orgName && !this.defaultOrganization) {
    return Promise.reject(
      new Error(
        ErrorMessage.getInvalidParameterMessage(
          'GET',
          'Please provide a organization name',
        ),
      ),
    );
  }
  const org = orgName || this.defaultOrganization;
  return this.dispatch(`${this.baseURL}/organizations/${UTILS.encodeURISegment(org)}/invites`, CONST.GET);
};

/**
 * -- TerminusX API ---
 * Send a new invitation
 * @param {string} userEmail -  The email of user.
 * @param {string} role -  The role for user. (the document @id role like Role/collaborator)
 * @param {string} [note] -  The note to send with the invitation.
 * @param {string} [orgName] -  The organization name.
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * accessControl.sendOrgInvite("new_user@terminusdb.com","Role/admin",
 * "please join myteam").then(result=>{
 *    console.log(result)
 * })
 */
// eslint-disable-next-line default-param-last
AccessControl.prototype.sendOrgInvite = function (userEmail, role, note = '', orgName) {
  let errorMessage;
  if (!orgName && !this.defaultOrganization) {
    errorMessage = 'Please provide a organization name';
  } else if (!userEmail) {
    errorMessage = 'Please provide a user email';
  } else if (!role) {
    errorMessage = 'Please provide a role';
  }

  if (errorMessage) {
    return Promise.reject(
      new Error(
        ErrorMessage.getInvalidParameterMessage(
          'POST',
          errorMessage,
        ),
      ),
    );
  }
  const org = orgName || this.defaultOrganization;
  return this.dispatch(`${this.baseURL}/organizations/${UTILS.encodeURISegment(org)}/invites`, CONST.POST, {
    email_to: userEmail,
    role,
    note,
  });
};

/**
 * -- TerminusX API ---
 * Get the invitation info
 * @param {string} inviteId -  The invite id to retrieve.
 * @param {string} [orgName] -  The organization name.
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * const fullInviteId="Organization/my_team_name/invitations/Invitation/7ad0c9eb82b6175bcda9c0dfc
 * 2ac51161ef5ba7cb0988d992c4bce82b3fa5d25"
 * accessControl.getOrgInvite(fullInviteId).then(result=>{
 *  console.log(result)
 * })
 */
AccessControl.prototype.getOrgInvite = function (inviteId, orgName) {
  let errorMessage;
  if (!orgName && !this.defaultOrganization) {
    errorMessage = 'Please provide a organization name';
  } else if (!inviteId) {
    errorMessage = 'Please provide a invite id';
  }

  if (errorMessage) {
    return Promise.reject(
      new Error(
        ErrorMessage.getInvalidParameterMessage(
          'POST',
          errorMessage,
        ),
      ),
    );
  }
  const org = orgName || this.defaultOrganization;
  const inviteHash = UTILS.removeDocType(inviteId);
  return this.dispatch(`${this.baseURL}/organizations/${UTILS.encodeURISegment(org)}/invites/${inviteHash}`, CONST.GET);
};

/**
 * -- TerminusX API ---
 * Delete an invitation
 * @param {string} inviteId -  The invite id to delete.
 * @param {string} [orgName] -  The organization name.
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * const fullInviteId="Organization/my_team_name/invitations/Invitation/7ad0c9eb82b6175bcda9
 * c0dfc2ac51161ef5ba7cb0988d992c4bce82b3fa5d25"
 * accessControl.deleteOrgInvite(fullInviteId).then(result=>{
 *      console.log(result)
 * })
 */
AccessControl.prototype.deleteOrgInvite = function (inviteId, orgName) {
  let errorMessage;
  if (!orgName && !this.defaultOrganization) {
    errorMessage = 'Please provide a organization name';
  } else if (!inviteId) {
    errorMessage = 'Please provide a invite id';
  }

  if (errorMessage) {
    return Promise.reject(
      new Error(
        ErrorMessage.getInvalidParameterMessage(
          'POST',
          errorMessage,
        ),
      ),
    );
  }
  const org = orgName || this.defaultOrganization;
  const inviteHash = UTILS.removeDocType(inviteId);
  return this.dispatch(`${this.baseURL}/organizations/${UTILS.encodeURISegment(org)}/invites/${inviteHash}`, CONST.DELETE);
};

/**
 * -- TerminusX API ---
 * Accept /Reject invitation. if the invitation has been accepted we add the current user
 * to the organization.
 *
 * the only user that can accept this invitation is the user registered with the invitation email,
 * we indentify the user with the jwt token
 * @param {string} inviteId -  The invite id to updated.
 * @param {boolean} accepted -  The status of the invitation.
 * @param {string} [orgName] -  The organization name.
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * const fullInviteId="Organization/my_team_name/invitations/Invitation/7ad0c9eb82b6175bcda9
 * c0dfc2ac51161ef5ba7cb0988d992c4bce82b3fa5d25"
 * accessControl.updateOrgInviteStatus(fullInviteId,true).then(result=>{
 *   console.log(result)
 * })
 */
AccessControl.prototype.updateOrgInviteStatus = function (inviteId, accepted, orgName) {
  let errorMessage;
  if (!orgName && !this.defaultOrganization) {
    errorMessage = 'Please provide a organization name';
  } else if (!inviteId) {
    errorMessage = 'Please provide a invite id';
  } else if (typeof accepted === 'undefined') {
    errorMessage = 'Please provide a accepted status';
  }

  if (errorMessage) {
    return Promise.reject(
      new Error(
        ErrorMessage.getInvalidParameterMessage(
          'PUT',
          errorMessage,
        ),
      ),
    );
  }
  const org = orgName || this.defaultOrganization;
  const inviteHash = UTILS.removeDocType(inviteId);
  return this.dispatch(`${this.baseURL}/organizations/${UTILS.encodeURISegment(org)}/invites/${inviteHash}`, CONST.PUT, {
    accepted,
  });
};

/**
 * -- TerminusX API ---
 * Get the user role for a given organization or the default organization
 * The user is identified by the jwt or the access token
 * @param {string} [orgName] -  The organization name.
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * accessControl.getTeamUserRole().then(result=>{
 *  console.log(result)
 * })
 *
 * //response object example
 * {"userRole":"Role/admin"}
 */

AccessControl.prototype.getTeamUserRole = function (orgName) {
  if (!orgName && !this.defaultOrganization) {
    return Promise.reject(
      new Error(
        ErrorMessage.getInvalidParameterMessage(
          'GET',
          'Please provide a organization name',
        ),
      ),
    );
  }
  const org = orgName || this.defaultOrganization;
  return this.dispatch(`${this.baseURL}/organizations/${UTILS.encodeURISegment(org)}/role`, CONST.GET);
};

/**
 * -- TerminusX API --
 * Remove an user from an organization, only an admin user can remove an user from an organization
 * @param {string} userId -  The id of the user to be removed. (this is the document user's @id)
 * @param {string} [orgName] -  The organization name in which the user is to be removed.
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * accessControl.removeUserFromOrg("User/auth0%7C613f5dnndjdjkTTT","my_org_name").then(result=>{
 *  console.log(result)
 * })
 *
 */
AccessControl.prototype.removeUserFromOrg = function (userId, orgName) {
  let errorMessage;
  if (!orgName && !this.defaultOrganization) {
    errorMessage = 'Please provide a organization name';
  } else if (!userId) {
    errorMessage = 'Please provide a userId';
  }

  if (errorMessage) {
    return Promise.reject(
      new Error(
        ErrorMessage.getInvalidParameterMessage(
          'DELETE',
          errorMessage,
        ),
      ),
    );
  }
  const org = orgName || this.defaultOrganization;
  const user = UTILS.removeDocType(userId);
  return this.dispatch(`${this.baseURL}/organizations/${UTILS.encodeURISegment(org)}/users/${user}`, CONST.DELETE);
};

/**
 * -- TerminusX API --
 * Get the user's role for every databases under the organization
 * @param {string} userId -  The user's id.
 * @param {string} [orgName] -  The organization name.
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * accessControl.getDatabaseRolesOfUser('User/auth0%7C61790e366377Yu6596a').then(result=>{
 *      console.log(result)
 * })
 *
 * //this is a capabilities list of databases and roles
 * //[ {capability: "Capability/b395e8523d509dec6b33aefc9baed3b2e2bfadbd4c79d4ff9b20dce2b14e2edc"
 * //if there is an id we have a user specific capabality for this database
 *    // name: {@type: "xsd:string", @value: "profiles_test"}
 *    // role: "Role/dataUpdater"
 *    // scope: "UserDatabase/7ebdfae5a02bc7e8f6d79sjjjsa4e179b1df9d4576a3b1d2e5ff3b4859"
 *    // user: "User/auth0%7C61790e11a3966d006906596a"},
 *
 * //{ capability: null
 * // if the capability id is null the user level of access for this database is the
 * same of the team
 *   //name: {@type: "xsd:string", @value: "Collab002"}
 *   //role: "Role/dataReader"
 *   // scope: "UserDatabase/acfcc2db02b83792sssb15239ccdf586fc5b176846ffe4878b1aea6a36c8f"
 *   //user: "User/auth0%7C61790e11a3966d006906596a"}]
 */
AccessControl.prototype.getDatabaseRolesOfUser = function (userId, orgName) {
  let errorMessage;
  if (!orgName && !this.defaultOrganization) {
    errorMessage = 'Please provide a organization name';
  } else if (!userId) {
    errorMessage = 'Please provide a user id';
  }

  if (errorMessage) {
    return Promise.reject(
      new Error(
        ErrorMessage.getInvalidParameterMessage(
          'GET',
          errorMessage,
        ),
      ),
    );
  }
  const org = orgName || this.defaultOrganization;
  const user = UTILS.removeDocType(userId);
  return this.dispatch(`${this.baseURL}/organizations/${UTILS.encodeURISegment(org)}/users/${user}/databases`, CONST.GET);
};

/**
 * -- TerminusX API --
 * Create a user's a role for a resource (organization/database)
 * @param {string} userId -  The user's id.
 * @param {string} scope -  The resource name/id.
 * @param {string} role -  The user role to be assigned.
 * @param {string} [orgName] -  The organization name.
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * const dbId = "UserDatabase/acfcc2db02b83792sssb15239ccdf586fc5b176846ffe4878b1aea6a36c8f"
 * accessControl.assignUserRole('User/auth0%7C61790e11a3966d006906596a',dbId,
 * "Role/collaborator").then(result=>{
 *      console.log(result)
 *
 * })
 */
AccessControl.prototype.createUserRole = function (userId, scope, role, orgName) {
  let errorMessage;
  if (!orgName && !this.defaultOrganization) {
    errorMessage = 'Please provide a organization name';
  } else if (!userId) {
    errorMessage = 'Please provide a user id';
  } else if (!scope) {
    errorMessage = 'Please provide a scope';
  } else if (!role) {
    errorMessage = 'Please provide a role';
  }

  if (errorMessage) {
    return Promise.reject(
      new Error(
        ErrorMessage.getInvalidParameterMessage(
          'POST',
          errorMessage,
        ),
      ),
    );
  }
  const org = orgName || this.defaultOrganization;
  const user = UTILS.removeDocType(userId);
  return this.dispatch(`${this.baseURL}/organizations/${UTILS.encodeURISegment(org)}/users/${user}/capabilities`, CONST.POST, {
    scope,
    role,
  });
};

/**
 * -- TerminusX API --
 * Update user's a role for a resource (organization/database), (this api works only in terminusX)
 * @param {string} userId -  The user's id.
 * @param {string} capabilityId -  The capability id.
 * @param {string} scope -  The resource name/id.
 * @param {string} role -  The user role to be updated.
 * @param {string} [orgName] -  The organization name.
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * const dbId = "UserDatabase/acfcc2db02b83792sssb15239ccdf586fc5b176846ffe4878b1aea6a36c8f"
 * const capId= "Capability/b395e8523d509dec6b33aefc9baed3b2e2bfadbd4c79d4ff9b20dce2b14e2edc"
 * accessControl.updateUserRole('User/auth0%7C61790e11a3966d006906596a',capId,dbId,
 * "Role/dataUpdater").then(result=>{
 *      console.log(result)
 *
 * })
 */
AccessControl.prototype.updateUserRole = function (userId, capabilityId, scope, role, orgName) {
  let errorMessage;
  if (!orgName && !this.defaultOrganization) {
    errorMessage = 'Please provide a organization name';
  } else if (!userId) {
    errorMessage = 'Please provide a user id';
  } else if (!capabilityId) {
    errorMessage = 'Please provide a capabilityId';
  } else if (!scope) {
    errorMessage = 'Please provide a scope';
  } else if (!role) {
    errorMessage = 'Please provide a role';
  }

  if (errorMessage) {
    return Promise.reject(
      new Error(
        ErrorMessage.getInvalidParameterMessage(
          'PUT',
          errorMessage,
        ),
      ),
    );
  }
  const org = orgName || this.defaultOrganization;
  const user = UTILS.removeDocType(userId);
  const capHash = UTILS.removeDocType(capabilityId);
  return this.dispatch(`${this.baseURL}/organizations/${UTILS.encodeURISegment(org)}/users/${user}/capabilities/${capHash}`, CONST.PUT, {
    scope,
    role,
  });
};

/**
 * -- TerminusX API --
 * Get all the access request list for a specify organization
 * @param {string} [orgName] -  The organization name.
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * accessControl.accessRequestsList().then(result=>{
 *  console.log(result)
 * })
 *
 */
AccessControl.prototype.accessRequestsList = function (orgName) {
  if (!orgName && !this.defaultOrganization) {
    return Promise.reject(
      new Error(
        ErrorMessage.getInvalidParameterMessage(
          'GET',
          'Please provide a organization name',
        ),
      ),
    );
  }
  const org = orgName || this.defaultOrganization;
  return this.dispatch(`${this.baseURL}/organizations/${UTILS.encodeURISegment(org)}/access_requests`, CONST.GET);
};

/**
 * -- TerminusX API --
 * Get all the access request list for a specify organization
 * @param {string} [email] -  the user email.
 * @param {string} [affiliation] -  the user affiliation, company, university etc..
 * @param {string} [note] -  the message for the team admin
 * @param {string} [orgName] -  The organization name.
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * accessControl.sendAccessRequest("myemail@terminusdb.com",
 *  "my_company",
 *  "please add me to your team"
 * ).then(result=>{
 *  console.log(result)
 * })
 *
 */
AccessControl.prototype.sendAccessRequest = function (email, affiliation, note, orgName) {
  if (!orgName && !this.defaultOrganization) {
    return Promise.reject(
      new Error(
        ErrorMessage.getInvalidParameterMessage(
          'POST',
          'Please provide a organization name',
        ),
      ),
    );
  }
  const payload = { email, affiliation, note };
  const org = orgName || this.defaultOrganization;
  return this.dispatch(`${this.baseURL}/organizations/${UTILS.encodeURISegment(org)}/access_requests`, CONST.POST, payload);
};

/**
 * -- TerminusX API --
 * Delete an access request to join your team, only an admin user can delete it
 * @param {string} [orgName] -  The organization name.
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * accessControl.deleteAccessRequest("djjdshhsuuwewueueuiHYHYYW.......").then(result=>{
 *  console.log(result)
 * })
 *
 */
AccessControl.prototype.deleteAccessRequest = function (acceId, orgName) {
  if (!orgName && !this.defaultOrganization) {
    return Promise.reject(
      new Error(
        ErrorMessage.getInvalidParameterMessage(
          'POST',
          'Please provide a organization name',
        ),
      ),
    );
  }
  const org = orgName || this.defaultOrganization;
  return this.dispatch(`${this.baseURL}/organizations/${UTILS.encodeURISegment(org)}/access_requests/${acceId}`, CONST.DELETE);
};

/**
 * -- TerminusX API --
 * Get the userinfo teams ownership and subscription
 * @param {string} [orgName] -  The organization name.
 * @return {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * accessControl.getUserInfo().then(result=>{
 *    console.log(result)
 * })
 *
 */
AccessControl.prototype.getUserInfo = function (userName) {
  const userNameUrl = userName || 'info';
  return this.dispatch(`${this.baseURL}/users/${UTILS.encodeURISegment(userNameUrl)}`, CONST.GET);
};

module.exports = AccessControl;


/***/ }),

/***/ 9330:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const axios = __nccwpck_require__(3115);

const axiosInstance = axios.create();

module.exports = axiosInstance;


/***/ }),

/***/ 1935:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/// /@ts-check
// connectionConfig
const { encodeURISegment } = __nccwpck_require__(4948);
// eslint-disable-next-line no-unused-vars
const typedef = __nccwpck_require__(1072);

/**
 * @file Terminus DB connection configuration
 * @license Apache Version 2
 * @description Object representing the state of a connection to a terminus db - these are:
 * provides methods for getting and setting connection parameters
 * @constructor
 * @param {string} serverUrl - the terminusdb server url
 * @param {typedef.ParamsObj} [params] - an object with the following connection parameters:
 */

function ConnectionConfig(serverUrl, params) {
  /**
     * @type {string}
     */
  this.server = undefined;

  // the base server url without the team name
  this.baseServer = undefined;

  // remote auth for authenticating to remote servers for push / fetch / clone
  /** @type {typedef.CredentialObj} */
  this.remote_auth = undefined;

  // basic auth string for authenticating to local server
  /** @type {typedef.CredentialObj } */
  this.local_auth = undefined;

  // these operate as cursors - where within the connected server context, we currently are
  /** @type {string | boolean} */
  this.organizationid = false;
  /** @type {string | boolean} */
  this.dbid = false;

  this.default_branch_id = params && params.default_branch_id ? params.default_branch_id : 'main';
  this.default_repo_id = 'local';
  this.system_db = '_system';
  this.api_extension = 'api/';
  // default repository and branch ids
  this.branchid = this.default_branch_id;
  this.repoid = this.default_repo_id;
  // set if pointing at a commit within a branch
  /** @type {string | boolean} */
  this.refid = false;
  /** @type {string | boolean} */
  this.connection_error = false;
  // I can set serverURL only in constructor
  const surl = this.parseServerURL(serverUrl);

  this.server = surl;
  if (params) this.update(params);
}

/**
 * Creates a new connection config object and copies all the state information from this one into it
 * @returns {ConnectionConfig}
 */
ConnectionConfig.prototype.copy = function () {
  const other = new ConnectionConfig(this.server);
  other.api_extension = this.api_extension;
  other.remote_auth = this.remote_auth;
  other.local_auth = this.local_auth;
  other.organizationid = this.organizationid;
  other.dbid = this.dbid;
  other.branchid = this.branchid;
  other.repoid = this.repoid;
  other.refid = this.refid;
  return other;
};

/**
 * updates connection config with new parameters
 * @param {typedef.ParamsObj}  params - an object with the following connection parameters:
 */
// this is a general review
// I think we have to throw an error
// before a servercall
// when the user of key/jwt is not setted
ConnectionConfig.prototype.update = function (params) {
  if (!params) return;
  const orgID = params.organization || params.user;
  // console.log("orgID",orgID,params)
  this.setOrganization(orgID);
  // if (typeof params.credential !== 'undefined')this.setTokenParameter(params.credential)
  if (typeof params.db !== 'undefined') this.setDB(params.db);
  // this to set the author and the jwt in creation
  if (typeof params.token !== 'undefined') this.setLocalBasicAuth(params.token, params.user, 'apikey');
  // this is for jwt
  else if (typeof params.jwt !== 'undefined') this.setLocalBasicAuth(params.jwt, params.user, 'jwt');
  // this is basic authO
  else if (typeof params.key !== 'undefined') this.setLocalBasicAuth(params.key, params.user);
  // If I set only the user I have to set the
  else if (typeof params.user !== 'undefined') this.setLocalBasicAuth(null, params.user);
  if (typeof params.branch !== 'undefined') this.setBranch(params.branch);
  if (typeof params.ref !== 'undefined') this.setRef(params.ref);
  if (typeof params.repo !== 'undefined') this.setRepo(params.repo);
};

/* ConnectionConfig.prototype.setTokenParameter = function(param){
    this.tokenParameter = param
} */

/**
 * Simple gets to retrieve current connection status
 * Gets the current server url
 * @returns {string}
 */
ConnectionConfig.prototype.serverURL = function () {
  return this.server;
};

/**
 * Simple gets to retrieve current connection status
 * Gets the current server url
 * @returns {string}
 */
ConnectionConfig.prototype.author = function () {
  return this.author;
};

/**
 * Gets the server connection url
 * @returns {string}
 */
ConnectionConfig.prototype.apiURL = function () {
  return this.server + this.api_extension;
};

/**
 * Gets the server connection url info
 * @returns {string}
 */
ConnectionConfig.prototype.apiURLInfo = function () {
  return `${this.apiURL()}info`;
};

/**
 * Gets the current database id
 * @returns {string | boolean}
 */
ConnectionConfig.prototype.db = function () {
  if (!this.dbid) throw new Error('Invalid database name');
  return this.dbid;
};

/**
 * Gets the current branch id
 * @returns {string}
 */
ConnectionConfig.prototype.branch = function () {
  return this.branchid;
};

/**
 * Gets the current commit ref id
 * @returns {string | boolean}
 */
ConnectionConfig.prototype.ref = function () {
  return this.refid;
};

/**
 * Gets the current organization id
 * @returns {string | boolean}
 */
ConnectionConfig.prototype.organization = function () {
  return this.organizationid;
};

/**
 * Gets the current organization id
 * @returns {string}
 */
ConnectionConfig.prototype.repo = function () {
  return this.repoid;
};

/**
 *Gets the local Authorization credentials
 *return {CredentialObj | boolean}
 */
ConnectionConfig.prototype.localAuth = function () {
  if (this.local_auth) return this.local_auth;
  return false;
};

/**
 *Gets the local user name
 *return {string | boolean}
 */
ConnectionConfig.prototype.localUser = function () {
  if (this.local_auth) return this.local_auth.user;
  return false;
};

/**
 *Gets the current user name
 *@param {boolean} [ignoreJwt]
 *return {string | boolean}
 */
ConnectionConfig.prototype.user = function (ignoreJwt) {
  if (!ignoreJwt && this.remote_auth && this.remote_auth.type === 'jwt') return this.remote_auth.user;
  if (this.local_auth) {
    return this.local_auth.user;
  }
  return false;
};

/**
 * Check the server URL
 * @param {string} str - the server url string
 * @returns {string}
 */

ConnectionConfig.prototype.parseServerURL = function (str) {
  if (str && (str.substring(0, 7) === 'http://' || str.substring(0, 8) === 'https://')) {
    if (str.lastIndexOf('/') !== str.length - 1) {
      // eslint-disable-next-line no-param-reassign
      str += '/'; // always append slash to ensure regularity
    }
    return this.serverUrlEncoding(str);
  }
  // throw an error this is the
  // return false
  throw new Error(`Invalid Server URL: ${str}`);
};

ConnectionConfig.prototype.serverUrlEncoding = function (str) {
  const orgArr = str.split('/');
  if (orgArr.length > 4) {
    // we can need only the server baseurl
    this.baseServer = str.replace(`${orgArr[3]}/`, '');
    // const org = encodeURI(orgArr[3])
    /*
      * if we pass the organization name like Francesca-Bit-9e73
      * I need to encode it 2 times because in the database
      * when we create an id from a property it encodes the property value
      */
    const org = encodeURISegment(orgArr[3]);
    return str.replace(orgArr[3], org);
  }
  this.baseServer = str;
  return str;
};

/**
 * Clear cursor for connection
 */
ConnectionConfig.prototype.clearCursor = function () {
  this.branchid = this.default_branch_id;
  this.repoid = this.default_repo_id;
  this.organizationid = false;
  this.dbid = false;
  this.refid = false;
};

/**
 * @param {string | boolean} errorMessage
 */
ConnectionConfig.prototype.setError = function (errorMessage) {
  this.connection_error = errorMessage;
};

/**
 * Set the organization to which the connected db belongs
 * (not the users organization - set in capabilities)
 * @param {string | boolean} [orgId]
 */
ConnectionConfig.prototype.setOrganization = function (orgId = 'admin') {
  this.organizationid = orgId;
};

/**
 * Set the local identifier of db
 * @param {string | boolean} dbId - database Id
 */

ConnectionConfig.prototype.setDB = function (dbId) {
  this.dbid = dbId;
};

/**
 * Set the repository type |local|remote|
 * @param {typedef.RepoType | string} repoId - for the local server - identifier of repo
 */
ConnectionConfig.prototype.setRepo = function (repoId) {
  this.repoid = repoId;
};

/**
 * @param {string} [branchId] - id of branch
 */
ConnectionConfig.prototype.setBranch = function (branchId) {
  this.branchid = branchId || this.default_branch_id;
};

/**
 * Set an Reference ID or Commit ID.
 * Commit IDs are unique hashes that are created whenever a new commit is recorded
 * @param {string | boolean} refId - commit reference id
 */
ConnectionConfig.prototype.setRef = function (refId) {
  this.refid = refId;
  // return this.refid
};

/**
 * set the local database connection credential
 * @param {string} [remoteKey] - jwt auth api key
 * @param {string} [remoteUserID] - remote user id
 */
ConnectionConfig.prototype.setRemoteBasicAuth = function (remoteKey, remoteUserID) {
  if (!remoteKey) {
    this.remote_auth = undefined;
  } else {
    this.remote_auth = { type: 'jwt', user: remoteUserID, key: remoteKey };
  }
};

/**
 * set the local database connection credential
 * @param {string} [userKey] - basic auth api key
 * @param {string} [userId] -  user id
 * @param {string} [type] - basic|jwt|apikey
 */
// to be review this is ok for the basic Auth
ConnectionConfig.prototype.setLocalBasicAuth = function (userKey, userId = 'admin', type = 'basic') {
  this.local_auth = { type, user: userId, key: userKey };
};

/**
 * Set the local server connection credential
 * @param {typedef.CredentialObj} newCredential
 */
ConnectionConfig.prototype.setLocalAuth = function (newCredential) {
  this.local_auth = newCredential;
};

/**
 * Set the remote server connection credential
 * @param {typedef.CredentialObj} newCredential
 */
ConnectionConfig.prototype.setRemoteAuth = function (newCredential) {
  this.remote_auth = newCredential;
};

/**
 *Gets the remote Authorization credentials
 *to connect the local db with a remote terminusdb database for push-pull-clone actions
 *return {CredentialObj| boolean}
 */
ConnectionConfig.prototype.remoteAuth = function () {
  if (this.remote_auth) return this.remote_auth;
  return false;
};

/**
 * Generate the db endpoit url for create / delete db
 * @returns {string}
 */
ConnectionConfig.prototype.dbURL = function () {
  return this.dbBase('db');
};

/**
 * Generate URL for the user's api endpoint
 * @param {string} [user] - the user id
 * @returns {string}
 */

ConnectionConfig.prototype.userURL = function (user) {
  let url = `${this.apiURL()}user`;
  if (user) url += `/${encodeURISegment(user)}`;
  return url;
};

/**
 * Generate URL for the user's organization api endpoint
 * @param {string} orgId - the organization id
 * @param {string} [action] - the organization id
 * @returns {string}
 */
// encodeURIComponent
ConnectionConfig.prototype.organizationURL = function (orgId, action) {
  let url = `${this.apiURL()}organization`;
  // I have to encode the organization 2 times because it is saved encoded inside the database
  //
  if (orgId) url += `/${encodeURISegment(orgId)}`;
  if (action) url += `/${encodeURISegment(action)}`;
  return url;
};

/**
 * Generate URL for the user's organization api endpoint
 * @param {string} orgId - the organization id
 * @param {string} [action] - the organization id
 * @returns {string}
 */

ConnectionConfig.prototype.userOrganizationsURL = function () {
  const url = `${this.apiURL()}user_organizations`;
  return url;
};

/**
 * Generate URL for the user's roles api endpoint
 * @returns {string}
 */
ConnectionConfig.prototype.rolesURL = function () {
  return `${this.apiURL()}role`;
};

/**
 * Generate URL to update the user's role api endpoint
 * @returns {string}
 */

// REVIEW maybe it can be the same of roleURL but we can change the rest action in put.

ConnectionConfig.prototype.updateRolesURL = function () {
  return `${this.apiURL()}update_role`;
};

/**
 * Generate URL for create / delete graph api endpoint
 * @param {string} graphType
 * @returns {string}
 */
ConnectionConfig.prototype.graphURL = function (graphType) {
  return `${this.branchBase('graph')}/${graphType}/main`;
};

/**
 * Generate URL for get / set schema api endpoint
 * @param {string} graphType
 * @returns {string}
 */
ConnectionConfig.prototype.triplesURL = function (graphType) {
  // eslint-disable-next-line vars-on-top
  // eslint-disable-next-line no-var
  let url = '';
  if (this.db() === this.system_db) {
    // eslint-disable-next-line no-unused-vars
    const s = this.dbBase('triples');
  } else {
    url = this.branchBase('triples');
  }

  url += `/${graphType}/main`;
  return url;
};

/**
 * Generate URL for add / get csv api endpoint
 * @returns {string}
 */

ConnectionConfig.prototype.csvURL = function () {
  const s = this.branchBase('csv');
  return s;
};

/**
 * Generate URL for woql query api endpoint
 * @returns {string}
 */
ConnectionConfig.prototype.queryURL = function () {
  if (this.db() === this.system_db) return this.dbBase('woql');
  return this.branchBase('woql');
};

/**
 * Generate URL for get back the commits logs
 * @returns {string}
 */
ConnectionConfig.prototype.log = function () {
  if (this.db() === this.system_db) return this.dbBase('log');
  return this.branchBase('log');
};

/**
 * get the url to update the organization role in the system database
 * don't change the end point (this is a terminus db server end point)
 * @returns {string}
 */
ConnectionConfig.prototype.updateOrganizationRoleURL = function () {
  return `${this.apiURL()}update_role`;
};

/**
 * Generate URL for clone db endpoint
 * @param  {string} [newRepoId] the repository id
 * @returns {string}
 */
ConnectionConfig.prototype.cloneURL = function (newRepoId) {
  let crl = `${this.apiURL()}clone/${this.organization()}`;
  if (newRepoId) crl += `/${newRepoId}`;
  return crl;
};

/**
 * URL at which a db can be cloned
 * @returns {string}
 */
ConnectionConfig.prototype.cloneableURL = function () {
  return `${this.serverURL()}${this.organization()}/${this.db()}`;
};

/**
 * Generate URL for pull endpoint
 * @returns {string}
 */
ConnectionConfig.prototype.pullURL = function () {
  const purl = this.branchBase('pull');
  return purl;
};

/**
 * Generate URL for pull endpoint
 * @returns {string}
 */
ConnectionConfig.prototype.patchURL = function () {
  const purl = this.branchBase('patch');
  return purl;
};

/**
 * Generate URL for diff endpoint
 * @returns {string}
 */
ConnectionConfig.prototype.diffURL = function () {
  const purl = this.branchBase('diff');
  return purl;
};

/**
 * Generate URL for diff endpoint
 * @returns {string}
 */
ConnectionConfig.prototype.applyURL = function () {
  const purl = this.branchBase('apply');
  return purl;
};

/**
 * Generate url portion consisting of organization/dbid
 * (unless dbid = system dbname in which case there is no organization)
 * @property {typedef.DocParamsPost|Object} params
 */

ConnectionConfig.prototype.docHistoryURL = function (params) {
  const paramsStr = this.queryParameter(params);
  if (this.db() === this.system_db) {
    return this.dbBase('history') + paramsStr;
  }
  return this.branchBase('history') + paramsStr;
};

/**
 * Generate URL for fetch endpoint
 * @param {string} remoteName
 * @returns {string}
 */
ConnectionConfig.prototype.fetchURL = function (remoteName) {
  const purl = this.dbBase('fetch');
  return `${purl}/${remoteName}/_commits`;
};

/**
 * Generate URL for rebase endpoint
 * @returns {string}
 */
ConnectionConfig.prototype.rebaseURL = function () {
  const purl = this.branchBase('rebase');
  return purl;
};

/**
 * Generate URL for reset endpoint
 * @returns {string}
 */
ConnectionConfig.prototype.resetURL = function () {
  const purl = this.branchBase('reset');
  return purl;
};

/**
 * Generate URL for push endpoint
 * @returns {string}
 */
ConnectionConfig.prototype.pushURL = function () {
  const purl = this.branchBase('push');
  return purl;
};

/**
 * Generate URL for branch endpoint
 * @param {string} branchId - the branch id
 * @returns {string}
 */
ConnectionConfig.prototype.branchURL = function (branchId) {
  const url = this.repoBase('branch');
  return `${url}/branch/${branchId}`;
};

/**
 * Generate URL for branch squash endpoint
 */
ConnectionConfig.prototype.squashBranchURL = function (nuid) {
  const b = this.repoBase('squash');
  return `${b}/branch/${nuid}`;
};

/**
 * Generate URL for branch reset endpoint
 */
ConnectionConfig.prototype.resetBranchUrl = function (nuid) {
  const b = this.repoBase('reset');
  return `${b}/branch/${nuid}`;
};

/**
 * Generate URL for commit descriptor
 * @param {string} commitId
 * @returns {string} a commit pathname
 */
// this is not a url
ConnectionConfig.prototype.commitDescriptorUrl = function (commitId) {
  return `${this.organization()}/${this.db()}/${this.repoid}/commit/${commitId}`;
};

/**
 * Generate URL for optimizing db branch
 */
// encodeURI() will not encode: ~!@#$&*()=:/,;?+'
ConnectionConfig.prototype.optimizeBranchUrl = function (branchId) {
  // let o = this.optimizeBase()
  const dbBase = this.dbBase('optimize');
  return `${dbBase}/${this.repoid}/branch/${encodeURIComponent(branchId)}`;
  // return dbBase + `${this.user()}/${this.db()}/${this.repoid}/branch/${nuid}`
};

/**
 * Generate base db url consisting of server/action/organization/dbid
 * @param {typedef.ActionType} action
 * @returns {string}
 */
ConnectionConfig.prototype.dbBase = function (action) {
  return `${this.apiURL()}${action}/${this.dbURLFragment()}`;
};

// https://127.0.0.1:6363/api/document/admin/cloud-profiles/local/branch/main?graph_type=instance
// instance

/**
 * Generate base branch url consisting of server/action/organization/dbid/branchid
 * @param {typedef.ActionType} action
 * @returns {string}
 */
ConnectionConfig.prototype.repoBase = function (action) {
  let b = this.dbBase(action);
  if (this.repo()) b += `/${this.repo()}`;
  else b += `/${this.default_repo_id}`;
  return b;
};

/**
 * Get database branch Url
 * Generate base branch url consisting of server/action/organization/dbid/branchid
 * @param {typedef.ActionType} action
 * @returns {string}
 */
ConnectionConfig.prototype.branchBase = function (action) {
  let b = this.repoBase(action);
  // _meta repo is magic - stores repository metadata
  if (this.repo() === '_meta') {
    return b;
  }
  // _commits branch is magic - stores all commits for repo

  /*
    *https://127.0.0.1:6363/api/db/admin/profiles01/local/_commits
    */
  if (this.branch() === '_commits') {
    return `${b}/${this.branch()}`;
  } if (this.ref()) {
    return `${b}/commit/${this.ref()}`;
  } if (this.branch()) {
    return `${b}/branch/${encodeURIComponent(this.branch())}`;
  } b += `/branch/${this.default_branch_id}`;
  return b;
};

/**
 * Generate url portion consisting of organization/dbid
 * (unless dbid = system dbname in which case there is no organization)
 * @returns {string|boolean}
 */
// encodeURIComponent
ConnectionConfig.prototype.dbURLFragment = function () {
  if (this.db() === this.system_db) return this.db();
  return `${encodeURISegment(this.organization())}/${encodeURISegment(this.db())}`;
};

/**
 * Generate url portion consisting of organization/dbid
 * (unless dbid = system dbname in which case there is no organization)
 * @property {typedef.DocParamsPost|Object} params
 */

ConnectionConfig.prototype.documentURL = function (params) {
  const paramsStr = this.queryParameter(params);
  if (this.db() === this.system_db) {
    return this.dbBase('document') + paramsStr;
  }
  return this.branchBase('document') + paramsStr;
};

ConnectionConfig.prototype.prefixesURL = function () {
  if (this.db() === this.system_db) {
    return this.dbBase('prefixes');
  }
  return this.branchBase('prefixes');
};

ConnectionConfig.prototype.queryParameter = function (params) {
  if (!params || typeof params !== 'object') return '';
  const queryString = Object.keys(params).map((key) => `${key}=${encodeURISegment(params[key])}`).join('&');
  return `?${queryString}`;
};

ConnectionConfig.prototype.jsonSchemaURL = function (params) {
  const paramsStr = this.queryParameter(params);
  if (this.db() === this.system_db) {
    return this.dbBase('schema') + paramsStr;
  }
  return this.branchBase('schema') + paramsStr;
};

module.exports = ConnectionConfig;


/***/ }),

/***/ 229:
/***/ ((module) => {

/**
 * @file Terminus Constants
 * @license Apache Version 2
 * Constants representing API actions
 */

module.exports = Object.freeze({
  POST: 'POST',
  GET: 'GET',
  DELETE: 'DELETE',
  PUT: 'PUT',
  HEAD: 'HEAD',
  QUERY_DOCUMENT: 'QUERY_DOCUMENT',
  SQUASH_BRANCH: 'SQUASH_BRANCH',
  UPDATE_SCHEMA: 'UPDATE_SCHEMA',
  CONNECT: 'connect',
  CREATE_DATABASE: 'create_database',
  READ_DATABASE: 'read_database',
  UPDATE_DATABASE: 'update_database',
  CREATE_USER: 'create_user',
  READ_USER: 'read_user',
  UPDATE_USER: 'update_user',
  CREATE_ORGANIZATION: 'create_organization',
  READ_ORGANIZATION: 'read_organization',
  UPDATE_ORGANIZATION: 'update_organization',
  GET_ROLES: 'get_roles',
  UPDATE_ROLES: 'update_roles',
  CREATE_GRAPH: 'create_graph',
  GET_TRIPLES: 'get_triples',
  INSERT_TRIPLES: 'insert_triples',
  UPDATE_TRIPLES: 'update_triples',
  CLASS_FRAME: 'class_frame',
  WOQL_QUERY: 'woql_query',
  CLONE: 'clone',
  CSV: 'csv',
  WOQL: 'woql',
  FRAME: 'frame',
  PUSH: 'push',
  PULL: 'pull',
  FETCH: 'fetch',
  REBASE: 'rebase',
  RESET: 'reset',
  BRANCH: 'branch',
  RESET_BRANCH: 'reset_branch',
  ADD_CSV: 'add_csv',
  GET_CSV: 'get_csv',
  UPDATE_CSV: 'update_csv',
  MESSAGE: 'message',
  ACTION: 'action',
  INFO: 'info',
  OPTIMIZE_SYSTEM: 'optimize_system',
  GET_DIFF: 'getDiff',
  PATCH: 'patch',
});


/***/ }),

/***/ 3154:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* eslint-disable camelcase */
const pako = __nccwpck_require__(7738);
const axiosInstance = __nccwpck_require__(9330);
const UTILS = __nccwpck_require__(4948);
const CONST = __nccwpck_require__(229);
const ErrorMessage = __nccwpck_require__(181);
const { version } = __nccwpck_require__(1002);
// eslint-disable-next-line no-unused-vars
const typedef = __nccwpck_require__(1072);
/**
 * base 64 encodes a string using either the btoa implementation if available or the Buffer object.
 * @param {String} str string to be base 64 encoded
 */
function btoaImplementation(str) {
  try {
    return btoa(str);
  } catch (err) {
    return Buffer.from(str).toString('base64');
  }
}

/**
 * @param {object} response
 * @returns {object} Object having two properties result and dataVersion
 */
function getResultWithDataVersion(response) {
  return {
    result: response.data,
    dataVersion: response.headers['terminusdb-data-version']
      ? response.headers['terminusdb-data-version']
      : '',
  };
}
/**
 * Create the authorization header string
 * @param {object} auth_obj
 * @returns {object} Object with the Authorization header
 */

function formatAuthHeader(auth_obj) {
  if (!auth_obj) return '';
  const authType = { jwt: 'Bearer', basic: 'Basic', apikey: 'Token' };
  let auth_key = auth_obj.key;

  if (auth_obj.type === 'basic') {
    auth_key = btoaImplementation(`${auth_obj.user}:${auth_obj.key}`);
  }
  return `${authType[auth_obj.type]} ${auth_key}`;
}

function checkPayload(payload, options, compress) {
  if (!payload || typeof payload !== 'object') return false;
  const jsonStringPost = JSON.stringify(payload);
  if (jsonStringPost && jsonStringPost.length > 1024 && compress) {
    // eslint-disable-next-line no-param-reassign
    options.headers['Content-Encoding'] = 'gzip';
    return pako.gzip(jsonStringPost);
  }
  return false;
}

/**
 * @file Dispatch Request
 * @license Apache Version 2
 * @description Functions for dispatching API requests via the axios library.
 * @param {string} url  API endpoint URL
 * @param {string} action API action
 * @param {object} payload data to be transmitted to endpoint
 * @param {typedef.CredentialObj} local_auth the local authorization object
 * @param {typedef.CredentialObj} remote_auth the remote authoriuzation object
 * @param {object} customHeaders all the custom header to add to your call
 * @param {boolean} [getDataVersion] If true the function will return object having result
 * and dataVersion.
 * @param {boolean} [compress] If true, compress the data with gzip if its size is bigger than 1024
 */

// eslint-disable-next-line max-len
function DispatchRequest(url, action, payload, local_auth, remote_auth = null, customHeaders = null, getDataVersion = false, compress = false) {
  /*
     *CORS is only required when trying to fetch data from a browser,
     *as browsers by default will block requests to different origins
     */
  const options = {
    mode: 'cors', // no-cors, cors, *same-origin
    redirect: 'follow', // manual, *follow, error
    referrer: 'client',
    maxContentLength: Infinity,
    maxBodyLength: Infinity,
    headers: {},
    // url:url,
    // no-referrer, *client
  };
  // Only allow self signed certs on 127.0.0.1
  // and on node
  if (url.startsWith('https://127.0.0.1') && typeof window === 'undefined') {
    // eslint-disable-next-line global-require
    const https = __nccwpck_require__(5687);
    const agent = new https.Agent({
      rejectUnauthorized: false,
    });
    options.httpsAgent = agent;
  }

  /*
     * I can call the local database using the local authorization key or
     * a jwt token
     */
  /* if (local_auth && local_auth.type === 'basic') {
    const encoded = btoaImplementation(`${local_auth.user}:${local_auth.key}`);
    options.headers = { Authorization: `Basic ${encoded}` };
  } else if (local_auth && local_auth.type === 'jwt') {
    options.headers = { Authorization: `Bearer ${local_auth.key}` };
  } else if (local_auth && local_auth.type === 'apikey') {
    options.headers = { Authorization: `Token ${local_auth.key}` };
  } */
  /*
     * I can call the local database or a custom installation using the local authorization key or
     * I Can call TerminusX using the jwt token or an apiToken
     */
  if (local_auth && typeof local_auth === 'object') {
    options.headers.Authorization = formatAuthHeader(local_auth);
  }

  /*
   * pass the Authorization information of another
   * terminusdb server to the local terminusdb
   * for authentication you can use jwt or the apiKey token in TerminusX or
   * the Basic autentication if is allowed in the custom server
   */
  if (remote_auth && typeof remote_auth === 'object') {
    options.headers['Authorization-Remote'] = formatAuthHeader(remote_auth);
  }

  if (customHeaders && typeof customHeaders === 'object') {
    // eslint-disable-next-line array-callback-return
    Object.keys(customHeaders).map((key) => {
      options.headers[key] = customHeaders[key];
    });
  }

  if (typeof window === 'undefined') {
    options.headers['User-Agent'] = `terminusdb-client-js/${version}`;
  }

  switch (action) {
    case CONST.DELETE: {
      if (payload) {
        options.headers = options.headers ? options.headers : {};
        options.headers['Content-Type'] = 'application/json; charset=utf-8';
        options.data = payload;
      }
      return axiosInstance
        .delete(url, options)
        .then((response) => (getDataVersion ? getResultWithDataVersion(response) : response.data))
        .catch((err) => {
          throw ErrorMessage.apiErrorFormatted(url, options, err);
        });
    }
    case CONST.HEAD: {
      return axiosInstance
        .head(url, options)
        .then((response) => (getDataVersion ? getResultWithDataVersion(response) : response.data))
        .catch((err) => {
          throw ErrorMessage.apiErrorFormatted(url, options, err);
        });
    }
    case CONST.GET: {
      if (payload) {
        const ext = UTILS.URIEncodePayload(payload);
        // eslint-disable-next-line no-param-reassign
        if (ext) url += `?${ext}`;
      }
      return axiosInstance
        .get(url, options)
        .then((response) => {
          const r = getDataVersion ? getResultWithDataVersion(response) : response.data;
          return r;
        })
        .catch((err) => {
          throw ErrorMessage.apiErrorFormatted(url, options, err);
        });
    }
    case CONST.ADD_CSV:
    case CONST.INSERT_TRIPLES: {
      options.headers = options.headers ? options.headers : {};
      options.headers['Content-Type'] = 'application/form-data; charset=utf-8';
      return axiosInstance
        .put(url, payload, options)
        .then((response) => (getDataVersion ? getResultWithDataVersion(response) : response.data))
        .catch((err) => {
          throw ErrorMessage.apiErrorFormatted(url, options, err);
        });
    }
    case CONST.PUT: {
      options.headers = options.headers ? options.headers : {};
      options.headers['Content-Type'] = 'application/json; charset=utf-8';
      let compressedContent = null;
      const jsonString = JSON.stringify(payload);

      if (jsonString.length > 1024 && compress) {
        options.headers['Content-Encoding'] = 'gzip';
        compressedContent = pako.gzip(jsonString);
      }
      return axiosInstance
        .put(url, compressedContent || payload, options)
        .then((response) => (getDataVersion ? getResultWithDataVersion(response) : response.data))
        .catch((err) => {
          throw ErrorMessage.apiErrorFormatted(url, options, err);
        });
    }
    case CONST.QUERY_DOCUMENT: {
      options.headers = options.headers ? options.headers : {};
      options.headers['X-HTTP-Method-Override'] = 'GET';
      // eslint-disable-next-line no-fallthrough
    }
    default: {
      options.headers = options.headers ? options.headers : {};
      options.headers['Content-Type'] = 'application/json; charset=utf-8';
      const compressedContentPost = checkPayload(payload, options, compress);
      return axiosInstance
        .post(url, compressedContentPost || payload || {}, options)
        .then((response) => {
          const r = getDataVersion ? getResultWithDataVersion(response) : response.data;
          return r;
        })
        .catch((err) => {
          throw ErrorMessage.apiErrorFormatted(url, options, err);
        });
    }
  }
}

module.exports = DispatchRequest;


/***/ }),

/***/ 181:
/***/ ((module) => {

/* eslint-disable no-restricted-syntax */
/* eslint-disable prefer-destructuring */
/* eslint-disable no-use-before-define */
/* eslint-disable no-param-reassign */
function getErrorAsMessage(url, api, err) {
  let str = '';
  if (err.response) {
    err = err.response;
    if (err.data) str += `${formatErrorMessage(err.data)}`;
  } else if (err.body) str += `${formatErrorMessage(err.body)}`;
  url = url.split('?')[0];

  if (err.status) str += `Code: ${err.status}`;
  if (err.action) str += ` Action: ${err.action}`;
  if (err.type) str += ` Type: ${err.type}`;
  if (url) str += ` url: ${url}`;
  if (api && api.method) str += ` method: ${api.method}`;
  if (err.stack) str = [str, err.stack].join('\n');
  return str;
}

function formatErrorMessage(msg) {
  if (typeof msg === 'object') {
    let nmsg = '';
    for (const key of Object.keys(msg)) {
      if (msg[key] && typeof msg[key] !== 'object') nmsg += `${key} ${msg[key]} `;
    }
    return nmsg;
  }
  return msg;
}

function accessDenied(action, db, server) {
  const err = {};
  err.status = 403;
  err.url = (server || '') + (db || '');
  err.type = 'client';
  err.action = action;
  err.body = `${err.action} not permitted for ${err.url}`;
  return err;
}

function getAPIErrorMessage(url, api, err) {
  return `API Error ${getErrorAsMessage(url, api, err)}`;
}

function getAccessDeniedMessage(url, api, err) {
  return `Access Denied ${getErrorAsMessage(url, api, err)}`;
}

function getInvalidURIMessage(url, call) {
  const str = `Invalid argument to
            ${call}. 
            ${url}
            is not a valid Terminus DB API endpoint`;
  return str;
}

function getInvalidParameterMessage(call, msg) {
  const str = `Invalid Parameter to
            ${call}. 
            ${msg}`;
  return str;
}

/**
 * Utility functions for generating and retrieving error messages
 * and storing error state
 */

function parseAPIError(response) {
  const err = {};
  err.status = response.status;
  err.type = response.type;
  if (response.data && typeof response.data === 'object') {
    let msg;
    try {
      msg = response.text();
    } catch (e) {
      try {
        msg = response.json();
      } catch (error) {
        msg = response.toString();
      }
    }
    err.body = msg;
  } else if (response.data) err.body = response.data;
  err.url = response.url;
  err.headers = response.headers;
  err.redirected = response.redirected;
  return err;
}

function apiErrorFormatted(url, options, err) {
  const e = new Error(getAPIErrorMessage(url, options, err));
  if (err.response && err.response.data) e.data = err.response.data;
  if (err.response && err.response.status) e.status = err.response.status;
  return e;
}

module.exports = {
  apiErrorFormatted,
  getErrorAsMessage,
  getAPIErrorMessage,
  getAccessDeniedMessage,
  accessDenied,
  getInvalidURIMessage,
  getInvalidParameterMessage,
  parseAPIError,
};


/***/ }),

/***/ 9269:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* eslint-disable guard-for-in */
/* eslint-disable no-restricted-syntax */
/* eslint-disable no-underscore-dangle */
/* eslint-disable no-self-assign */
/* eslint-disable camelcase */
/* eslint-disable no-param-reassign */
// WOQLQuery
/**
 * module WOQLQuery
 *
 */

/**
 * defines the internal functions of the woql query object - the
 * language API is defined in WOQLQuery
 * @module WOQLQuery
 * @constructor
 * @param {object} [query] json-ld query for initialisation
 * @returns {WOQLQuery}
 */

const WOQLQueryExt = __nccwpck_require__(2399);

// eslint-disable-next-line no-unused-vars
const typedef = __nccwpck_require__(1072);
// const WOQLLibrary = require('./woqlLibrary');

class WOQLQuery extends WOQLQueryExt {
  // eslint-disable-next-line no-useless-constructor
  constructor(query) {
    super(query);
  }
}

// WOQLQuery.prototype.counter = 1;
/**
 * @param {typedef.GraphRef} [Graph] - the resource identifier of a graph possible
 * @param {string|Var} [Subj] - The IRI of a triple’s subject or a variable
 * @param {string|Var} [Pred] - The IRI of a property or a variable
 * @param {string|Var} [Obj] - The IRI of a node or a variable, or a literal
 * @returns {WOQLQuery} - A WOQLQuery which contains the pattern matching expression
 */
/**
 * Simple composite functions which produce WOQL queries
 */
WOQLQuery.prototype.star = function (Graph, Subj, Pred, Obj) {
  Subj = Subj || 'v:Subject';
  Pred = Pred || 'v:Predicate';
  Obj = Obj || 'v:Object';
  Graph = Graph || false;
  if (Graph) {
    return this.quad(Subj, Pred, Obj, Graph);
  }
  return this.triple(Subj, Pred, Obj);
};

/**
 * @param {string|Var} [Subj] - The IRI of a triple’s subject or a variable
 * @param {string|Var} [Pred] - The IRI of a property or a variable
 * @param {string|Var} [Obj] - The IRI of a node or a variable, or a literal
 * @param {typedef.GraphRef} [Graph] - the resource identifier of a graph possible
 * @returns {WOQLQuery} - A WOQLQuery which contains the pattern matching expression
 */

WOQLQuery.prototype.all = function (Subj, Pred, Obj, Graph) {
  return this.star(Graph, Subj, Pred, Obj);
};

/**
 * @param {string} s
 * @returns {object}
 */

WOQLQuery.prototype.string = function (s) {
  return { '@type': 'xsd:string', '@value': String(s) };
};

/**
 * @param {boolean} tf
 * @returns {object}
 */

WOQLQuery.prototype.boolean = function (tf) {
  tf = tf || false;
  return this.literal(tf, 'boolean');
};

/**
 * @param {any} s
 * @param {string} t
 * @returns {object}
 */
WOQLQuery.prototype.literal = function (s, t) {
  t = t.indexOf(':') === -1 ? `xsd:${t}` : t;
  return { '@type': t, '@value': s };
};

/**
 * @param {string} s
 * @returns {object}
 */

WOQLQuery.prototype.iri = function (s) {
  return {
    '@type': 'NodeValue',
    node: s,
  };
};

/**
 * Update a pattern matching rule for the triple (Subject, Predicate, oldObjValue) with the
 * new one (Subject, Predicate, newObjValue)
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string|Var} newObjValue - The value to update or a literal
 * @param {string|Var} oldObjValue - The old value of the object
 * @returns {WOQLQuery} A WOQLQuery which contains the a Update Triple Statement
 */

WOQLQuery.prototype.update_triple = function (subject, predicate, newObjValue, oldObjValue) {
  const tmp_name = oldObjValue || `v:AnyObject__${this.counter += 1}`;
  return this.and(
    new WOQLQuery().opt(
      new WOQLQuery()
        .triple(subject, predicate, tmp_name)
        .delete_triple(subject, predicate, tmp_name)
        .not()
        .triple(subject, predicate, newObjValue),
    ),
    new WOQLQuery().add_triple(subject, predicate, newObjValue),
  );
};

/**
 * @description Update a pattern matching rule for the quad [S, P, O, G]
 * (Subject, Predicate, Object, Graph)
 * @param {string} subject - The IRI of a triple’s subject or a variable
 * @param {string} predicate - The IRI of a property or a variable
 * @param {string} newObject - The value to update or a literal
 * @param {string} graph - the resource identifier of a graph possible value are
 * schema/{main - myschema - *} | instance/{main - myschema - *}  | inference/{main - myschema - *}
 * @returns {WOQLQuery} A WOQLQuery which contains the a Update Quad Statement
 */

WOQLQuery.prototype.update_quad = function (subject, predicate, newObject, graph) {
  const tmp_name = `v:AnyObject__${this.counter += 1}`;
  return this.and(
    new WOQLQuery().opt(
      new WOQLQuery()
        .quad(subject, predicate, tmp_name, graph)
        .delete_quad(subject, predicate, tmp_name, graph)
        .not()
        .quad(subject, predicate, newObject, graph),
    ),
    new WOQLQuery().add_quad(subject, predicate, newObject, graph),
  );
};

/**
 * Deletes all triples in the passed graph (defaults to instance/main)
 * @param {typedef.GraphRef} [graphRef] - Resource String identifying the graph from
 * which all triples will be removed
 * @returns {WOQLQuery} - A WOQLQuery which contains the deletion expression
 */

WOQLQuery.prototype.nuke = function (graphRef) {
  if (graphRef) {
    return this.quad('v:A', 'v:B', 'v:C', graphRef).delete_quad('v:A', 'v:B', 'v:C', graphRef);
  }
  return this.triple('v:A', 'v:B', 'v:C').delete_triple('v:A', 'v:B', 'v:C');
};

/**
 *
 * @param {string|Var} node -  The IRI of a node or a variable containing an IRI which will
 * be the subject of the builder functions
 * @param {typedef.FuntionType} [type] - Optional type of builder function to build
 * (default is triple)
 * @returns {WOQLQuery} - A WOQLQuery which contains the partial Node pattern matching expression
 * @example
 */

WOQLQuery.prototype.node = function (node, type) {
  type = type || false;
  if (type === 'add_quad') type = 'AddTriple';
  else if (type === 'delete_quad') type = 'DeleteTriple';
  else if (type === 'add_triple') type = 'AddTriple';
  else if (type === 'delete_triple') type = 'DeleteTriple';
  else if (type === 'quad') type = 'Triple';
  else if (type === 'triple') type = 'Triple';
  if (type && type.indexOf(':') === -1) type = type;
  const ctxt = { subject: node };
  if (type) ctxt.action = type;
  this._set_context(ctxt);
  return this;
};

// do not remove
/**
 * Sets the graph resource ID that will be used for subsequent chained function calls
 * @param {typedef.GraphRef} [graphRef] Resource String identifying the graph which will
 * be used for subsequent chained schema calls
 * @returns {WOQLQuery} A WOQLQuery which contains the partial Graph pattern matching expression
 */
WOQLQuery.prototype.graph = function (graphRef) {
  return this._set_context({
    graph: graphRef,
  });
};
// do not remove
WOQLQuery.prototype._set_context = function (ctxt) {
  if (!this.triple_builder_context) this.triple_builder_context = {};

  for (const k in ctxt) {
    this.triple_builder_context[k] = ctxt[k];
  }

  return this;
};

/**
 * @param {string|Var} id - IRI string or variable containing
 * @param {string|Var} type  -  IRI string or variable containing the IRI of the
 * @param {typedef.GraphRef} [refGraph] - Optional Graph resource identifier
 * @returns {WOQLQuery} A WOQLQuery which contains the insert expression
 */

WOQLQuery.prototype.insert = function (id, type, refGraph) {
  refGraph = refGraph || (this.triple_builder_context ? this.triple_builder_context.graph : false);
  if (refGraph) {
    return this.add_quad(id, 'rdf:type', `@schema:${type}`, refGraph);
  }
  return this.add_triple(id, 'rdf:type', `@schema:${type}`);
};

module.exports = WOQLQuery;


/***/ }),

/***/ 3552:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* eslint-disable no-underscore-dangle */
/* eslint-disable no-use-before-define */
/* eslint-disable guard-for-in */
/* eslint-disable no-restricted-syntax */
/* eslint-disable no-unused-vars */
/* eslint-disable consistent-return */
/* eslint-disable camelcase */
/* eslint-disable no-redeclare */
/* eslint-disable no-plusplus */
/* eslint-disable block-scoped-var */
/* eslint-disable no-var */
/* eslint-disable vars-on-top */
/* eslint-disable no-param-reassign */
/// /@ts-check
const UTILS = __nccwpck_require__(4948);
const WOQLPrinter = __nccwpck_require__(1116);
const { Var, Vars, Doc } = __nccwpck_require__(7205);

// eslint-disable-next-line no-unused-vars
const typedef = __nccwpck_require__(1072);

/**
 * defines the internal functions of the woql query object - the
 * language API is defined in WOQLQuery
 * @module WOQLQuery
 * @constructor
 * @param {object} [query] json-ld query for initialisation
 * @returns {WOQLQuery}
 */
/* function WOQLQuery(query) {
  this.query = query || {};
  this.errors = [];
  this.cursor = this.query;
  this.chain_ended = false;
  this.contains_update = false;
  // operators which preserve global paging
  this.paging_transitive_properties = ['select', 'from', 'start', 'when', 'opt', 'limit'];

  this.update_operators = [
    'AddTriple',
    'DeleteTriple',
    'AddQuad',
    'DeleteQuad',
    'InsertDocument',
    'DeleteDocument',
    'UpdateDocument',
  ];

  this.vocab = this.loadDefaultVocabulary();
  // object used to accumulate triples from fragments to support usage like node("x").label("y");
  this.tripleBuilder = false;
  return this;
} */

class WOQLQuery {
  triple_builder_context = {};

  query = null;

  counter = 1;

  errors = [];

  cursor = {};

  chain_ended = false;

  contains_update = false;

  // operators which preserve global paging
  paging_transitive_properties = ['select', 'from', 'start', 'when', 'opt', 'limit'];

  update_operators = [
    'AddTriple',
    'DeleteTriple',
    'AddQuad',
    'DeleteQuad',
    'InsertDocument',
    'DeleteDocument',
    'UpdateDocument',
  ];

  vocab = this.loadDefaultVocabulary();

  // object used to accumulate triples from fragments to support usage like node("x").label("y");
  tripleBuilder = false;
  /**
   * defines the internal functions of the woql query object - the
   * language API is defined in WOQLQuery
   * @module WOQLQuery
   * @constructor
   * @param {object} [query] json-ld query for initialisation
   * @returns {WOQLQuery}
   */

  constructor(query) {
    this.query = query || {};
    // this.errors = [];
    this.cursor = this.query;

    // eslint-disable-next-line no-constructor-return
    return this;
  }
}

/**
 * Basic Error handling
 */
WOQLQuery.prototype.parameterError = function (msg) {
  this.errors.push({ type: this.cursor['@type'], message: msg });
  return this;
};

WOQLQuery.prototype.hasErrors = function () {
  return this.errors.length > 0;
};

/**
 * Internal library function which adds a subquery and sets the cursor
 */
WOQLQuery.prototype.addSubQuery = function (Subq) {
  if (Subq) {
    this.cursor.query = this.jobj(Subq);
  } else {
    const nv = {};
    this.cursor.query = nv;
    this.cursor = nv;
  }
  return this;
};

/**
 * Does this query contain an update
 */
WOQLQuery.prototype.containsUpdate = function (json) {
  json = json || this.query;
  if (this.update_operators.indexOf(json['@type']) !== -1) return true;
  if (json.consequent && this.containsUpdate(json.consequent)) return true;
  if (json.query) return this.containsUpdate(json.query);
  if (json.and) {
    for (var i = 0; i < json.and.length; i++) {
      if (this.containsUpdate(json.and[i])) return true;
    }
  }
  if (json.or) {
    for (var i = 0; i < json.or.length; i++) {
      if (this.containsUpdate(json.or[i])) return true;
    }
  }

  return false;
};

/**
 * Called to inidicate that this query will cause an update to the DB
 */
WOQLQuery.prototype.updated = function () {
  this.contains_update = true;
  return this;
};

/**
 * A bunch of internal functions for formatting values for JSON-LD translation
 */

/**
 * Wraps the passed value in a json-ld literal carriage
 */
WOQLQuery.prototype.jlt = function (val, type) {
  if (!type) type = 'xsd:string';
  else type = type.indexOf(':') === -1 ? `xsd:${type}` : type;
  return { '@type': type, '@value': val };
};

WOQLQuery.prototype.varj = function (varb) {
  if (varb instanceof Var) varb = varb.name;
  if (varb.substring(0, 2) === 'v:') varb = varb.substring(2);
  if (typeof varb === 'string') {
    return {
      '@type': 'Value',
      variable: varb,
    };
  }
  return varb;
};

WOQLQuery.prototype.rawVar = function (varb) {
  if (varb instanceof Var) return varb.name;
  if (varb.substring(0, 2) === 'v:') varb = varb.substring(2);
  return varb;
};

WOQLQuery.prototype.rawVarList = function (vl) {
  const ret = [];
  for (let i = 0; i < vl.length; i++) {
    const co = this.rawVar(vl[i]);
    ret.push(co);
  }
  return ret;
};

/**
 * Transforms a javascript representation of a query into a json object if needs be
 */
WOQLQuery.prototype.jobj = function (qobj) {
  if (qobj.json) {
    return qobj.json();
  }
  if (qobj === true) return { '@type': 'True' };
  return qobj;
  // return new WOQLQuery.json(qobj);
};

/**
 * Wraps the elements of an AS variable in the appropriate json-ld
 */
WOQLQuery.prototype.asv = function (colname_or_index, variable, type) {
  const asvar = {};
  if (typeof colname_or_index === 'number') {
    asvar['@type'] = 'Column';
    asvar.indicator = { '@type': 'Indicator', index: colname_or_index };
  } else if (typeof colname_or_index === 'string') {
    asvar['@type'] = 'Column';
    asvar.indicator = { '@type': 'Indicator', name: colname_or_index };
  }
  if (variable instanceof Var) {
    asvar.variable = variable.name;
  } else if (variable.substring(0, 2) === 'v:') {
    asvar.variable = variable.substring(2);
  } else {
    asvar.variable = variable;
  }
  if (type) asvar.type = type;
  return asvar;
};

/**
 * JSON LD Format Descriptor
 * @param {object} opts
 */
WOQLQuery.prototype.wform = function (opts) {
  if (opts && opts.type) {
    this.cursor.format = {
      '@type': 'Format',
      format_type: { '@value': opts.type, '@type': 'xsd:string' },
    };
    if (typeof opts.format_header !== 'undefined') {
      const h = !!opts.format_header;
      this.cursor.format.format_header = {
        '@value': h,
        '@type': 'xsd:boolean',
      };
    }
  }
  return this;
};

/**
 * Wraps arithmetic operators in the appropriate json-ld
 */
WOQLQuery.prototype.arop = function (arg) {
  if (typeof arg === 'object') {
    return arg.json ? arg.json() : arg;
  }
  return this.cleanArithmeticValue(arg, 'xsd:decimal');
};

/**
 * takes input that can be either a string (variable name)
 * or an array - each element of the array is a member of the list
 */
WOQLQuery.prototype.dataList = function (wvar, string_only) {
  if (typeof wvar === 'string') return this.expandDataVariable(wvar, true);
  if (Array.isArray(wvar)) {
    const ret = [];
    for (let i = 0; i < wvar.length; i++) {
      const co = this.cleanDataValue(wvar[i]);
      ret.push(co);
    }
    return ret;
  }
};

/**
 * takes a list of input that can be any value
 */
WOQLQuery.prototype.valueList = function (wvar, string_only) {
  if (typeof wvar === 'string') return this.expandValueVariable(wvar, true);
  if (Array.isArray(wvar)) {
    const ret = [];
    for (let i = 0; i < wvar.length; i++) {
      let co = this.cleanObject(wvar[i]);
      if (typeof co === 'string') co = { node: co };
      ret.push(co);
    }
    return ret;
  }
};

/**
 * creates an unadorned variable name list
 */
WOQLQuery.prototype.vlist = function (list) {
  const vl = [];
  for (let i = 0; i < list.length; i++) {
    const v = this.expandValueVariable(list[i]);
    vl.push(v.variable);
  }
  return vl;
};

/**
 * Wraps data values
 */
WOQLQuery.prototype.dataValueList = function (list) {
  const dvl = [];
  for (let i = 0; i < list.length; i++) {
    const o = this.cleanDataValue(list[i]);
    dvl.push(o);
  }
  return dvl;
};

/**
 * Transforms whatever is passed in as the subject into the appropriate json-ld for variable or id
 */
WOQLQuery.prototype.cleanSubject = function (s) {
  /**
     * @type {any}
     */
  let subj = false;
  if (s instanceof Var) {
    return this.expandNodeVariable(s);
  } if (typeof s === 'object') {
    return s;
  } if (typeof s === 'string') {
    if (s.indexOf('v:') !== -1) subj = s;
    else subj = s;
    return this.expandNodeVariable(subj);
  }
  this.parameterError('Subject must be a URI string');
  return `${s}`;
};

/**
 * Transforms whatever is passed in as the predicate (id or variable) into the
 * appropriate json-ld form
 */
WOQLQuery.prototype.cleanPredicate = function (p) {
  /**
    * @type {any}
    */
  let pred = false;
  if (p instanceof Var) return this.expandNodeVariable(p);
  if (typeof p === 'object') return p;
  if (typeof p !== 'string') {
    this.parameterError('Predicate must be a URI string');
    return `${p}`;
  }
  if (p.indexOf(':') !== -1) pred = p;
  else if (this.wellKnownPredicate(p)) pred = p;// this.vocab[p]
  else pred = p;// 'scm'
  // else pred = 'scm:' + p
  return this.expandNodeVariable(pred);
};

WOQLQuery.prototype.wellKnownPredicate = function (p, noxsd) {
  if (this.vocab && this.vocab[p]) {
    const full = this.vocab[p];
    const start = full.substring(0, 3);
    if (full === 'system:abstract' || start === 'xdd' || start === 'xsd') return false;
    return true;
  }
  return false;
};

WOQLQuery.prototype.cleanPathPredicate = function (p) {
  let pred = false;
  if (p.indexOf(':') !== -1) pred = p;
  else if (this.wellKnownPredicate(p)) pred = this.vocab[p];
  else pred = p; // 'scm:' + p
  return pred;
};

/**
 * Transforms whatever is passed in as the object of
 * a triple into the appropriate json-ld form (variable, literal or id)
 */
WOQLQuery.prototype.cleanObject = function (o, t) {
  const obj = { '@type': 'Value' };
  if (o instanceof Var) {
    return this.expandValueVariable(o);
  } if (o instanceof Doc) {
    return o.encoded;
  } if (typeof o === 'string') {
    if (o.indexOf('v:') !== -1) {
      return this.expandValueVariable(o);
    }
    obj.node = o;
  } else if (typeof o === 'number') {
    t = t || 'xsd:decimal';
    obj.data = this.jlt(o, t);
  } else if (typeof o === 'boolean') {
    t = t || 'xsd:boolean';
    obj.data = this.jlt(o, t);
  } else if (typeof o === 'object' && o) {
    if (typeof o['@value'] !== 'undefined') obj.data = o;
    else return o;
  // eslint-disable-next-line no-dupe-else-if
  } else if (typeof o === 'boolean') {
    t = t || 'xsd:boolean';
    obj['woql:datatype'] = this.jlt(o, t);
  }
  return obj;
};

WOQLQuery.prototype.cleanDataValue = function (o, t) {
  const obj = { '@type': 'DataValue' };
  if (o instanceof Var) {
    return this.expandDataVariable(o);
  } if (o instanceof Doc) {
    return o.encoded;
  } if (typeof o === 'string') {
    if (o.indexOf('v:') !== -1) {
      return this.expandDataVariable(o);
    }
    obj.data = this.jlt(o, t);
  } else if (typeof o === 'number') {
    t = t || 'xsd:decimal';
    obj.data = this.jlt(o, t);
  } else if (typeof o === 'boolean') {
    t = t || 'xsd:boolean';
    obj.data = this.jlt(o, t);
  } else if (Array.isArray(o)) {
    const res = [];
    for (let i = 0; i < o.length; i++) {
      res.push(this.cleanDataValue(o[i]));
    }
    obj.list = res;
  } else if (typeof o === 'object' && o) {
    if (o['@value']) obj.data = o;
    else return o;
  }
  return obj;
};

WOQLQuery.prototype.cleanArithmeticValue = function (o, t) {
  const obj = { '@type': 'ArithmeticValue' };
  if (o instanceof Var) {
    return this.expandArithmeticVariable(o);
  } if (typeof o === 'string') {
    if (o.indexOf('v:') !== -1) {
      return this.expandArithmeticVariable(o);
    }
    obj.data = this.jlt(o, t);
  } else if (typeof o === 'number') {
    t = t || 'xsd:decimal';
    obj.data = this.jlt(o, t);
  } else if (typeof o === 'object' && o) {
    if (o['@value']) obj.data = o;
    else return o;
  }
  return obj;
};

WOQLQuery.prototype.cleanNodeValue = function (o, t) {
  const obj = { '@type': 'NodeValue' };
  if (o instanceof Var) {
    return this.expandNodeVariable(o);
  } if (typeof o === 'string') {
    if (o.indexOf('v:') !== -1) {
      return this.expandNodeVariable(o);
    }
    obj.node = o;
  } else if (typeof o === 'object' && o) {
    return o;
  }
  return obj;
};

/**
 * Transforms a graph filter or graph id into the proper json-ld form
 */
WOQLQuery.prototype.cleanGraph = function (g) {
  return g;
};

/**
 * Transforms strings that start with v: into variable json-ld structures
 * @param varname - will be transformed if it starts with v:
 */
WOQLQuery.prototype.expandVariable = function (varname, type, always) {
  if (varname instanceof Var) {
    return {
      '@type': type,
      variable: varname.name,
    };
  } if (varname.substring(0, 2) === 'v:' || always) {
    if (varname.substring(0, 2) === 'v:') varname = varname.substring(2);
    return {
      '@type': type,
      variable: varname,
    };
  }
  return {
    '@type': type,
    node: varname,
  };
};

WOQLQuery.prototype.expandValueVariable = function (varname, always) {
  return this.expandVariable(varname, 'Value', always);
};

WOQLQuery.prototype.expandNodeVariable = function (varname, always) {
  return this.expandVariable(varname, 'NodeValue', always);
};

WOQLQuery.prototype.expandDataVariable = function (varname, always) {
  return this.expandVariable(varname, 'DataValue', always);
};

WOQLQuery.prototype.expandArithmeticVariable = function (varname, always) {
  return this.expandVariable(varname, 'ArithmeticValue', always);
};

WOQLQuery.prototype.defaultContext = function (DB_IRI) {
  const def = {};
  for (const pref in UTILS.standard_urls) {
    def[pref] = UTILS.standard_urls[pref];
  }
  def.scm = `${DB_IRI}/schema#`;
  def.doc = `${DB_IRI}/data/`;
  return def;
};

/**
 * Retrieves the value of the current json-ld context
 */
WOQLQuery.prototype.getContext = function (q) {
  q = q || this.query;
  for (const prop of Object.keys(q)) {
    if (prop === '@context') return q[prop];
    if (this.paging_transitive_properties.indexOf(prop) !== -1) {
      const nq = q[prop][1];
      const nc = this.getContext(nq);
      if (nc) return nc;
    }
  }
};

/**
 * sets the value of the current json-ld context on a full query scope
 */
WOQLQuery.prototype.context = function (c) {
  this.query['@context'] = c;
};

/**
 * vocabulary elements that can be used without prefixes in woql.js queries
 */
WOQLQuery.prototype.loadDefaultVocabulary = function () {
  const vocab = {};
  // vocab.type = 'rdf:type'
  // vocab.label = 'rdfs:label'
  vocab.Class = 'owl:Class';
  vocab.DatatypeProperty = 'owl:DatatypeProperty';
  vocab.ObjectProperty = 'owl:ObjectProperty';
  vocab.Document = 'system:Document';
  vocab.abstract = 'system:abstract';
  vocab.comment = 'rdfs:comment';
  vocab.range = 'rdfs:range';
  vocab.domain = 'rdfs:domain';
  vocab.subClassOf = 'rdfs:subClassOf';
  vocab.string = 'xsd:string';
  vocab.integer = 'xsd:integer';
  vocab.decimal = 'xsd:decimal';
  vocab.boolean = 'xdd:boolean';
  vocab.email = 'xdd:email';
  vocab.json = 'xdd:json';
  vocab.dateTime = 'xsd:dateTime';
  vocab.date = 'xsd:date';
  vocab.coordinate = 'xdd:coordinate';
  vocab.line = 'xdd:coordinatePolyline';
  vocab.polygon = 'xdd:coordinatePolygon';
  return vocab;
};

/**
 * Provides the query with a 'vocabulary' a list of well known predicates that can be used without
 * prefixes mapping: id: prefix:id ...
 */
WOQLQuery.prototype.setVocabulary = function (vocab) {
  this.vocab = vocab;
};

WOQLQuery.prototype.getVocabulary = function (vocab) {
  return this.vocab;
};

/**
 * Use instead woqlclient.query('myWOQLQuery')
 * @deprecated
 * Executes the query using the passed client to connect to a server
 *
 */
WOQLQuery.prototype.execute = function (client, commit_msg) {
  return client.query(this, commit_msg);
};

/**
 * converts back and forward from json
 * if the argument is present, the current query is set to it,
 * if the argument is not present, the current json version of this query is returned
 * @param {object} [json] a query in json format
 * @returns {object}
 */
WOQLQuery.prototype.json = function (json) {
  if (json) {
    this.query = copyJSON(json);
    return this;
  }
  return copyJSON(this.query, true);
};

/**
 * Returns a script version of the query
 *
 * @param {string} [clang] - either "js" or "python"
 */
WOQLQuery.prototype.prettyPrint = function (clang = 'js') {
  const printer = new WOQLPrinter(this.vocab, clang);
  return printer.printJSON(this.query);
};

/**
 * Finds the last woql element that has a subject in it and returns the json for that
 * used for triplebuilder to chain further calls - when they may be inside ands or ors or subqueries
 * @param {object} json
 */
WOQLQuery.prototype.findLastSubject = function (json) {
  if (json && json.and) {
    for (var i = json.and.length - 1; i >= 0; i--) {
      const lqs = this.findLastSubject(json.and[i]);
      if (lqs) return lqs;
    }
  }
  if (json && json.or) {
    for (var i = json.or.length - 1; i >= 0; i--) {
      const lqs = this.findLastSubject(json.or[i]);
      if (lqs) return lqs;
    }
  }
  if (json && json.query) {
    const ls = this.findLastSubject(json.query);
    if (ls) return ls;
  }
  // check for cardinality here
  if (json && json.subject) {
    return json;
  }
  return false;
};

/**
 * Finds the last woql element that has a subject in that is a property id
 * used for triplebuilder to chain further calls - when they may be inside ands or ors or subqueries
 * @param {object} json
 */
WOQLQuery.prototype.findLastProperty = function (json) {
  if (json && json.and) {
    for (var i = json.and.length - 1; i >= 0; i--) {
      const lqs = this.findLastProperty(json.and[i]);
      if (lqs) return lqs;
    }
  }
  if (json && json.or) {
    for (var i = json.or.length - 1; i >= 0; i--) {
      const lqs = this.findLastProperty(json.or[i]);
      if (lqs) return lqs;
    }
  }
  if (json && json.query) {
    const ls = this.findLastProperty(json.query);
    if (ls) return ls;
  }
  if (
    json
        && json.subject
        && this._is_property_triple(json.predicate, json.object)
  ) {
    return json;
  }
  return false;
};

WOQLQuery.prototype._is_property_triple = function (pred, obj) {
  const pred_str = pred.node ? pred.node : pred;
  const obj_str = obj.node ? obj.node : obj;
  if (obj_str === 'owl:ObjectProperty' || obj_str === 'owl:DatatypeProperty') return true;
  if (pred_str === 'rdfs:domain' || pred_str === 'rdfs:range') return true;
  return false;
};

/**
 * Turns a textual path pattern into a JSON-LD description
 */
WOQLQuery.prototype.compilePathPattern = function (pat) {
  const toks = tokenize(pat);
  if (toks && toks.length) return tokensToJSON(toks, this);
  this.parameterError(`Pattern error - could not be parsed ${pat}`);
};

/**
 * Tokenizes the pattern into a sequence of tokens which may be clauses or operators
 * @param {string} pat
 */
function tokenize(pat) {
  let parts = getClauseAndRemainder(pat);
  const seq = [];
  while (parts.length === 2) {
    seq.push(parts[0]);
    parts = getClauseAndRemainder(parts[1]);
  }
  seq.push(parts[0]);
  return seq;
}

/**
 * Breaks a graph pattern up into two parts - the next clause, and the remainder of the string
 * @param {string} pat - graph pattern fragment
 */
function getClauseAndRemainder(pat) {
  pat = pat.trim();
  let open = 1;
  // if there is a parentheses, we treat it as a clause and go to the end
  if (pat.charAt(0) === '(') {
    for (var i = 1; i < pat.length; i++) {
      if (pat.charAt(i) === '(') open++;
      else if (pat.charAt(i) === ')') open--;
      if (open === 0) {
        const rem = pat.substring(i + 1).trim();
        if (rem) return [pat.substring(1, i), rem];
        // eslint-disable-next-line max-len
        return getClauseAndRemainder(pat.substring(1, i)); // whole thing surrounded by parentheses, strip them out and reparse
      }
    }
    return [];
  }
  if (pat[0] === '+' || pat[0] === ',' || pat[0] === '|' || pat[0] === '*') {
    const ret = [pat[0]];
    if (pat.substring(1)) ret.push(pat.substring(1));
    return ret;
  }
  if (pat.charAt(0) === '{') {
    const ret = [pat.substring(0, pat.indexOf('}') + 1)];
    if (pat.substring(pat.indexOf('}') + 1)) ret.push(pat.substring(pat.indexOf('}') + 1));
    return ret;
  }
  for (var i = 1; i < pat.length; i++) {
    if (pat[i] === ',' || pat[i] === '|' || pat[i] === '+' || pat[i] === '{' || pat[i] === '*') return [pat.substring(0, i), pat.substring(i)];
  }
  return [pat];
}

function compilePredicate(pp, q) {
  if (pp.indexOf('<') !== -1 && pp.indexOf('>') !== -1) {
    const pred = pp.slice(1, pp.length - 1);
    // eslint-disable-next-line no-multi-assign,no-constant-condition
    const cleaned = pred === '.' ? null : q.cleanPathPredicate(pred);
    return {
      '@type': 'PathOr',
      or: [{
        '@type': 'InversePathPredicate',
        predicate: cleaned,
      },
      {
        '@type': 'PathPredicate',
        predicate: cleaned,
      }],
    };
  } if (pp.indexOf('<') !== -1) {
    const pred = pp.slice(1, pp.length);
    const cleaned = pred === '.' ? null : q.cleanPathPredicate(pred);
    return { '@type': 'InversePathPredicate', predicate: cleaned };
  } if (pp.indexOf('>') !== -1) {
    const pred = pp.slice(0, pp.length - 1);
    const cleaned = pred === '.' ? null : q.cleanPathPredicate(pred);
    return { '@type': 'PathPredicate', predicate: cleaned };
  }
  const cleaned = pp === '.' ? null : q.cleanPathPredicate(pp);
  return { '@type': 'PathPredicate', predicate: cleaned };
}

/**
 * Turns a sequence of tokens into the appropriate JSON-LD
 * @param {Array} seq
 * @param {*} q
 */
function tokensToJSON(seq, q) {
  if (seq.length === 1) {
    // may need to be further tokenized
    const ntoks = tokenize(seq[0]);
    if (ntoks.length === 1) {
      // only a single element in clause - cannot be further tokenised
      const tok = ntoks[0].trim();
      return compilePredicate(tok, q);
    }
    return tokensToJSON(ntoks, q);
  } if (seq.indexOf('|') !== -1) {
    // binds most loosely
    const left = seq.slice(0, seq.indexOf('|'));
    const right = seq.slice(seq.indexOf('|') + 1);
    return {
      '@type': 'PathOr',
      or: [tokensToJSON(left, q), tokensToJSON(right, q)],
    };
  } if (seq.indexOf(',') !== -1) {
    // binds tighter
    const first = seq.slice(0, seq.indexOf(','));
    const second = seq.slice(seq.indexOf(',') + 1);
    return {
      '@type': 'PathSequence',
      sequence: [tokensToJSON(first, q), tokensToJSON(second, q)],
    };
  } if (seq[1] === '+') {
    // binds tightest of all
    return {
      '@type': 'PathPlus',
      plus: tokensToJSON([seq[0]], q),
    };
  } if (seq[1] === '*') {
    // binds tightest of all
    return {
      '@type': 'PathStar',
      star: tokensToJSON([seq[0]], q),
    };
  } if (seq[1].charAt(0) === '{') {
    // binds tightest of all
    // we need a test here
    const meat = seq[1].substring(1, seq[1].length - 1).split(',');
    return {
      '@type': 'PathTimes',
      from: meat[0],
      to: meat[1],
      times: tokensToJSON([seq[0]], q),
    };
  }
  // shouldn't get here - error
  q.parameterError(`Pattern error - could not be parsed ${seq[0]}`);
  return {
    '@type': 'PathPredicate',
    'rdfs:label': `failed to parse query ${seq[0]}`,
  };
}

/**
 * Creates a copy of the passed json representation of a woql query
 * Performing tidying up in doing so - strips out empty queries, rolls up
 * ands and ors with single entries
 *
 * @param {object} orig
 * @returns {object} copy of the passed json object
 */
function copyJSON(orig, rollup) {
  if (Array.isArray(orig)) return orig;
  if (rollup) {
    if (orig['@type'] === 'And') {
      if (!orig.and || !orig.and.length) return {};
      if (orig.and.length === 1) return copyJSON(orig.and[0], rollup);
    } else if (orig['@type'] === 'Or') {
      if (!orig.or || !orig.or.length) return {};
      if (orig.or.length === 1) return copyJSON(orig.or[0], rollup);
    }

    if (typeof orig.query !== 'undefined' && orig['@type'] !== 'Comment') {
      if (!orig.query['@type']) return {};
    } else if (orig['@type'] === 'Comment' && orig.comment) {
      if (!orig.query || !orig.query['@type']) return { '@type': 'Comment', comment: orig.comment };
    }
    if (typeof orig.consequent !== 'undefined') {
      if (!orig.consequent['@type']) return {};
    }
  }
  const nuj = {};
  for (const k in orig) {
    const part = orig[k];
    if (Array.isArray(part)) {
      const nupart = [];
      for (let j = 0; j < part.length; j++) {
        if (typeof part[j] === 'object') {
          const sub = copyJSON(part[j], rollup);
          if (!sub || !UTILS.empty(sub)) nupart.push(sub);
        } else {
          nupart.push(part[j]);
        }
      }
      nuj[k] = nupart;
    } else if (part === null) {
      // do nothing
    } else if (typeof part === 'object') {
      const q = copyJSON(part, rollup);
      if (!q || !UTILS.empty(q)) nuj[k] = q;
    } else {
      nuj[k] = part;
    }
  }
  return nuj;
}

module.exports = WOQLQuery;


/***/ }),

/***/ 7205:
/***/ ((module) => {

// eslint-disable-next-line consistent-return
function convert(obj) {
  if (obj == null) {
    return null;
  } if (typeof (obj) === 'number') {
    return {
      '@type': 'Value',
      data: {
        '@type': 'xsd:decimal',
        '@value': obj,
      },
    };
  } if (typeof (obj) === 'boolean') {
    return {
      '@type': 'Value',
      data: {
        '@type': 'xsd:boolean',
        '@value': obj,
      },
    };
  } if (typeof (obj) === 'string') {
    if (obj.indexOf('v:') === -1) {
      return {
        '@type': 'Value',
        data: {
          '@type': 'xsd:string',
          '@value': obj,
        },
      };
    }

    return {
      '@type': 'Value',
      variable: obj.split(':')[1],
    };

  // eslint-disable-next-line no-use-before-define
  } if (obj instanceof Var) {
    return {
      '@type': 'Value',
      variable: obj.name,
    };
  } if (typeof (obj) === 'object' && !Array.isArray(obj)) {
    const pairs = [];
    // eslint-disable-next-line no-restricted-syntax
    for (const [key, value] of Object.entries(obj)) {
      pairs.push({
        '@type': 'FieldValuePair',
        field: key,
        value: convert(value),
      });
    }
    return {
      '@type': 'Value',
      dictionary: {
        '@type': 'DictionaryTemplate',
        data: pairs,
      },
    };
  } if (typeof (obj) === 'object' && Array.isArray(obj)) {
    const list = obj.map(convert);
    return {
      '@type': 'Value',
      list,
    };
  }
}

/**
 * @param {string} name
 * @returns
 */
function Var(name) {
  this.name = name;
  this.json = function () {
    return {
      '@type': 'Value',
      variable: this.name,
    };
  };
}

/**
 * @param {object} name
 * @returns {object}
 */
function Doc(obj) {
  this.doc = obj;
  this.encoded = convert(obj);
  return this.encoded;
}

/**
* @param  {...string} varNames
* @returns {object<Var>}
*/
function Vars(...args) {
  const varObj = {};
  for (let i = 0, j = arguments.length; i < j; i += 1) {
    const argumentName = args[i];

    // this[argumentName] = new Var(argumentName);
    varObj[argumentName] = new Var(argumentName);
  }
  return varObj;
}

module.exports = { Vars, Var, Doc };


/***/ }),

/***/ 6435:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/// /@ts-check
// we can not import woqlBuilder because woqlBuilder import WOQLLibrary
const WOQLQuery = __nccwpck_require__(9269);

/**
 * @license Apache Version 2
 * @module WOQLLibrary
 * @constructor WOQLLibrary
 * @description Library Functions to manage the commits graph
 * @example
 *  const woqlLib = WOQLLibrary()
 *  woqlLib.branches()
 *
 *  //or you can call this functions using WOQL Class
 *  WOQL.lib().branches()
 * */
class WOQLLibrary {
  default_schema_resource = 'schema/main';

  default_commit_resource = '_commits';

  default_meta_resource = '_meta';

  masterdb_resource = '_system';

  empty = '';
}

/**
 * General Pattern 4: Retrieves Branches, Their ID, Head Commit ID, Head Commit Time
 * (if present, new branches have no commits)
 */
WOQLLibrary.prototype.branches = function () { // values, variables, cresource) {
  const woql = new WOQLQuery().using('_commits').triple('v:Branch', 'rdf:type', '@schema:Branch')
    .triple('v:Branch', '@schema:name', 'v:Name')
    .opt()
    .triple('v:Branch', '@schema:head', 'v:Head')
    .triple('v:Head', '@schema:identifier', 'v:commit_identifier')
    .triple('v:Head', '@schema:timestamp', 'v:Timestamp');
  return woql;
};

/**
 * get all the commits of a specific branch
 * if a timestamp is given, gets all the commits before the specified timestamp
 * @param {string} [branch] - the branch name
 * @param {number} [limit] - the max number of result
 * @param {number} [start] - the start of the pagination
 * @param {number} [timestamp] - Unix timestamp in seconds
 */

WOQLLibrary.prototype.commits = function (branch = 'main', limit = 0, start = 0, timestamp = 0) {
  const woql = new WOQLQuery().using('_commits');
  if (limit) woql.limit(limit);
  if (start) woql.start(start);
  woql.select('v:Parent ID', 'v:Commit ID', 'v:Time', 'v:Author', 'v:Branch ID', 'v:Message');

  const andArr = [new WOQLQuery().triple('v:Branch', 'name', new WOQLQuery().string(branch))
    .triple('v:Branch', 'head', 'v:Active Commit ID')
    .path('v:Active Commit ID', 'parent*', 'v:Parent', 'v:Path')
    .triple('v:Parent', 'timestamp', 'v:Time')];
  if (timestamp) {
    andArr.push(new WOQLQuery().less('v:Time', timestamp));
  }
  andArr.push(new WOQLQuery().triple('v:Parent', 'identifier', 'v:Commit ID')
    .triple('v:Parent', 'author', 'v:Author')
    .triple('v:Parent', 'message', 'v:Message')
    .opt()
    .triple('v:Parent', 'parent', 'v:Parent ID'));
  return woql.and(...andArr);
};

/**
*get commits older than the specified commit id
* @param {string} [commit_id] - the commit id
* @param {number} [limit] - the max number of result
*/
// eslint-disable-next-line camelcase
WOQLLibrary.prototype.previousCommits = function (commit_id, limit = 10) {
  return new WOQLQuery().using('_commits').limit(limit).select('v:Parent ID', 'v:Message', 'v:Commit ID', 'v:Time', 'v:Author')
    .and(
      new WOQLQuery().and(
        new WOQLQuery().triple('v:Active Commit ID', '@schema:identifier', new WOQLQuery().string(commit_id)),
        new WOQLQuery().path('v:Active Commit ID', '@schema:parent+', 'v:Parent', 'v:Path'),
        new WOQLQuery().triple('v:Parent', '@schema:identifier', 'v:Commit ID'),
        new WOQLQuery().triple('v:Parent', '@schema:timestamp', 'v:Time'),
        new WOQLQuery().triple('v:Parent', '@schema:author', 'v:Author'),
        new WOQLQuery().triple('v:Parent', '@schema:message', 'v:Message'),
        new WOQLQuery().triple('v:Parent', '@schema:parent', 'v:Parent ID'),
        new WOQLQuery().opt().triple('v:Parent', 'parent', 'v:Parent ID'),
      ),
    );
};

/**
 * Finds the id of the very first commit in a database's history
 *
 * This is useful for finding information about when, by who and why the database was created
 * The first commit is the only commit in the database that does not have a parent commit
 *
 */
WOQLLibrary.prototype.first_commit = function () {
  const noparent = new WOQLQuery()
    .using('_commits').select('v:Any Commit IRI')
    .and(
      new WOQLQuery().triple('v:Branch', 'name', new WOQLQuery().string('main'))
        .triple('v:Branch', 'head', 'v:Active Commit ID')
        .path('v:Active Commit ID', 'parent*', 'v:Any Commit IRI', 'v:Path'),

      new WOQLQuery().triple(
        'v:Any Commit IRI',
        '@schema:identifier',
        'v:Commit ID',
      ),
      new WOQLQuery().triple(
        'v:Any Commit IRI',
        '@schema:author',
        'v:Author',
      ),
      new WOQLQuery().triple(
        'v:Any Commit IRI',
        '@schema:message',
        'v:Message',
      ),
      new WOQLQuery()
        .not()
        .triple(
          'v:Any Commit IRI',
          '@schema:parent',
          'v:Parent IRI',
        ),

    );
  return noparent;
};

module.exports = WOQLLibrary;


/***/ }),

/***/ 1116:
/***/ ((module) => {

/* eslint-disable no-fallthrough */
/* eslint-disable no-const-assign */
/* eslint-disable block-scoped-var */
/* eslint-disable no-case-declarations */
/* eslint-disable no-var */
/* eslint-disable no-redeclare */
/* eslint-disable vars-on-top */
/* eslint-disable no-restricted-syntax */
/* eslint-disable no-unused-expressions */
/* eslint-disable no-unused-vars */
/* eslint-disable no-plusplus */
/* eslint-disable camelcase */
/* eslint-disable no-use-before-define */
/* eslint-disable prefer-destructuring */
/* eslint-disable no-console */
/* eslint-disable no-param-reassign */
/**
 * Class responsible for converting a JSON WOQL into a WOQL.js / WOQL.py string
 */

function WOQLPrinter(vocab, language) {
  this.vocab = vocab;
  this.language = language;
  this.indent_spaces = 4;
  this.boxed_predicates = [
    'variable',
    'array_element',
    'node',
    // 'woql:arithmetic_value',
    // 'woql:variable_name',
  ];
  this.subject_cleaned_predicates = ['subject', 'element'];
  this.schema_cleaned_predicates = [
    'predicate',
    'uri',
    'of_type',
  ];
  this.list_operators = ['ValueList', 'Array', 'NamedAsVar', 'IndexedAsVar', 'AsVar'];
  this.query_list_operators = ['And', 'Or'];
  this.operator_maps = {
    IDGenerator: 'idgen',
    IsA: 'isa',
    PostResource: 'post',
    QueryResource: 'remote',
    AsVars: 'as',
    NamedAsVars: 'as',
    IndexedAsVars: 'as',
    DeletedTriple: 'removed_triple',
  };
  this.shortcuts = {
    optional: 'opt',
    substring: 'substr',
    regexp: 're',
    subsumption: 'sub',
    equals: 'eq',
    concatenate: 'concat',
  };
  this.pythonic = {
    and: 'woql_and',
    or: 'woql_or',
    as: 'woql_as',
    with: 'woql_with',
    from: 'woql_from',
    not: 'woql_not',
  };
  this.show_context = false;
}
// WOQL.triple(WOQL.node_value("Subject"), WOQL.node_value("Predicate"), WOQL.value("Object"))
WOQLPrinter.prototype.printJSON = function (json, level, fluent, newline) {
  level = level || 0;
  fluent = fluent || false;
  let str = '';
  if (!json['@type']) {
    console.log('Bad structure passed to print json, no type: ', json);
    return '';
  }

  // check for language
  if (['Value', 'NodeValue', 'DataValue', 'ArithmeticValue', 'OrderTemplate'].indexOf(json['@type']) > -1) {
    return this.pvar(json);
  }

  let operator = json['@type'];
  if (typeof json['@type'] === 'string' && operator.indexOf(':') > -1) {
    operator = json['@type'].split(':')[1];
  }

  if (operator === 'QueryResource') {
    return this.getQueryResourceStr(json, level, fluent, newline);
  }

  if (operator) {
    const ujson = this.unboxJSON(operator, json);
    if (ujson) {
      const meat = this.printArgument(
        operator,
        this.getBoxedPredicate(operator, json),
        ujson,
        level,
        fluent,
      );
      if (this.isListOperator(operator)) return `[${meat}]`;
      return meat;
    }
    if (this.isListOperator(operator)) {
      str += '[';
    } else {
      // get the function name from the @type field
      const call = this.getFunctionForOperator(operator, json);
      const indent = newline ? level * this.indent_spaces : 0;
      str += `${this.getWOQLPrelude(call, fluent, indent)}(`;
    }
    // below needs to be changed to have a specific ordering
    // get the list of the keys without the @type
    const args = this.getArgumentOrder(operator, json);
    // I have to review this
    const divlimit = args.indexOf('query') === -1 ? args.length - 1 : args.length - 2;
    // query argument when I have a subquery
    args.forEach((item, i) => { // && operator !== 'When'
      let nfluent = !!((item === 'query' && operator !== 'Put') || item === 'consequent'
                || item === 'resource');
      // to be review
      if (item === 'resource' && typeof json[item] === 'string') nfluent = false;
      str += this.printArgument(operator, item, json[item], level, nfluent);
      // something to review ??
      if (i < divlimit && operator !== 'Get') str += ', ';
    });
    if (this.isListOperator(operator)) str += ']';
    else {
      if (this.argumentTakesNewline(operator)) str += `\n${nspaces(level * this.indent_spaces)}`;
      if (!fluent) str += ')';
    }
  } else {
    console.log('wrong structure passed to print json ', json);
  }
  return str;
};
// file or remote method
WOQLPrinter.prototype.getQueryResourceStr = function (json, level, fluent, newline) {
  if (!json.source) {
    console.log('wrong structure passed to print json ', json);
    return '';
  }
  const functName = json.source.url ? 'remote' : 'file';
  const indent = newline ? level * this.indent_spaces : 0;
  let str = `${this.getWOQLPrelude(functName, fluent, indent)}(`;
  const source = json.source.file ? `"${json.source.file}"` : `"${json.source.url}"`;
  const format = json.format === 'csv' ? '' : json.format;
  str += source;
  if (format)str += `, ${format}`;
  return str;
};
// remove the @type from the keys
WOQLPrinter.prototype.getArgumentOrder = function (operator, json) {
  const args = Object.keys(json);
  args.splice(args.indexOf('@type'), 1);
  return args;
};

WOQLPrinter.prototype.argumentTakesNewline = function (operator) {
  return this.isQueryListOperator(operator);
};

WOQLPrinter.prototype.argumentRequiresArray = function (predicate, entries) {
  if ((predicate === 'group_by' || predicate === 'list') && entries.length > 1) return true;
  return false;
};
// this is the list of the argument not @type
WOQLPrinter.prototype.printArgument = function (operator, predicate, arg, level, fluent) {
  let str = '';
  if (fluent) str += ')';
  const newline = this.argumentTakesNewline(operator);
  if (newline) str += `\n${nspaces((level + 1) * this.indent_spaces)}`;
  if (arg['@type'] === 'True') return 'true';

  if (predicate === 'document') return this.decompileDocument(arg);
  if (predicate === 'variables') return this.decompileVariables(arg);
  if (predicate === 'group_by' || predicate === 'template') return this.decompileVariables(arg, true);

  // list of .as in get or put function
  if (predicate === 'columns') return this.decompileAsVars(arg, level + 1);

  if (predicate === 'pattern') return this.decompileRegexPattern(arg, level + 1);
  if (Array.isArray(arg)) {
    const arr_entries = [];
    for (let j = 0; j < arg.length; j++) {
      const nlevel = newline ? level + 1 : level;
      arr_entries.push(this.printJSON(arg[j], nlevel, fluent, newline));
    }
    const jstr = newline ? `,\n${nspaces(++level * this.indent_spaces)}` : ',';
    if (this.argumentRequiresArray(predicate, arr_entries)) {
      str += `[${arr_entries.join(jstr)}]`;
    } else str += arr_entries.join(jstr);
  } else if (typeof arg === 'object') {
    const reet = this.printJSON(arg, level, fluent);
    // if(newline) str += "\n" + nspaces(level*this.indent_spaces)

    str += reet;
  } else if (typeof arg === 'string') {
    str += this.uncleanArgument(arg, operator, predicate);
  } else if (typeof arg === 'number') return arg;
  return str;
};

// to be review if array
WOQLPrinter.prototype.decompileDocument = function (args) {
  const jsonDoc = {};
  this.decompileDictionary(jsonDoc, args);
  return `WOQL.doc(${JSON.stringify(jsonDoc)})`;
};

WOQLPrinter.prototype.decompileDictionary = function (jsonDoc, args) {
  if (args.dictionary && args.dictionary.data && Array.isArray(args.dictionary.data)) {
    args.dictionary.data.forEach((item) => {
      this.decompileFieldValuePair(jsonDoc, item);
    });
  }
};

WOQLPrinter.prototype.decompileFieldValuePair = function (jsonDoc, fieldValue) {
  const type = fieldValue.field || '';
  // eslint-disable-next-line max-len
  let value = false;
  if (fieldValue.value && fieldValue.value) {
    if (fieldValue.value.data) {
      value = fieldValue.value.data['@value'];
    } else if (fieldValue.value.dictionary && Array.isArray(fieldValue.value.dictionary.data)) {
      const valueDoc = {};
      this.decompileDictionary(valueDoc, fieldValue.value);
      value = valueDoc;
    }
  }
  jsonDoc[type] = value;
};

WOQLPrinter.prototype.decompileVariables = function (args, checkIsArray = false) {
  if (Array.isArray(args)) {
    let str = '';
    args.forEach((varName, index) => {
      str += `"v:${varName}"`;
      if (index < args.length - 1)str += ', ';
    });
    if (checkIsArray && args.length > 1)str = `[${str}]`;
    return str;
  }
  return '';
};
// woql:datatype in path
WOQLPrinter.prototype.decompileRegexPattern = function (json) {
  if (typeof json === 'object' && json['@type'] === 'DataValue') {
    return this.pvar(json);
  } if ((json['@type']).startsWith('Path')) {
    return `"${this.decompilePathPattern(json)}"`;
  }
  const str = json;
  return `"${str.replace('\\', '\\\\')}"`;
};

WOQLPrinter.prototype.pvar = function (json) {
  // if (json['woql:variable_name'] && typeof json['woql:variable_name']['@value'] != 'undefined') {
  if (json.variable) {
    let varname = json.variable;
    const order = json.order ? json.order : '';
    if (varname.indexOf(':') === -1) {
      varname = `v:${varname}`;
    }
    return (order !== '' && order !== 'asc') ? `["${varname}","${order}"]` : `"${varname}"`;
  } if (json.node) {
    return `"${json.node}"`;
  } if (json.data) {
    return JSON.stringify(json.data);
  } if (json.list) {
    const listArr = json.list;
    if (Array.isArray(listArr)) {
      const listTmp = [];
      listArr.forEach((listItem, index) => {
        listTmp.push(this.pvar(listItem));
      });
      return `[${listTmp.join(', ')}]`;
    }
    return this.pvar(json.list);
  }
  // we have list to
  return false;
};

/**
 * Gets the starting characters for a WOQL query - varies depending on how the query
 * is invoked and how indented it is
 */
WOQLPrinter.prototype.getWOQLPrelude = function (operator, fluent, inline) {
  if (operator === 'true' || operator === 'false') {
    if (this.language === 'python') {
      return operator.charAt(0).toUpperCase() + operator.slice(1);
    }
    return operator;
  }
  let prelude = 'WOQL.';
  if (this.language === 'python') {
    this.pythonic[operator] && (operator = this.pythonic[operator]);
    prelude = 'WOQLQuery().';
  }
  if (fluent) {
    return `.${operator}`;
  }
  return (inline ? `\n${nspaces(inline)}` : '') + prelude + operator;
};

WOQLPrinter.prototype.uncleanArgument = function (arg, operator, predicate) {
  if (arg.indexOf(':') !== -1) {
    // is it a short cut?
    for (const s in this.vocab) {
      if (this.vocab[s] === arg) return `"${s}"`;
    }
    // is there a default reverse mapping
    /* if (this.subject_cleaned_predicates.indexOf(predicate) != -1) {
            if (arg.substring(0, 4) === 'doc:') arg = arg.substring(4)
        }
        if (this.schema_cleaned_predicates.indexOf(predicate) != -1) {
            if (arg.substring(0, 4) === 'scm:') arg = arg.substring(4)
        } */
  }
  return `"${arg}"`;
};

WOQLPrinter.prototype.isListOperator = function (operator) {
  return this.list_operators.indexOf(operator) !== -1;
};

WOQLPrinter.prototype.isQueryListOperator = function (operator) {
  return this.query_list_operators.indexOf(operator) !== -1;
};

/*
* transform the operator in the function name
* like "@type": "Triple" => WOQL.triple
*/
WOQLPrinter.prototype.getFunctionForOperator = function (operator, json) {
  if (this.operator_maps[operator]) return this.operator_maps[operator];

  // triple with the graph parameter is the old quad
  if (operator === 'Triple' && json.graph) return 'quad';
  const f = camelToSnake(operator);
  if (this.shortcuts[f]) return this.shortcuts[f];
  return f;
};

WOQLPrinter.prototype.getBoxedPredicate = function (operator, json) {
  for (let i = 0; i < this.boxed_predicates.length; i++) {
    if (json[this.boxed_predicates[i]]) {
      return this.boxed_predicates[i];
    }
  }
  if (operator === 'QueryListElement') {
    return 'woql:query';
  }
  return false;
};

WOQLPrinter.prototype.unboxJSON = function (operator, json) {
  const bp = this.getBoxedPredicate(operator, json);
  if (bp) {
    return json[bp];
  }
  return false;
};

// WOQL.as
WOQLPrinter.prototype.decompileAsVars = function (asvs, level) {
  let str = '';
  if (!Array.isArray(asvs)) return '';
  asvs.forEach((wasv, i) => {
    str += `\n${nspaces(level * this.indent_spaces)}${i === 0 ? 'WOQL' : ''}`;
    // old 'woql:NamedAsVar'
    if (wasv['@type'] === 'Column' && wasv.indicator) {
      const source = wasv.indicator.name || wasv.indicator.index;
      const target = `v:${wasv.variable}`;
      const { type } = wasv.indicator;
      str += `.as("${source}", "${target}"`;
      if (type) str += `, "${type}")`;
      else str += ')';
    }
  });
  return str;
};

WOQLPrinter.prototype.decompilePathPattern = function (pstruct) {
  const t = pstruct['@type'];
  // eslint-disable-next-line default-case
  switch (t) {
    case 'InversePathPredicate':
      return pstruct.predicate ? `<${pstruct.predicate}` : '<.';
    case 'PathPredicate':
      return pstruct.predicate ? `${pstruct.predicate}` : '.';
    case 'PathPlus':
      var next = pstruct.plus;
      if (Array.isArray(next)) next = next[0];
      if (needsParentheses(next)) return `(${this.decompilePathPattern(next)})+`;
      return `${this.decompilePathPattern(next)}+`;
    case 'PathStar':
      var next = pstruct.star;
      if (Array.isArray(next)) next = next[0];
      if (needsParentheses(next)) return `(${this.decompilePathPattern(next)})*`;
      return `${this.decompilePathPattern(next)}*`;
    case 'PathTimes':
      var next = pstruct.times;
      var astr = ` {${
        pstruct.from
      },${
        pstruct.to
      }}`;
      if (Array.isArray(next)) next = next[0];
      if (needsParentheses(next)) return `(${this.decompilePathPattern(next)})${astr}`;
      return this.decompilePathPattern(next) + astr;
    case 'PathSequence':
      const sequenceArr = pstruct.sequence;
      if (Array.isArray(sequenceArr) && sequenceArr.length === 2) {
        let next1 = sequenceArr[0];// pstruct['woql:path_first']
        const next2 = sequenceArr[1];// pstruct['woql:path_second']

        if (Array.isArray(next1)) next1 = next1[0];
        var seqstr = '';
        if (needsParentheses(next1)) seqstr += '(';
        seqstr += this.decompilePathPattern(next1);
        if (needsParentheses(next1)) seqstr += ')';
        seqstr += ',';
        if (needsParentheses(next2)) seqstr += '(';
        seqstr += this.decompilePathPattern(next2);
        if (next1['@type'] === 'InversePathPredicate') {
          seqstr += '>';
        }
        if (needsParentheses(next2)) seqstr += ')';
        return seqstr;
      }
      // there is a problem in remap
    case 'PathOr':
      const orArr = pstruct.or;
      if (Array.isArray(orArr) && orArr.length === 2) {
        let next1 = orArr[0]; // pstruct['woql:path_left']
        const next2 = orArr[1]; // pstruct['woql:path_right']
        if (Array.isArray(next1)) next1 = next1[0];
        var seqstr = '';
        if (needsParentheses(next1)) seqstr += '(';
        seqstr += this.decompilePathPattern(next1);
        if (needsParentheses(next1)) seqstr += ')';
        seqstr += '|';
        if (needsParentheses(next2)) seqstr += '(';
        seqstr += this.decompilePathPattern(next2);
        if (needsParentheses(next2)) seqstr += ')';
        return seqstr;
      }
  }
  return 'error';
};

function needsParentheses(obj) {
  const noparens = ['PathPredicate', 'PathPlus', 'PathTimes', 'InversePathPredicate'];
  if (noparens.indexOf(obj['@type']) !== -1) return false;
  return true;
}

function camelToSnake(string) {
  return string
    .replace(/[\w]([A-Z])/g, (m) => `${m[0]}_${m[1]}`)
    .toLowerCase();
}

function nspaces(n) {
  let spaces = '';
  for (let i = 0; i < n; i++) {
    spaces += ' ';
  }
  return spaces;
}

module.exports = WOQLPrinter;


/***/ }),

/***/ 2399:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* eslint-disable class-methods-use-this */
/* eslint-disable no-redeclare */
/* eslint-disable block-scoped-var */
/* eslint-disable no-var */
/* eslint-disable vars-on-top */
/* eslint-disable no-param-reassign */
/* eslint-disable no-unused-vars */
/* eslint-disable camelcase */
/* eslint-disable no-plusplus */
/* eslint-disable prefer-destructuring */
/* eslint-disable guard-for-in */
/* eslint-disable no-restricted-syntax */

/// /@ts-check
// WOQLQuery
/**
 * defines the internal functions of the woql query object - the
 * language API is defined in WOQLQuery
 * @module WOQLQuery
 * @constructor
 * @param {object} [query] json-ld query for initialisation
 * @returns {WOQLQuery}
 */

const WOQLCore = __nccwpck_require__(3552);
const { Var, Vars, Doc } = __nccwpck_require__(7205);
// eslint-disable-next-line no-unused-vars
const typedef = __nccwpck_require__(1072);

// I HAVE TO REVIEW THE Inheritance and the prototype chain
class WOQLQuery extends WOQLCore {
/**
 * defines the internal functions of the woql query object - the
 * language API is defined in WOQLQuery
 * @module WOQLQuery
 * @constructor
 * @param {object} [query] json-ld query for initialisation
 * @returns {WOQLQuery}
 */

  /**
 * Update a pattern matching rule for the triple (Subject, Predicate, oldObjValue) with the
 * new one (Subject, Predicate, newObjValue)
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string|Var} newObjValue - The value to update or a literal
 * @param {string|Var} oldObjValue - The old value of the object
 * @returns {WOQLQuery} A WOQLQuery which contains the a Update Triple Statement
 */
  update_triple(subject, predicate, newObjValue, oldObjValue) { return this; }

  /**
 * Generates a query that by default matches all triples in a graph identified by "graph"
 * or in all the current terminusDB's graph
 * @param {string | boolean} [graph] - false or the resource identifier of a graph possible
 * value are schema/{main - myschema - *} | instance/{main - myschema - *}  |
 * inference/{main - myschema - *}
 * @param {string|Var} [subject] - The IRI of a triple’s subject or a variable,
 * default value "v:Subject"
 * @param {string|Var} [predicate] - The IRI of a property or a variable,
 *  default value "v:Predicate"
 * @param {string|Var} [object] - The IRI of a node or a variable, or a literal,
 * default value "v:Object"
 * @returns {WOQLQuery} A WOQLQuery which contains the pattern matching expression
 */
  star(graph, subject, predicate, object) { return this; }

  /**
  * Update a pattern matching rule for the quad [S, P, O, G] (Subject, Predicate, Object, Graph)
  * @param {string|Var} subject - The IRI of a triple’s subject or a variable
  * @param {string|Var} predicate - The IRI of a property or a variable
  * @param {string|Var} newObject - The value to update or a literal
  * @param {typedef.GraphRef} graphRef - A valid graph resource identifier string
  * @returns {WOQLQuery} A WOQLQuery which contains the a Update Quad Statement
  */
  update_quad(subject, predicate, newObject, graphRef) { return this; }

  /**
   * @param {string|Var} id - IRI string or variable containing
   * @param {string|Var} type  -  IRI string or variable containing the IRI of the
   * @param {typedef.GraphRef} [refGraph] - Optional Graph resource identifier
   * @returns {WOQLQuery} A WOQLQuery which contains the insert expression
   */
  insert(id, type, refGraph) { return this; }

  /**
  * Sets the graph resource ID that will be used for subsequent chained function calls
  * @param {typedef.GraphRef} [graphRef] Resource String identifying the graph which will
  * be used for subsequent chained schema calls
  * @returns {WOQLQuery} A WOQLQuery which contains the partial Graph pattern matching expression
  * @example
  */
  graph(graphRef) { return this; }

  /**
   * Specifies the identity of a node that can then be used in subsequent builder functions.
   * Note that node() requires subsequent chained functions to complete the triples / quads
   * that it produces - by itself it only generates the subject.
   * @param {string|Var} nodeid -  The IRI of a node or a variable containing an IRI which will
   * be the subject of the builder functions
   * @param {typedef.FuntionType} [chainType] - Optional type of builder function to build
   * (default is triple)
   * @returns {WOQLQuery} - A WOQLQuery which contains the partial Node pattern matching expression
   */
  node(nodeid, chainType) { return this; }

  /**
   * Deletes all triples in the passed graph (defaults to instance/main)
   * @param {typedef.GraphRef} [graphRef] - Resource String identifying the graph from
   * which all triples will be removed
   * @returns {WOQLQuery} - A WOQLQuery which contains the deletion expression
   * @example
   * nuke("schema/main")
   * //will delete everything from the schema/main graph
   */
  nuke(graphRef) { return this; }

  /**
   * @param {string|Var} [Subj] - The IRI of a triple’s subject or a variable
   * @param {string|Var} [Pred] - The IRI of a property or a variable
   * @param {string|Var} [Obj] - The IRI of a node or a variable, or a literal
   * @param {typedef.GraphRef} [Graph] - the resource identifier of a graph possible
   * @returns {WOQLQuery} - A WOQLQuery which contains the pattern matching expression
   */
  all(Subj, Pred, Obj, Graph) { return this; }

  /**
   * @param {boolean} tf
   * @returns {object}
   * @example
   */
  boolean(tf) { return {}; }

  /**
   * @param {string} s
   * @returns {object}
   * @example
   */
  string(s) { return {}; }

  /**
 * @param {any} s
 * @param {string} t
 * @returns {object}
 * @example
 */
  literal(s, t) { return {}; }

  /**
  * @param {string} s
  * @returns {object}
  * @example
  */

  iri(s) { return {}; }

  // eslint-disable-next-line no-underscore-dangle
  _set_context(ctxt) { return this; }

  /**
   * @param {WOQLQuery} Subq
   * @returns {WOQLQuery}
   */
  addSubQuery(Subq) {
    super.addSubQuery(Subq);
    return this;
  }

  /**
   * @param {string} msg
   * @returns {WOQLQuery}
   */
  parameterError(msg) {
    super.parameterError(msg);
    return this;
  }

  /**
   * @returns {WOQLQuery}
   */
  updated() {
    super.updated();
    return this;
  }

  // eslint-disable-next-line no-useless-constructor
  constructor(query) {
    super(query);
  }
}

/**
 * Read a node identified by an IRI as a JSON-LD document
 * @param {string} IRI -  The document id  or a variable to read
 * @param {string} output - Variable which will be bound to the document.
 * @return {WOQLQuery} WOQLQuery
 */
WOQLQuery.prototype.read_document = function (IRI, output) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'ReadDocument';
  this.cursor.identifier = this.cleanNodeValue(IRI);
  this.cursor.document = this.expandValueVariable(output);
  return this;
};

/**
 * Insert a document in the graph.
 * @param {object} docjson -  The document to insert. Must either have an '@id' or
 * have a class specified key.
 * @param {string} [IRI] - An optional identifier specifying the document location.
 * @return {WOQLQuery} WOQLQuery
 */

WOQLQuery.prototype.insert_document = function (docjson, IRI) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'InsertDocument';
  if (typeof IRI !== 'undefined') this.cursor.identifier = this.cleanNodeValue(IRI);

  this.cursor.document = this.cleanObject(docjson);

  return this.updated();
};

/**
 * Update a document identified by an IRI
 * @param {object} docjson -  The document to update. Must either have an '@id' or
 * have a class specified key.
 * @param {string} [IRI] - An optional identifier specifying the document location.
 * @return {WOQLQuery} WOQLQuery
 */

WOQLQuery.prototype.update_document = function (docjson, IRI) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'UpdateDocument';
  if (typeof IRI !== 'undefined') this.cursor.identifier = this.cleanNodeValue(IRI);

  this.cursor.document = this.cleanObject(docjson);

  return this.updated();
};

/**
 * Delete a document from the graph.
 * @param {string} IRI -  The document id  or a variable
 * @return {WOQLQuery} WOQLQuery
 */

WOQLQuery.prototype.delete_document = function (IRI) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'DeleteDocument';
  this.cursor.identifier = this.cleanNodeValue(IRI);
  return this.updated();
};

/**
 * Contains definitions of the WOQL functions which map directly to JSON-LD types
 * All other calls and queries can be composed from these
 */

// moved from woqlCore
WOQLQuery.prototype.wrapCursorWithAnd = function () {
  if (this.cursor && this.cursor['@type'] === 'And') {
    const newby = this.cursor.and.length;
    this.and({});
    this.cursor = this.cursor.and[newby];
  } else {
    const nj = new WOQLQuery().json(this.cursor);
    for (const k in this.cursor) delete this.cursor[k];
    // create an empty json for the new query
    this.and(nj, {});
    this.cursor = this.cursor.and[1];
  }
};

/**
 * Query running against any specific commit Id
 * @param {string}  refPath  - path to specific reference Id or commit Id
 * @param {WOQLQuery} [subquery] - subquery for the specific commit point
 * @returns {WOQLQuery}
 */

WOQLQuery.prototype.using = function (refPath, subquery) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Using';
  if (!refPath || typeof refPath !== 'string') {
    return this.parameterError('The first parameter to using must be a Collection ID (string)');
  }
  this.cursor.collection = refPath;
  return this.addSubQuery(subquery);
};

/**
 * Adds a text comment to a query - can also be used to wrap any part of a query to turn it off
 * @param {string} comment - text comment
 * @param {WOQLQuery} [subquery]  - query that is "commented out"
 * @returns {WOQLQuery}
 */

WOQLQuery.prototype.comment = function (comment, subquery) {
  // if (comment && comment === 'args')
  // return ['comment', 'query']
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Comment';
  this.cursor.comment = this.jlt(comment);
  return this.addSubQuery(subquery);
};

/**
 * Filters the query so that only the variables included in [V1...Vn] are returned in the bindings
 * @param {...string|...Var} varNames - only these variables are returned
 * @returns {WOQLQuery}
 */

WOQLQuery.prototype.select = function (...varNames) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Select';
  if (!varNames || varNames.length <= 0) {
    return this.parameterError('Select must be given a list of variable names');
  }
  const last = varNames[varNames.length - 1];
  /**
  *@type {any}
  */
  let embedquery = false;
  if (typeof last === 'object' && !(last instanceof Var) && last.json) {
    embedquery = varNames.pop();
  } // else var embedquery = false
  this.cursor.variables = this.rawVarList(varNames);
  return this.addSubQuery(embedquery);
};

/**
 * Filter the query to return only results that are distinct in the given variables
 * @param {...string|...Var} varNames - these variables are guaranteed to be unique as a tuple
 * @returns {WOQLQuery}
 */

WOQLQuery.prototype.distinct = function (...varNames) {
  // if (list && list[0] === 'args')
  // return ['variable_list', 'query']
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Distinct';
  if (!varNames || varNames.length <= 0) {
    return this.parameterError('Distinct must be given a list of variable names');
  }
  const last = varNames[varNames.length - 1];
  /**
     * @type {any}
     */
  let embedquery = false;
  if (typeof last === 'object' && !(last instanceof Var) && last.json) {
    embedquery = varNames.pop();
  } // else var embedquery = false
  this.cursor.variables = this.rawVarList(varNames);
  return this.addSubQuery(embedquery);
};

/**
* Logical conjunction of the contained queries - all queries must match or the entire clause fails
* @param {...WOQLQuery} subqueries - A list of one or more woql queries to execute as a conjunction
* @returns {WOQLQuery} - A WOQLQuery object containing the conjunction of queries
*/

WOQLQuery.prototype.and = function (...subqueries) {
  if (this.cursor['@type'] && this.cursor['@type'] !== 'And') {
    const nj = new WOQLQuery().json(this.cursor);
    for (const k in this.cursor) delete this.cursor[k];
    subqueries.unshift(nj);
  }
  this.cursor['@type'] = 'And';
  if (typeof this.cursor.and === 'undefined') this.cursor.and = [];
  for (let i = 0; i < subqueries.length; i++) {
    const onevar = this.jobj(subqueries[i]);
    if (
      onevar['@type'] === 'And'
            && onevar.and
    ) {
      for (let j = 0; j < onevar.and.length; j++) {
        const qjson = onevar.and[j];
        if (qjson) {
          const subvar = this.jobj(qjson);
          this.cursor.and.push(subvar);
        }
      }
    } else {
      this.cursor.and.push(onevar);
    }
  }
  return this;
};

/**
 * Creates a logical OR of the arguments
 * @param {...WOQLQuery} subqueries - A list of one or more woql queries
 * to execute as alternatives
 * @returns {WOQLQuery} - A WOQLQuery object containing the logical Or of the subqueries
 */

WOQLQuery.prototype.or = function (...subqueries) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Or';
  if (typeof this.cursor.or === 'undefined') this.cursor.or = [];
  for (let i = 0; i < subqueries.length; i++) {
    const onevar = this.jobj(subqueries[i]);
    this.cursor.or.push(onevar);
  }
  return this;
};
/**
 * Specifies the database URL that will be the default database for the enclosed query
 * @param {typedef.GraphRef} graphRef- A valid graph resource identifier string
 * @param {WOQLQuery} [query] - The query
 * @returns {WOQLQuery} A WOQLQuery object containing the from expression
 */

/**
 * Specifies the database URL that will be the default database for the enclosed query
 * @param {typedef.GraphRef} graphRef- A valid graph resource identifier string
 * @param {WOQLQuery} [query] - The query
 * @returns {WOQLQuery} A WOQLQuery object containing the from expression
 */

WOQLQuery.prototype.from = function (graphRef, query) {
  // if (graph && graph === 'args')
  // return ['graph', 'query']
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'From';
  if (!graphRef || typeof graph !== 'string') {
    return this.parameterError(
      'The first parameter to from must be a Graph Filter Expression (string)',
    );
  }
  this.cursor.graph = graphRef;
  return this.addSubQuery(query);
};

/**
 * Specifies the graph resource to write the contained query into
 * @param {typedef.GraphRef} graphRef- A valid graph resource identifier string
 * @param {WOQLQuery} [subquery] - The query which will be written into the graph
 * @returns {WOQLQuery} A WOQLQuery which will be written into the graph in question
 */

WOQLQuery.prototype.into = function (graphRef, subquery) {
  // if (graph_descriptor && graph_descriptor === 'args')
  // return ['graph', 'query']
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Into';
  if (!graphRef || typeof graphRef !== 'string') {
    return this.parameterError(
      'The first parameter to from must be a Graph Filter Expression (string)',
    );
  }
  this.cursor.graph = this.jlt(graphRef);
  return this.addSubQuery(subquery);
};

/**
 * Creates a triple pattern matching rule for the triple [S, P, O] (Subject, Predicate, Object)
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string|Var} object - The IRI of a node or a variable, or a literal
 * @returns {WOQLQuery}
 */

WOQLQuery.prototype.triple = function (subject, predicate, object) {
  // if (a && a === 'args')
  // return ['subject', 'predicate', 'object']
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Triple';
  this.cursor.subject = this.cleanSubject(subject);
  this.cursor.predicate = this.cleanPredicate(predicate);
  this.cursor.object = this.cleanObject(object);
  return this;
};

/**
 * Creates a triple pattern matching rule for the triple [S, P, O] (Subject, Predicate,
 * Object) added in the current layer
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string|Var} object - The IRI of a node or a variable, or a literal
 * @returns {WOQLQuery}
 */

WOQLQuery.prototype.added_triple = function (subject, predicate, object) {
  // if (a && a === 'args')
  // return ['subject', 'predicate', 'object']
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'AddedTriple';
  this.cursor.subject = this.cleanSubject(subject);
  this.cursor.predicate = this.cleanPredicate(predicate);
  this.cursor.object = this.cleanObject(object);
  return this;
};

/**
 * Creates a triple pattern matching rule for the triple [S, P, O] (Subject, Predicate,
 * Object) added in the current commit
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string|Var} object - The IRI of a node or a variable, or a literal
 * @returns {WOQLQuery}
 */

WOQLQuery.prototype.removed_triple = function (subject, predicate, object) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'DeletedTriple';
  this.cursor.subject = this.cleanSubject(subject);
  this.cursor.predicate = this.cleanPredicate(predicate);
  this.cursor.object = this.cleanObject(object);
  return this;
};

/**
 * Creates a pattern matching rule for triple [Subject, Predicate, Object]
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string|Var} object - The IRI of a node or a variable, or a literal
 * @returns {WOQLQuery} A WOQLQuery which contains the a quad or a triple Statement
 */

WOQLQuery.prototype.link = function (subject, predicate, object) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Triple';
  this.cursor.subject = this.cleanSubject(subject);
  this.cursor.predicate = this.cleanPredicate(predicate);
  this.cursor.object = this.cleanSubject(object);
  return this;
};

/**
 * Creates a pattern matching rule for triple [Subject, Predicate, Object]
 * add extra information about the type of the value object
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string | number | boolean | Var} objValue - an specific value
 * @returns {WOQLQuery} A WOQLQuery which contains the a quad or a triple Statement
 */

WOQLQuery.prototype.value = function (subject, predicate, objValue) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Triple';
  this.cursor.subject = this.cleanSubject(subject);
  this.cursor.predicate = this.cleanPredicate(predicate);
  this.cursor.object = this.cleanDataValue(objValue, 'xsd:string');
  return this;
};

/**
 * Creates a pattern matching rule for the quad [S, P, O, G] (Subject, Predicate, Object, Graph)
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string|Var} object - The IRI of a node or a variable, or a literal
 * @param {typedef.GraphRef} graphRef - A valid graph resource identifier string
 * @returns {WOQLQuery}
 */

WOQLQuery.prototype.quad = function (subject, predicate, object, graphRef) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  const args = this.triple(subject, predicate, object);
  // if (a && a === 'args')
  // return args.concat(['graph'])
  if (!graphRef) return this.parameterError('Quad takes four parameters, the last should be a graph filter');
  this.cursor['@type'] = 'Triple';
  this.cursor.graph = this.cleanGraph(graphRef);
  return this;
};

/**
 * Creates a pattern matching rule for the quad [S, P, O, G] (Subject, Predicate,
 * Object, Graph) removed from the current commit
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string|Var} object - The IRI of a node or a variable, or a literal
 * @param {typedef.GraphRef} graphRef- A valid graph resource identifier string
 * @returns {WOQLQuery}
 */

WOQLQuery.prototype.added_quad = function (subject, predicate, object, graphRef) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  const args = this.triple(subject, predicate, object);
  // if (a && a === 'args')
  // return args.concat(['graph'])
  if (!graphRef) return this.parameterError('Quad takes four parameters, the last should be a graph filter');
  this.cursor['@type'] = 'AddedQuad';
  this.cursor.graph = this.cleanGraph(graphRef);
  return this;
};

/**
 * Creates a pattern matching rule for the quad [S, P, O, G] (Subject, Predicate,
 * Object, Graph) removed from the current commit
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string|Var} object - The IRI of a node or a variable, or a literal
 * @param {typedef.GraphRef} graphRef- A valid graph resource identifier string
 * @returns {WOQLQuery}
 */

WOQLQuery.prototype.removed_quad = function (subject, predicate, object, graphRef) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  const args = this.triple(subject, predicate, object);
  // if (a && a === 'args')
  // return args.concat(['graph'])
  if (!graphRef) return this.parameterError('Quad takes four parameters, the last should be a graph filter');
  this.cursor['@type'] = 'RemovedQuad';
  this.cursor.graph = this.cleanGraph(graphRef);
  return this;
};

/**
 * Returns true if ClassA subsumes ClassB, according to the current DB schema
 * @param {string} classA - ClassA
 * @param {string} classB - ClassB
 * @returns {boolean} WOQLQuery
 */
WOQLQuery.prototype.sub = function (classA, classB) {
  if (!classA || !classB) return this.parameterError('Subsumption takes two parameters, both URIs');
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Subsumption';
  this.cursor.parent = this.cleanNodeValue(classA);
  this.cursor.child = this.cleanNodeValue(classB);
  return this;
};

WOQLQuery.prototype.subsumption = WOQLQuery.prototype.sub;

/**
 * Matches if a is equal to b
 * @param {string|Var} varName - literal, variable or id
 * @param {string|Var} varValue - literal, variable or id
 * @returns {WOQLQuery}
 */
WOQLQuery.prototype.eq = function (varName, varValue) {
  // if (a && a === 'args') return ['left', 'right']
  if (typeof varName === 'undefined' || typeof varValue === 'undefined') return this.parameterError('Equals takes two parameters');
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Equals';
  this.cursor.left = this.cleanObject(varName);
  this.cursor.right = this.cleanObject(varValue);
  return this;
};

WOQLQuery.prototype.equals = WOQLQuery.prototype.eq;

/**
 * Substring
 * @param {string|Var} string - String or variable
 * @param {number|Var} before - integer or variable (characters from start to begin)
 * @param {number|Var} [length] - integer or variable (length of substring)
 * @param {number|Var} [after] - integer or variable (number of characters after substring)
 * @param {string|Var} [subString] - String or variable
 * @returns {WOQLQuery}
 */
WOQLQuery.prototype.substr = function (string, before, length, after, subString) {
  // if (String && String === 'args')
  // return ['string', 'before', 'length', 'after', 'substring']
  if (!subString) {
    subString = after;
    after = 0;
  }
  if (!subString) {
    subString = length;
    length = subString.length + before;
  }
  if (!string || !subString || typeof subString !== 'string') {
    return this.parameterError(
      'Substr - the first and last parameters must be strings representing the full and substring variables / literals',
    );
  }
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Substring';
  this.cursor.string = this.cleanDataValue(string, 'xsd:string');
  this.cursor.before = this.cleanDataValue(before, 'xsd:nonNegativeInteger');
  this.cursor.length = this.cleanDataValue(length, 'xsd:nonNegativeInteger');
  this.cursor.after = this.cleanDataValue(after, 'xsd:nonNegativeInteger');
  this.cursor.substring = this.cleanDataValue(subString, 'xsd:string');
  return this;
};

WOQLQuery.prototype.substring = WOQLQuery.prototype.substr;

/**
 * Use the document inteface to import documents
 * @deprecated
 * Retrieves the exernal resource defined by QueryResource and copies values
 * from it into variables defined in AsVars
 * @param {Vars | array<Var>} asvars - an array of AsVar variable mappings (see as for format below)
 * @param {WOQLQuery} queryResource - an external resource (remote, file, post) to query
 * @returns {WOQLQuery} A WOQLQuery which contains the get expression
 */
WOQLQuery.prototype.get = function (asvars, queryResource) {
  this.cursor['@type'] = 'Get';
  this.cursor.columns = asvars.json ? asvars.json() : new WOQLQuery().as(...asvars).json();
  if (queryResource) {
    this.cursor.resource = this.jobj(queryResource);
  } else {
    this.cursor.resource = {};
  }
  this.cursor = this.cursor.resource;
  return this;
};

/**
 * Use the document inteface to import documents
 * @deprecated
 * @put Outputs the results of a query to a file
 * @param {Vars | array<Var>} varsToExp - an array of AsVar variable
 * mappings (see as for format below)
 * @param {WOQLQuery} query - The query which will be executed to produce the results
 * @param {string} fileResource - an file resource local to the server
 * @returns {WOQLQuery} A WOQLQuery which contains the put expression
 */
WOQLQuery.prototype.put = function (varsToExp, query, fileResource) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Put';
  if (Array.isArray(varsToExp) && typeof varsToExp[0] !== 'object') {
    const nasvars = [];
    for (let i = 0; i < varsToExp.length; i++) {
      const iasv = this.asv(i, varsToExp[i]);
      nasvars.push(iasv);
      this.cursor.columns = nasvars;
    }
  } else {
    this.cursor.columns = varsToExp.json
      ? varsToExp.json()
      : new WOQLQuery().as(...varsToExp).json();
  }
  this.cursor.query = this.jobj(query);
  if (fileResource) {
    this.cursor.resource = this.jobj(fileResource);
  } else {
    this.cursor.resource = {};
  }
  this.cursor = this.cursor.resource;
  return this;
};

/**
 * @param {...(array|string|Var)} varList variable number of arguments
 * @returns WOQLQuery
 */
WOQLQuery.prototype.as = function (...varList) {
  // if (varList && varList[0] == 'args')
  // return [['indexed_as_var', 'named_as_var']]
  if (!Array.isArray(this.query)) this.query = [];
  if (Array.isArray(varList[0])) {
    if (!varList[1]) {
      // indexed as vars
      for (var i = 0; i < varList[0].length; i++) {
        const iasv = this.asv(i, varList[0][i]);
        this.query.push(iasv);
      }
    } else {
      for (var i = 0; i < varList.length; i++) {
        const onemap = varList[i];
        if (Array.isArray(onemap) && onemap.length >= 2) {
          const type = onemap && onemap.length > 2 ? onemap[2] : false;
          const oasv = this.asv(onemap[0], onemap[1], type);
          this.query.push(oasv);
        }
      }
    }
  } else if (typeof varList[0] === 'number' || typeof varList[0] === 'string') {
    if (varList[2] && typeof varList[2] === 'string') {
      var oasv = this.asv(varList[0], varList[1], varList[2]);
    } else if (varList[1] && varList[1] instanceof Var) {
      var oasv = this.asv(varList[0], varList[1]);
    } else if (varList[1] && typeof varList[1] === 'string') {
      if (varList[1].substring(0, 4) === 'xsd:' || varList[1].substring(0, 4) === 'xdd:') {
        var oasv = this.asv(this.query.length, varList[0], varList[1]);
      } else {
        var oasv = this.asv(varList[0], varList[1]);
      }
    } else {
      var oasv = this.asv(this.query.length, varList[0]);
    }
    this.query.push(oasv);
  } else if (typeof varList[0] === 'object') {
    // check if it is an class object with an json method
    this.query.push(varList[0].json ? varList[0].json() : varList[0]);
  }
  return this;
};

/**
 * Identifies a remote resource by URL and specifies the format of the resource through the options
 * @param {object} remoteObj - The URL at which the remote resource can be accessed
 * @param {typedef.DataFormatObj} [formatObj] - The format of the resource data {}
 * @returns {WOQLQuery} A WOQLQuery which contains the remote resource identifier
 */

WOQLQuery.prototype.remote = function (remoteObj, formatObj) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'QueryResource';
  this.cursor.source = { '@type': 'Source', url: remoteObj };
  this.cursor.format = 'csv'; // hard coded for now
  if (typeof opts !== 'undefined') this.cursor.options = formatObj;
  return this;
};

/**
 * Identifies a resource as a local path on the client, to be sent to the server through a
 * HTTP POST request, with the format defined through the options
 * @param {string} url - The Path on the server at which the file resource can be accessed
 * @param {typedef.DataFormatObj} [formatObj] - input options, optional
 * @param {string} [source] - It defines the source of the file, it can be 'url','post'
 * @param {string} [data] - It defines the source of the file, it can be 'url','post'
 * @returns {WOQLQuery} A WOQLQuery which contains the Post resource identifier
 */

WOQLQuery.prototype.post = function (url, formatObj, source = 'post') {
  // if (fpath && fpath == 'args') return ['file', 'format']
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'QueryResource';
  this.cursor.source = { '@type': 'Source', [source]: url };
  this.cursor.format = 'csv'; // hard coded for now
  this.cursor.options = formatObj;
  if (typeof formatObj !== 'undefined') this.cursor.options = formatObj;
  return this;
};

/**
 * Deletes a single triple from the default graph of the database
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string|Var} object - The IRI of a node or a variable, or a literal
 * @returns {WOQLQuery} - A WOQLQuery which contains the Triple Deletion statement
 */

WOQLQuery.prototype.delete_triple = function (subject, predicate, object) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  const args = this.triple(subject, predicate, object);
  this.cursor['@type'] = 'DeleteTriple';
  return this.updated();
};

/**
 * Adds triples according to the the pattern [subject,predicate,object]
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string|Var} object - The IRI of a node or a variable, or a literal
 * @returns {WOQLQuery}
 */

WOQLQuery.prototype.add_triple = function (subject, predicate, object) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  const args = this.triple(subject, predicate, object);
  this.cursor['@type'] = 'AddTriple';
  return this.updated();
};

/**
 * Deletes a single triple from the graph [Subject, Predicate, Object, Graph]
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string|Var} object - The IRI of a node or a variable, or a literal
 * @param {typedef.GraphRef} graphRef - A valid graph resource identifier string
 * @returns {WOQLQuery} - A WOQLQuery which contains the Delete Quad Statement
 */
WOQLQuery.prototype.delete_quad = function (subject, predicate, object, graphRef) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  const args = this.triple(subject, predicate, object);
  // if (a && a == 'args') return args.concat(['graph'])
  if (!graphRef) {
    return this.parameterError(
      'Delete Quad takes four parameters, the last should be a graph id',
    );
  }
  this.cursor['@type'] = 'DeleteTriple';
  this.cursor.graph = this.cleanGraph(graphRef);
  return this.updated();
};

/**
 * Adds quads according to the pattern [S,P,O,G]
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string|Var} object - The IRI of a node or a variable, or a literal
 * @param {typedef.GraphRef} graphRef - A valid graph resource identifier string
 * @returns {WOQLQuery}
 */

WOQLQuery.prototype.add_quad = function (subject, predicate, object, graphRef) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  const args = this.triple(subject, predicate, object);
  if (!graphRef) return this.parameterError('Add Quad takes four parameters, the last should be a graph id');
  this.cursor['@type'] = 'AddTriple';
  this.cursor.graph = this.cleanGraph(graphRef);
  return this.updated();
};

/**
 * Remove whitespace from both sides of a string:
 * @param {string|Var} inputStr - A string or variable containing
 * the untrimmed version of the string
 * @param {string|Var} resultVarName - A string or variable
 * containing the trimmed version of the string
 * @returns {WOQLQuery} A WOQLQuery which contains the Trim pattern matching expression
 */

WOQLQuery.prototype.trim = function (inputStr, resultVarName) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Trim';
  this.cursor.untrimmed = this.cleanDataValue(inputStr);
  this.cursor.trimmed = this.cleanDataValue(resultVarName);
  return this;
};

/**
 * Evaluates the passed arithmetic expression and generates or matches the result value
 * @param {object| WOQLQuery | string} arithExp - query or JSON-LD representing the query
 * @param {string|Var} resultVarName - output variable
 * @returns {WOQLQuery}
 */

WOQLQuery.prototype.eval = function (arithExp, resultVarName) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Eval';
  this.cursor.expression = arithExp.json ? arithExp.json() : arithExp;
  this.cursor.result = this.cleanArithmeticValue(resultVarName);
  return this;
};

/**
 * Adds the numbers together
 * @param {...(string|number|Var)} args - a variable or numeric containing the values to add
 * @returns {WOQLQuery} A WOQLQuery which contains the addition expression
 */

WOQLQuery.prototype.plus = function (...args) {
  // if (args && args[0] == 'args') return ['first', 'second']
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Plus';
  this.cursor.left = this.arop(args.shift());
  if (args.length > 1) {
    this.cursor.right = this.jobj(new WOQLQuery().plus(...args));
  } else {
    this.cursor.right = this.arop(args[0]);
  }
  return this;
};

/**
 *
 * Subtracts Numbers N1..Nn
 * @param {...(string|number|Var)} args - variable or numeric containing the value that will be
 * subtracted from
 * @returns {WOQLQuery} A WOQLQuery which contains the subtraction expression
 */
WOQLQuery.prototype.minus = function (...args) {
  // if (args && args[0] === 'args') return ['first', 'right']
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Minus';
  this.cursor.left = this.arop(args.shift());
  if (args.length > 1) {
    this.cursor.right = this.jobj(new WOQLQuery().minus(...args));
  } else {
    this.cursor.right = this.arop(args[0]);
  }
  return this;
};

/**
 *
 * Multiplies numbers N1...Nn together
 * @param {...(string|number|Var)} args - a variable or numeric containing the value
 * @returns {WOQLQuery} A WOQLQuery which contains the multiplication expression
 */
WOQLQuery.prototype.times = function (...args) {
  // if (args && args[0] === 'args') return ['first', 'right']
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Times';
  this.cursor.left = this.arop(args.shift());
  if (args.length > 1) {
    this.cursor.right = this.jobj(new WOQLQuery().times(...args));
  } else {
    this.cursor.right = this.arop(args[0]);
  }
  return this;
};

/**
 * Divides numbers N1...Nn by each other left, to right precedence
 * @param {...(string|number|Var )} args - numbers to tbe divided
 * @returns {WOQLQuery} A WOQLQuery which contains the division expression
 */
WOQLQuery.prototype.divide = function (...args) {
  // if (args && args[0] === 'args') return ['left', 'right']
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Divide';
  this.cursor.left = this.arop(args.shift());
  if (args.length > 1) {
    this.cursor.right = this.jobj(new WOQLQuery().divide(...args));
  } else {
    this.cursor.right = this.arop(args[0]);
  }
  return this;
};

/**
 * Division - integer division - args are divided left to right
 * @param {...(string|number|Var)} args - numbers for division
 * @returns {WOQLQuery} A WOQLQuery which contains the division expression
 */

WOQLQuery.prototype.div = function (...args) {
  // if (args && args[0] === 'args') return ['left', 'right']
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Div';
  this.cursor.left = this.arop(args.shift());
  if (args.length > 1) {
    this.cursor.right = this.jobj(new WOQLQuery().div(...args));
  } else {
    this.cursor.right = this.arop(args[0]);
  }
  return this;
};

/**
 * Exponent - raises varNum01 to the power of varNum02
 * @param {string|number|Var} varNum -  a variable or numeric containing the number to be
 * raised to the power of the second number
 * @param {number} expNum -  a variable or numeric containing the exponent
 * @returns {WOQLQuery} A WOQLQuery which contains the exponent expression
 */
WOQLQuery.prototype.exp = function (varNum, expNum) {
  // if (a && a === 'args') return ['left', 'right']
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Exp';
  this.cursor.left = this.arop(varNum);
  this.cursor.right = this.arop(expNum);
  return this;
};

/**
 * Generates the nearest lower integer to the passed number
 * @param {string|number|Var} varNum - Variable or numeric containing the number to be floored
 * @returns {WOQLQuery} A WOQLQuery which contains the floor expression
 */
WOQLQuery.prototype.floor = function (varNum) {
  // if (a && a === 'args') return ['argument']
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Floor';
  this.cursor.argument = this.arop(varNum);
  return this;
};

/**
 * Tests whether a given instance IRI has type Class, according to the current state of the DB
 * @param {string|Var} instanceIRI - A string IRI or a variable that identify the class instance
 * @param {string|Var} classId - A Class IRI or a variable
 * @returns {WOQLQuery} A WOQLQuery object containing the type test
 */
WOQLQuery.prototype.isa = function (instanceIRI, classId) {
  // if (a && a === 'args') return ['element', 'of_type']
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'IsA';
  this.cursor.element = this.cleanNodeValue(instanceIRI);
  this.cursor.type = this.cleanNodeValue(classId);
  return this;
};

/**
 * Generates a string Leverstein distance measure between stringA and stringB
 * @param {string|Var} stringA - string literal or variable representing a string to be compared
 * @param {string|Var } stringB - string literal or variable
 * representing the other string to be compared
 * @param {number|string|Var} distance - variable representing the distance between the variables
 * @returns {WOQLQuery} A WOQLQuery which contains the Like pattern matching expression
 */
WOQLQuery.prototype.like = function (stringA, stringB, distance) {
  // if (a && a === 'args')
  // return ['left', 'right', 'like_similarity']
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Like';
  this.cursor.left = this.cleanDataValue(stringA, 'xsd:string');
  this.cursor.right = this.cleanDataValue(stringB, 'xsd:string');
  if (distance) {
    this.cursor.similarity = this.cleanDataValue(distance, 'xsd:decimal');
  }
  return this;
};

/**
 * Compares the value of v1 against v2 and returns true if v1 is less than v2
 * @param {string|number|Var} varNum01 - a variable or numeric containing
 * the number to be compared
 * @param {string|number|Var} varNum02 - a variable or numeric containing the second comporator
 * @returns {WOQLQuery} A WOQLQuery which contains the comparison expression
 */
WOQLQuery.prototype.less = function (varNum01, varNum02) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Less';
  this.cursor.left = this.cleanDataValue(varNum01);
  this.cursor.right = this.cleanDataValue(varNum02);
  return this;
};

/**
 * Compares the value of v1 against v2 and returns true if v1 is greater than v2
 * @param {string|number|Var} varNum01 - a variable or numeric containing the number to be compared
 * @param {string|number|Var} varNum02 - a variable or numeric containing the second comporator
 * @returns {WOQLQuery} A WOQLQuery which contains the comparison expression
 */
WOQLQuery.prototype.greater = function (varNum01, varNum02) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Greater';
  this.cursor.left = this.cleanDataValue(varNum01);
  this.cursor.right = this.cleanDataValue(varNum02);
  return this;
};

/**
 * Specifies that the Subquery is optional - if it does not match the query will not fail
 * @param {WOQLQuery} [subquery] - A subquery which will be optionally matched
 * @returns {WOQLQuery} A WOQLQuery object containing the optional sub Query
 */
WOQLQuery.prototype.opt = function (subquery) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Optional';
  this.addSubQuery(subquery);
  return this;
};

WOQLQuery.prototype.optional = WOQLQuery.prototype.opt;

/**
 * Generate a new IRI from the prefix and a hash of the variables which will be unique for any
 * given combination of variables
 * @param {string} prefix - A prefix for the IRI - typically formed of the doc prefix and the
 * classtype of the entity (“doc:Person”)
 * @param {array|string|Var} inputVarList - An array of variables and / or strings from which the
 * unique hash will be generated
 * @param {string|Var} resultVarName - Variable in which the unique ID is stored
 * @returns {WOQLQuery} A WOQLQuery object containing the unique ID generating function
 */
WOQLQuery.prototype.unique = function (prefix, inputVarList, resultVarName) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'HashKey';
  this.cursor.base = this.cleanDataValue(prefix, 'xsd:string');
  this.cursor.key_list = this.cleanDataValue(inputVarList);
  this.cursor.uri = this.cleanNodeValue(resultVarName);
  return this;
};

/**
 * Generates the node's ID combined the variable list with a specific prefix (URL base).
 * If the input variables's values are the same, the output value will be the same.
 * @param {string} prefix
 * @param {string |array}  inputVarList the variable input list for generate the id
 * @param {string} outputVar  the output variable name
 */

WOQLQuery.prototype.idgen = function (prefix, inputVarList, outputVar) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'LexicalKey';
  this.cursor.base = this.cleanDataValue(prefix, 'xsd:string');
  // this.cursor['base'] = this.cleanObject(this.string(prefix))
  this.cursor.key_list = this.dataValueList(inputVarList);
  this.cursor.uri = this.cleanNodeValue(outputVar);
  return this;
};

WOQLQuery.prototype.idgenerator = WOQLQuery.prototype.idgen;

/**
 * Changes a string to upper-case
 * @param {string|Var} inputVarName - string or variable representing the uncapitalized string
 * @param {string|Var} resultVarName -  variable that stores the capitalized string output
 * @returns {WOQLQuery} A WOQLQuery which contains the Upper case pattern matching expression
 */
WOQLQuery.prototype.upper = function (inputVarName, resultVarName) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Upper';
  this.cursor.mixed = this.cleanDataValue(inputVarName);
  this.cursor.upper = this.cleanDataValue(resultVarName);
  return this;
};

/**
 * Changes a string to lower-case
 * @param {string|Var} inputVarName -  string or variable representing the non-lowercased string
 * @param {string|Var} resultVarName - variable that stores the lowercased string output
 * @returns {WOQLQuery} A WOQLQuery which contains the Lower case pattern matching expression
 */

WOQLQuery.prototype.lower = function (inputVarName, resultVarName) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Lower';
  this.cursor.mixed = this.cleanDataValue(inputVarName);
  this.cursor.lower = this.cleanDataValue(resultVarName);
  return this;
};

/**
 * Pads out the string input to be exactly len long by appending the pad character pad to
 * form output
 * @param {string|Var} inputVarName - The input string or variable in unpadded state
 * @param {string|Var} pad - The characters to use to pad the string or a variable representing them
 * @param {number | string | Var} len - The variable or integer value representing the length of
 * the output string
 * @param {string|Var} resultVarName - stores output
 * @returns {WOQLQuery} A WOQLQuery which contains the Pad pattern matching expression
 */

WOQLQuery.prototype.pad = function (inputVarName, pad, len, resultVarName) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Pad';
  this.cursor.string = this.cleanDataValue(inputVarName);
  this.cursor.char = this.cleanDataValue(pad);
  this.cursor.times = this.cleanDataValue(len, 'xsd:integer');
  this.cursor.result = this.cleanDataValue(resultVarName);
  return this;
};

/**
 * Splits a string (Input) into a list strings (Output) by removing separator
 * @param {string|Var} inputVarName - A string or variable representing the unsplit string
 * @param {string|Var} separator - A string or variable containing a sequence of charatcters
 * to use as a separator
 * @param {string|Var} resultVarName - variable that stores output list
 * @returns {WOQLQuery} A WOQLQuery which contains the Split pattern matching expression
 */

WOQLQuery.prototype.split = function (inputVarName, separator, resultVarName) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Split';
  this.cursor.string = this.cleanDataValue(inputVarName);
  this.cursor.pattern = this.cleanDataValue(separator);
  this.cursor.list = this.cleanDataValue(resultVarName);
  return this;
};

/**
 * Matches if List includes Element
 * @param {string|object|Var} element - Either a variable, IRI or any simple datatype
 * @param {string|array|Var} list - List ([string, literal] or string*) Either a variable
 * representing a list or a list of variables or literals
 * @returns {WOQLQuery} A WOQLQuery which contains the List inclusion pattern matching expression
 */
WOQLQuery.prototype.member = function (element, list) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Member';
  this.cursor.member = this.cleanObject(element);
  this.cursor.list = this.valueList(list);
  return this;
};

/**
 * takes a variable number of string arguments and concatenates them into a single string
 * @param {array|string|Var} varList -  a variable representing a list or a list of variables or
 * strings - variables can be embedded in the string if they do not contain spaces
 * @param {string|Var}  resultVarName - A variable or string containing the output string
 * @returns {WOQLQuery} A WOQLQuery which contains the Concatenation pattern matching expression
 */

WOQLQuery.prototype.concat = function (varList, resultVarName) {
  if (typeof varList === 'string') {
    const slist = varList.split(/(v:)/);
    const nlist = [];
    if (slist[0]) nlist.push(slist[0]);
    for (let i = 1; i < slist.length; i += 2) {
      if (slist[i]) {
        if (slist[i] === 'v:') {
          const slist2 = slist[i + 1].split(/([^\w_])/);
          const x = slist2.shift();
          nlist.push(`v:${x}`);
          const rest = slist2.join('');
          if (rest) nlist.push(rest);
        }
      }
    }
    varList = nlist;
  }
  if (Array.isArray(varList)) {
    if (this.cursor['@type']) this.wrapCursorWithAnd();
    this.cursor['@type'] = 'Concatenate';
    this.cursor.list = this.cleanDataValue(varList, true);
    this.cursor.result = this.cleanDataValue(resultVarName);
  }
  return this;
};

WOQLQuery.prototype.concatenate = WOQLQuery.prototype.concat;

/**
 * Joins a list variable together (Input) into a string variable (Output) by glueing the strings
 * together with Glue
 * @param {string|array|Var} varList - a variable representing a list or a list of strings
 * and / or variables
 * @param {string|Var} glue - A variable (v:glue) or (glue) string representing the characters
 * to put in between the joined strings in input
 * @param {string|Var} resultVarName - A variable or string containing the output string
 * @returns {WOQLQuery} A WOQLQuery which contains the Join pattern matching expression
 */
WOQLQuery.prototype.join = function (varList, glue, resultVarName) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Join';
  this.cursor.list = this.cleanDataValue(varList);
  this.cursor.separator = this.cleanDataValue(glue);
  this.cursor.result = this.cleanDataValue(resultVarName);
  return this;
};

/**
 * computes the sum of the List of values passed. In contrast to other arithmetic functions,
 * sum self-evaluates - it does not have to be passed to evaluate()
 * @param {WOQLQuery} subquery -  a subquery or ([string or numeric]) - a list variable, or a
 * list of variables or numeric literals
 * @param {string|Var} total - the variable name with the sum result of the values in List
 * @returns {WOQLQuery} - A WOQLQuery which contains the Sum expression
 */
WOQLQuery.prototype.sum = function (subquery, total) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Sum';
  this.cursor.list = this.cleanDataValue(subquery);
  this.cursor.result = this.cleanObject(total);
  return this;
};

/**
 *
 * Specifies an offset position in the results to start listing results from
 * @param {number|string|Var} start - A variable that refers to an interger or an integer literal
 * @param {WOQLQuery} [subquery] - WOQL Query object, you can pass a subquery as an argument
 * or a chained query
 * @returns {WOQLQuery} A WOQLQuery whose results will be returned starting from
 * the specified offset
 */

WOQLQuery.prototype.start = function (start, subquery) {
  // if (start && start === 'args') return ['start', 'query']
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Start';
  this.cursor.start = start;
  return this.addSubQuery(subquery);
};

/**
 * Specifies a maximum number of results that will be returned from the subquery
 * @param {number|string} limit - A variable that refers to an non-negative integer or a
 * non-negative integer
 * @param {WOQLQuery} [subquery] - A subquery whose results will be limited
 * @returns {WOQLQuery} A WOQLQuery whose results will be returned starting from
 * the specified offset
 */

WOQLQuery.prototype.limit = function (limit, subquery) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Limit';
  this.cursor.limit = limit;
  return this.addSubQuery(subquery);
};

/**
 * Matches the regular expression defined in Patern against the Test string, to produce
 * the matched patterns in Matches
 * @param {string} pattern - string or variable using normal PCRE regular expression syntax with
 * the exception that special characters have to be escaped twice (to enable transport in JSONLD)
 * @param {string|Var} inputVarName - string or variable containing the string to be tested for
 * patterns with the regex
 * @param {string|array|object|Var} resultVarList - variable representing the list of matches
 * or a list of strings or variables
 * @returns {WOQLQuery} A WOQLQuery which contains the Regular Expression pattern
 * matching expression
 */

WOQLQuery.prototype.re = function (pattern, inputVarName, resultVarList) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Regexp';
  this.cursor.pattern = this.cleanDataValue(pattern);
  this.cursor.string = this.cleanDataValue(inputVarName);
  this.cursor.result = this.cleanDataValue(resultVarList);
  return this;
};

WOQLQuery.prototype.regexp = WOQLQuery.prototype.re;

/**
 * Calculates the length of the list in va and stores it in vb
 * @param {string|array} inputVarList - Either a variable representing a list or a list of
 * variables or literals
 * @param {string|Var} resultVarName -  A variable in which the length of the list is stored or
 * the length of the list as a non-negative integer
 * @returns {WOQLQuery} A WOQLQuery which contains the Length pattern matching expression
 */
WOQLQuery.prototype.length = function (inputVarList, resultVarName) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Length';
  this.cursor.list = this.cleanDataValue(inputVarList);
  if (typeof vb === 'number') {
    this.cursor.length = this.cleanObject(resultVarName, 'xsd:nonNegativeInteger');
  } else if (typeof vb === 'string') {
    this.cursor.length = this.varj(resultVarName);
  }
  return this;
};

/**
 *
 * Logical negation of the contained subquery - if the subquery matches, the query
 * will fail to match
 * @param {string | WOQLQuery} [subquery] -  A subquery which will be negated
 * @returns {WOQLQuery} A WOQLQuery object containing the negated sub Query
 */
WOQLQuery.prototype.not = function (subquery) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Not';
  return this.addSubQuery(subquery);
};

/**
 * Results in one solution of the subqueries
 * @param {string| WOQLQuery } [subquery] - WOQL Query objects
 * @returns {WOQLQuery} A WOQLQuery object containing the once sub Query
 */
WOQLQuery.prototype.once = function (subquery) {
  // if (query && query === 'args') return ['query']
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Once';
  return this.addSubQuery(subquery);
};

/**
 * Runs the query without backtracking on side-effects
 * @param {string| WOQLQuery } [subquery] - WOQL Query objects
 * @returns {WOQLQuery} A WOQLQuery object containing the immediately sub Query
 */
WOQLQuery.prototype.immediately = function (query) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Immediately';
  return this.addSubQuery(query);
};

/**
 * Creates a count of the results of the query
 * @param {string|number|Var} countVarName - variable or integer count
 * @param {WOQLQuery} [subquery]
 * @returns {WOQLQuery} A WOQLQuery object containing the count sub Query
 */
WOQLQuery.prototype.count = function (countVarName, subquery) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Count';
  this.cursor.count = this.cleanObject(countVarName);
  return this.addSubQuery(subquery);
};

/**
 * Casts the value of Input to a new value of type Type and stores the result in CastVar
 * @param {string|number|object|Var} varName - Either a single variable or a
 * literal of any basic type
 * @param {string|Var} varType - Either a variable or a basic datatype (xsd / xdd)
 * @param {string|Var} resultVarName - save the return variable
 * @returns {WOQLQuery} A WOQLQuery which contains the casting expression
 */

WOQLQuery.prototype.typecast = function (varName, varType, resultVarName) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Typecast';
  this.cursor.value = this.cleanObject(varName);
  this.cursor.type = this.cleanNodeValue(varType);
  this.cursor.result = this.cleanObject(resultVarName);
  return this;
};

WOQLQuery.prototype.cast = WOQLQuery.prototype.typecast;

/**
 * Orders the results of the contained subquery by a precedence list of variables
 * @param  {...string|...Var|...array} orderedVarlist - A sequence of variables,
 * by which to order the results,
 * each optionally followed by either “asc” or “desc” to represent order as a list, by default
 * it will sort the variable in ascending order
 * @returns  {WOQLQuery} A WOQLQuery which contains the ordering expression
 */
WOQLQuery.prototype.order_by = function (...orderedVarlist) {
  // if (orderedVarlist && orderedVarlist[0] === 'args')
  // return ['variable_ordering', 'query']
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'OrderBy';
  this.cursor.ordering = [];

  if (!orderedVarlist || orderedVarlist.length === 0) {
    return this.parameterError(
      'Order by must be passed at least one variables to order the query',
    );
  }
  const embedquery = typeof orderedVarlist[orderedVarlist.length - 1] === 'object'
        && orderedVarlist[orderedVarlist.length - 1].json
    ? orderedVarlist.pop()
    : false;

  for (let i = 0; i < orderedVarlist.length; i++) {
    let obj;
    if ((typeof orderedVarlist[i] === 'string' || orderedVarlist[i] instanceof Var) && orderedVarlist[i] !== '') {
      obj = {
        '@type': 'OrderTemplate',
        variable: this.rawVar(orderedVarlist[i]),
        order: 'asc',
      };
    } else if (orderedVarlist[i].length === 2 && orderedVarlist[i][1] === 'asc') {
      obj = {
        '@type': 'OrderTemplate',
        variable: this.rawVar(orderedVarlist[i][0]),
        order: 'asc',
      };
    } else if (orderedVarlist[i].length === 2 && orderedVarlist[i][1] === 'desc') {
      obj = {
        '@type': 'OrderTemplate',
        variable: this.rawVar(orderedVarlist[i][0]),
        order: 'desc',
      };
    }

    if (obj) this.cursor.ordering.push(obj);
  }
  return this.addSubQuery(embedquery);
};

/**
 *
 * Groups the results of the contained subquery on the basis of identical values for Groupvars,
 * extracts the patterns defined in PatternVars and stores the results in GroupedVar
 * @param {array|string|Var} gvarlist - Either a single variable or an array of variables
 * @param {array|string|Var} groupedvar - Either a single variable or an array of variables
 * @param {string|Var} output - output variable name
 * @param {WOQLQuery} [groupquery] - The query whose results will be grouped
 * @returns {WOQLQuery} A WOQLQuery which contains the grouping expression
 */

WOQLQuery.prototype.group_by = function (gvarlist, groupedvar, output, groupquery) {
  // if (gvarlist && gvarlist === 'args')
  // return ['group_by', 'group_template', 'grouped', 'query']
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'GroupBy';
  this.cursor.group_by = [];

  if (typeof gvarlist === 'string' || gvarlist instanceof Var) gvarlist = [gvarlist];
  this.cursor.group_by = this.rawVarList(gvarlist);
  if (typeof groupedvar === 'string' || groupedvar instanceof Var) groupedvar = [groupedvar];
  this.cursor.template = this.rawVarList(groupedvar);
  this.cursor.grouped = this.varj(output);
  return this.addSubQuery(groupquery);
};

/**
 * A function that always matches, always returns true
 * @returns {WOQLQuery} A WOQLQuery object containing the true value that will match any pattern
 */
WOQLQuery.prototype.true = function () {
  this.cursor['@type'] = 'True';
  return this;
};

/**
 * Performs a path regular expression match on the graph
 * @param {string|Var} subject -  An IRI or variable that refers to an IRI representing the subject,
 * i.e. the starting point of the path
 * @param {string} pattern -(string) - A path regular expression describing a pattern through
 * multiple edges of the graph (see: https://terminusdb.com/docs/path-query-reference-guide)
 * @param {string|Var} object - An IRI or variable that refers to an IRI representing the object,
 * i.e. ending point of the path
 * @param {string|Var} [resultVarName] - A variable in which the actual paths
 * traversed will be stored
 * @returns {WOQLQuery} - A WOQLQuery which contains the path regular expression matching expression
 */

WOQLQuery.prototype.path = function (subject, pattern, object, resultVarName) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Path';
  this.cursor.subject = this.cleanSubject(subject);
  if (typeof pattern === 'string') pattern = this.compilePathPattern(pattern);
  this.cursor.pattern = pattern;
  this.cursor.object = this.cleanObject(object);
  if (typeof resultVarName !== 'undefined') {
    this.cursor.path = this.varj(resultVarName);
  }
  return this;
};

/**
 * Extract the value of a key in a bound document.
 * @param {string|Var} document - Document which is being accessed.
 * @param {string|Var} field - The field from which the document which is being accessed.
 * @param {string|Var} value - The value for the document and field.
 * @returns {WOQLQuery} A WOQLQuery which contains the a dot Statement
 */

WOQLQuery.prototype.dot = function (document, field, value) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Dot';
  this.cursor.document = this.expandValueVariable(document);
  this.cursor.field = this.cleanDataValue(field, 'xsd:string');
  this.cursor.value = this.expandValueVariable(value);
  return this;
};

/**
 * Calculates the size in bytes of the contents of the resource identified in ResourceID
 * @param {string|Var} resourceId - A valid resource identifier string (can refer to any graph /
 * branch / commit / db)
 * @param {string|Var} resultVarName - The variable name
 */

WOQLQuery.prototype.size = function (resourceId, resultVarName) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'Size';
  this.cursor.resource = this.cleanGraph(resourceId);
  this.cursor.size = this.varj(resultVarName);
  return this;
};

/**
 *
 * Calculates the number of triples of the contents of the resource identified in ResourceID
 * @param {string|Var} resourceId - A valid resource identifier string (can refer to any graph /
 * branch / commit / db)
 * @param {string|number|Var} tripleCount - An integer literal with the size in bytes or a
 * variable containing that integer
 * @returns {WOQLQuery} A WOQLQuery which contains the size expression
 */
WOQLQuery.prototype.triple_count = function (resourceId, TripleCount) {
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'TripleCount';
  this.cursor.resource = this.cleanGraph(resourceId);
  this.cursor.count = this.varj(TripleCount);
  return this;
};

/**
 * Returns true if 'elementId' is of type 'elementType', according to the current DB schema
 * @param {string|Var} elementId - the id of a schema graph element
 * @param {string|Var} elementType - the element type
 * @returns {WOQLQuery} A WOQLQuery object containing the type_of pattern matching rule
 */

WOQLQuery.prototype.type_of = function (elementId, elementType) {
  if (!elementId || !elementType) return this.parameterError('type_of takes two parameters, both values');
  if (this.cursor['@type']) this.wrapCursorWithAnd();
  this.cursor['@type'] = 'TypeOf';
  this.cursor.value = this.cleanObject(elementId);
  this.cursor.type = this.cleanSubject(elementType);
  return this;
};

module.exports = WOQLQuery;


/***/ }),

/***/ 1072:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/**
 * @module TypeDef
 * @description Type definitions
 * */
/* eslint-disable no-unused-vars */
const Utils = __nccwpck_require__(4948);

const { ACTIONS } = Utils.ACTIONS;

/**
 *@typedef {Object} DocParamsGet - the GET document interface query parameters
 *@property {object} [query] - object that descrive the document query
 *@property {GraphType} [graph_type] - instance|schema, default value is instance.
 *Used to switch between getting documents from the instance or the schema graph.
 *@property {string} [type] - only documents of the given type are returned.
 *@property {string} [id] - only the document with the given ID is returned.
 *@property {boolean} [prefixed] - default is true, return IRIs using a prefixed notation wherever
 *possible. If false, full IRIs are used.
 *@property {boolean} [minimized] -  default is false, return the documents with very
 little whitespace. Each json document will be on its own line.
 *@property {boolean} [unfold] -  default is false, any subdocuments contained in the returned
 document are returned too. If false, these are referred to by their ID instead.
 *@property {number} [skip] -  default is 0, How many results to skip
 *@property {number} [count] count - How many results to return. If this option is absent, all
 results are returned.
 *@property {boolean} [as_list]  default is false, If true, don't return a stream of json objects,
 but a json list.
 *@property {string} [graph_type] - instance|schema default value is instance
 */

/**
 *@typedef {Object} DocParamsPost - the POST document interface query parameters
 *@property {boolean} [raw_json] - default is false, If true, the input documents
 are treated as raw JSON, inserted as type sys:JSONDocument and are not subject
 to schema restrictions.
 *@property {GraphType} [graph_type] - default is instance  instance|schema Used to switch between
 getting documents from the instance or the schema graph.
 *@property {boolean} [full_replace] - default is false, If true, all existing documents are deleted
 before inserting the posted documents. This allows the full replacement of the contents of a
 database. This is especially useful for replacing the schema.
 */

/**
 *@typedef {Object} DocParamsPut - the PUT document interface query parameters
 *@property {boolean} [raw_json] - default is false, If true, the input documents
 are treated as raw JSON, inserted as type sys:JSONDocument and are not subject
 to schema restrictions.
 *@property {boolean} [create] - If true, the function will create
 a new document if it doesn't exist.
 *@property {GraphType} [graph_type] - default is instance, instance|schema Used to switch between
 getting documents from the instance or the schema graph.
 */

/**
 *@typedef {Object} DocParamsDelete - the DELETE document interface query parameters
 *@property {GraphType} [graph_type] - default is instance, instance|schema Used to switch between
 getting documents from the instance or the schema graph.
 *@property {string|array} id - a single id or a list of ids to delete.
 *@property {boolean} [nuke] - default is false, If true, delete everything at this resource
 location (dangerous!).
 */

/**
 * @typedef {"schema/main" | "instance/main" | string} GraphRef
 */
/**
 * @typedef {Object} DataFormatObj (export/import)
 * @property {"csv"|"turtle"} [type] the format type
 * @property {string} [format_header] header format type
 */

/**
 * @typedef {"add_quad" | "delete_quad" | "add_triple" | "delete_triple" | "quad" |
 * "triple"} FuntionType
 */

/**
 * @typedef {"commits"|"meta"|"branch"|"ref"|"repo"|"db"} ResourceType
 */

/**
 *@typedef {"instance" | "schema" } GraphType
 */

/**
 * @typedef {Object} CredentialObj
 * @property {'basic'|'jwt'|'apikey'} type -  the authorization type of an TerminusDB connection
 * @property {string | boolean} [user] - the user id | I don't need the user with the jwt token
 * @property {string} key -  the connection key
 */

/**
 * @typedef {'graph'|'db'|'clone'|'triples'|'woql'|'fetch'|'pull'|'rebase'|'branch'|'reset'|
 * 'push'|'squash'} ActionType
 */

/**
 * @typedef {Object} ParamsObj
 * @property {string} [key] - api key for basic auth
 * @property {string} [jwt] - jwt token to connect with terminusX server
 * @property {string} [user] - the user id, we use this for basic authentication and for
 * identify the commits author
 * @property {string} [organization] - set organization to this id
 * @property {string} [db] - set cursor to this db
 * @property {RepoType | string} [repo] - set cursor to this repo
 * @property {string} [branch] - set branch to this id
 * @property {string} [ref]    - set commit ref
 * @property {string} [default_branch_id] - set the default branch id
 * @property {string} [token] - Api token to connect with TerminusX
 */

/**
 * @typedef {Object} RolesObj
 * @property {string} agent_name -  the Authorization connection's type
 * @property {string} [database_name] - the user id | I don't need the user with the jwt token
 * @property {string} [organization_name] -  the connection key
 * @property {array} [actions] - list of roles
 * @property {string} [invitation] -
 */

/**
 * @typedef {"database"|"organization"} ScopeType
 */

/**
 * @typedef {"local"|"remote"} RepoType
 */
// sharing is a boolean
/**
 * @typedef {Object} DbDetails
 * @property {string} label - "Textual DB Name"
 * @property {string} [comment] - "Text description of DB"
 * @property {boolean} [public] -
 * @property {boolean} [schema] - if set to true, a schema graph will be created
 */

/**
 * @typedef {Object} DbDoc
 * @property {string} id - "Database ID"
 * @property {string} [label] - "Textual DB Name"
 * @property {string} [comment] - "Text description of DB"
 * @property {string} [organization] - "Organization to which the db belongs"
 * @property {boolean} [public] -
 * @property {boolean} [schema] - if set to true, a schema graph will be created
 */

/**
 *@typedef {Object} RemoteRepoDetails - {remote: "origin", "remote_branch": "main", "author":
 "admin","message": "message"}
 *@property {string} [remote] - remote server url
 *@property {string} remote_branch - remote branch name
 *@property {string} [author]   - if it is undefined it get the current author
 *@property  {string} [message] - the update commit message
 *
 */

/**
 * @typedef {Object} CloneSourceDetails
 * @property {string} remote_url - the remote db source url
 * @property {string} [label]
 * @property {string} [comment]
 */

/**
* @typedef {"grant" | "revoke"} CapabilityCommand - the manage capability command type
*/

/**
 * @typedef  {ACTIONS[]} RolesActions - [ACTIONS.CREATE_DATABASE | ACTIONS.DELETE_DATABASE]
 */

/**
 * @typedef  {Object} DocHistoryParams
 * @property {number} [start] - Index to start from, 0 is the default
 * @property {number} [count] - Amount of commits to show, 10 is the default
 * @property {boolean} [updated] - Last updated time (excludes history) false is the default
 * @property {boolean} [created] - Created date of object (excludes history) false is the default
 */

/**
 * @typedef  {Object} DiffObject
 * @property {Object} [keep] - Index to start from, 0 is the default
 * @property {number} [count] - Last updated time (excludes history) false is the default
 * @property {number} [start] - Amount of commits to show, 10 is the default
 */

module.exports = {};


/***/ }),

/***/ 4948:
/***/ ((module) => {

/* eslint-disable no-undef */
/* eslint-disable guard-for-in */
/* eslint-disable no-plusplus */
/* eslint-disable no-shadow */
/* eslint-disable camelcase */
/* eslint-disable no-restricted-syntax */
/* eslint-disable no-param-reassign */
/**
 * @file Terminus Client Utility Functions
 * @license Apache Version 2
 * Object for bunding up common Terminus Utility Functions
 */
const Utils = {};

Utils.checkValidName = function (str) {
  if (typeof str !== 'string' || str.trim() === '') return false;
  return /^[a-zA-Z0-9_]*$/.test(str);
};

Utils.ACTIONS = {
  CREATE_DATABASE: 'create_database',
  DELETE_DATABASE: 'delete_database',
  SCHEMA_READ_ACCESS: 'schema_read_access',
  SCHEMA_WRITE_ACCESS: 'schema_write_access',
  INSTANCE_READ_ACCESS: 'instance_read_access',
  INSTANCE_WRITE_ACCESS: 'instance_write_access',
  COMMIT_READ_ACCESS: 'commit_read_access',
  COMMIT_WRITE_ACCESS: 'commit_write_access',
  META_READ_ACCESS: 'meta_read_access',
  META_WRITE_ACCESS: 'meta_write_access',
  CLASS_FRAME: 'class_frame',
  BRANCH: 'branch',
  CLONE: 'clone',
  FETCH: 'fetch',
  PUSH: 'push',
  REBASE: 'rebase',
  /* MANAGE_CAPABILITIES: 'manage_capabilities', */
};

// encodeURI() will not encode: ~!@#$&*()=:/,;?+
// =%25team =%team
// terminusDB do not encode =@ too
Utils.encodeURISegment = function (str) {
  if (typeof str !== 'string') return str;
  str = encodeURI(str);
  str = str.replace(/\?/g, '%3F');
  // we not need = because the server does not encode it
  // str = str.replace(/=/g, '%3D');
  // str = str.replace(/@/g, '%40');
  str = str.replace(/&/g, '%26');
  str = str.replace(/\+/g, '%2B');
  str = str.replace(/#/g, '%23');
  return str;
};

Utils.decodeURISegment = function (str) {
  if (typeof str !== 'string') return str;
  str = str.replace(/%3F/g, '?');
  // str = str.replace(/%3D/g, '=');
  // str = str.replace(/%26/g, '&');
  str = str.replace(/%2B/g, '+');
  str = str.replace(/%23/g, '#');
  // str = str.replace(/%40/g, '@');
  str = decodeURI(str);
  return str;
};

Utils.removeDocType = function (str) {
  if (typeof str === 'string' && str.lastIndexOf('/') > -1) {
    return str.substr(str.lastIndexOf('/') + 1);
  }
  return str;
};

// %253D%25team

/**
 * default set of prefixes that will be used for URL compression
 * @type {object}
 */
Utils.standard_urls = {
  rdf: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
  rdfs: 'http://www.w3.org/2000/01/rdf-schema#',
  xsd: 'http://www.w3.org/2001/XMLSchema#',
  xdd: 'http://terminusdb.com/schema/xdd#',
  owl: 'http://www.w3.org/2002/07/owl#',
  system: 'http://terminusdb.com/schema/system#',
  vio: 'http://terminusdb.com/schema/vio#',
  repo: 'http://terminusdb.com/schema/repository#',
  layer: 'http://terminusdb.com/schema/layer#',
  woql: 'http://terminusdb.com/schema/woql#',
  ref: 'http://terminusdb.com/schema/ref#',
  api: 'http://terminusdb.com/schema/api#',
};

/**
 * Encode document payload for GET
 * @param {string | object} payload
 * @returns {string}
 */
Utils.URIEncodePayload = function (payload) {
  if (typeof payload === 'string') return encodeURIComponent(payload);
  const payloadArr = [];
  for (const key of Object.keys(payload)) {
    if (typeof payload[key] === 'object') {
      for (const keyElement of Object.keys(payload[key])) {
        const valueElement = payload[key][keyElement];
        payloadArr.push(
          `${encodeURIComponent(keyElement)}=${encodeURIComponent(valueElement)}`,
        );
      }
    } else {
      payloadArr.push(`${encodeURIComponent(key)}=${encodeURIComponent(payload[key])}`);
    }
  }
  return payloadArr.join('&');
};

/**
 * Adds an entry to the list of known standard URL prefixes
 * @param {string} prefix
 * @param {string} url
 */
Utils.addURLPrefix = function (prefix, url) {
  this.standard_urls[prefix] = url;
};

/**
 * is the object empty?
 * returns true if the json object is empty
 * @param {object|array} [obj]
 * @returns {boolean}
 */
Utils.empty = function (obj) {
  // null and undefined are "empty"
  if (!obj) return true;
  // Assume if it has a length property with a non-zero value
  // that that property is correct.
  if (obj.length > 0) return false;
  if (obj.length === 0) return true;
  // Otherwise, does it have any properties of its own?
  // Note that this doesn't handle
  // toString and valueOf enumeration bugs in IE < 9
  // for (const key in obj) {
  if (typeof obj === 'object') {
    for (const key of Object.keys(obj)) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) return false;
    }
  }
  return true;
};

/**
 * Generates a unique node id
 * @param {string} [base]
 * @returns {string}
 */
Utils.genBNID = function (base) {
  base = base || '';
  const r = Math.random()
    .toString(36)
    .substring(7);
  const d = new Date();
  const bnid = `${base}${r}${d.getTime()}`;// `doc:${base}${r}${d.getTime()}`
  return bnid;
};

/**
 * Returns the shorthand version (compressed to prefix:id ) of a url or
 * false if there is none known for that URL
 * @param {object | string} link
 * @returns {string | boolean}
 */

Utils.getShorthand = function (link) {
  // eslint-disable-next-line prefer-destructuring
  if (typeof link === 'object' && link.length) link = link[0];
  if (link && typeof link === 'string') {
    for (const pref of Object.keys(this.standard_urls)) {
      const full = this.standard_urls[pref];
      if (link.substring(0, full.length) === full) {
        const sh = `${pref}:${link.substring(full.length)}`;
        return sh;
      }
    }
  }
  return false;
};

/**
 * Compares 2 IRIs for equality by checking compressed and expanded versions of both sides
 * @param {string} ida
 * @param {string} idb
 * @returns {boolean}
 */
Utils.compareIDs = function (ida, idb) {
  if (ida === idb) return true;
  if (this.unshorten(ida) === idb) return true;
  if (this.shorten(ida) === idb) return true;
  if (this.unshorten(ida) === this.unshorten(idb)) return true;
  return false;
};

/**
 * Shortens a URL to its compressed format - returns the full URL if not possible
 * @param {string} [url]
 * @param {string} [prefixes]
 * @returns {string | undefined}
 */
// we don't have any more visualize prefix
// terminusdb://layer/data/Layer_44ce76721ebe179fdf2c015b0d38eadfa49de3ba
// eslint-disable-next-line no-unused-vars
Utils.shorten = function (url, prefixes) {
  if (!url) return undefined;
  if (url.indexOf('#') !== -1) {
    const urlArr = url.split('#');
    return urlArr.pop();
  }
  if (url.indexOf('terminusdb://') !== -1) {
    const urlArr = url.split('/');
    return urlArr.pop();
  }
  return url;

  /* if (!url) return undefined
    if (typeof url === 'function') return undefined
    prefixes = prefixes || Utils.standard_urls
    for (const pref in prefixes) {
        if (prefixes[pref] === url.substring(0, prefixes[pref].length)) {
            return `${pref}:${url.substring(prefixes[pref].length)}`
        }
    }
    return url */
};

/**
 * Expands a URL to its full URL format - returns the passed string if not possible to expand
 * @param {string} [url]
 * @returns {string | undefined}
 */
Utils.unshorten = function (url) {
  if (!url) return undefined;
  if (this.validURL(url)) return url;
  if (!url) return url;
  const bits = url.split(':');
  if (bits[1]) {
    if (this.standard_urls[bits[0]]) {
      return this.standard_urls[bits[0]] + bits[1];
    }
  }
  return url;
};

/**
 * shortens a jsonld document to its prefixed form
 * @param {array|object|string} jsonld
 * @param {string} [prefixes]
 * @returns {string|array|object}
 */

Utils.json_shorten = function (jsonld, prefixes) {
  const shorten_json_val = (val, prefixes) => {
    if (Array.isArray(val)) {
      const nvals = [];
      for (let i = 0; i < val.length; i++) {
        nvals.push(shorten_json_val(val[i], prefixes));
      }
      return nvals;
    } if (typeof val === 'object') {
      return this.json_shorten(val, prefixes);
    } if (typeof val === 'string') {
      return this.shorten(val, prefixes);
    }
    return val;
  };
  prefixes = prefixes || jsonld['@context'];
  const nujson = {};
  for (const key in jsonld) {
    const nkey = key[0] === '@' ? key : this.shorten(key, prefixes);
    const nval = shorten_json_val(jsonld[key], prefixes);
    nujson[nkey] = nval;
  }
  return nujson;
};

/**
 * Unshortens a jsonld document to its full form
 * @param {array|object|string} jsonld
 * @param {string} [prefixes]
 * @returns {string|array|object}
 */

Utils.json_unshorten = function (jsonld, prefixes) {
  const unshorten_json_val = (val, prefixes) => {
    if (Array.isArray(val)) {
      const nvals = [];
      for (let i = 0; i < val.length; i++) {
        nvals.push(unshorten_json_val(val[i], prefixes));
      }
      return nvals;
    } if (typeof val === 'object') {
      return this.json_unshorten(val, prefixes);
    } if (typeof val === 'string') {
      return this.unshorten(val, prefixes);
    }
    return val;
  };
  prefixes = prefixes || jsonld['@context'];
  const nujson = {};
  for (const key in jsonld) {
    const nkey = key[0] === '@' ? key : this.unshorten(key, prefixes);
    const nval = unshorten_json_val(jsonld[key], prefixes);
    nujson[nkey] = nval;
  }
  return nujson;
};

/**
 * Tests a string to see if it is a valid URL -
 * Valid URLs are those that start with http:// or https://
 */
Utils.validURL = function (str) {
  if (str && typeof str !== 'string') str = `${str}`;
  if (str && (str.substring(0, 7) === 'http://' || str.substring(0, 8) === 'https://')) return true;
  return false;
};

/**
 * Tests a string to see if it is a valid URL -
 * Valid URLs are those that start with http:// or https://
 * @param {string} str
 * @param {string | object} [context]
 * @param {boolean} [allow_shorthand]
 * @returns {boolean}
 */
Utils.isIRI = function (str, context, allow_shorthand) {
  if (!str) return false;
  if (allow_shorthand && context && context[str.split(':')[0]]) return true;
  if (context) {
    for (pref in context) {
      if (str.substring(0, context[pref].length) === context[pref]) return true;
    }
  }
  const prot = str.split(':')[0];
  const valids = ['http', 'https', 'terminusdb'];
  if (valids.indexOf(prot) !== -1) return true;
  return false;
};

/**
 * Generates a text label from a URL
 * @param {string} url
 * @returns {string}
 */
Utils.labelFromURL = function (url) {
  let nurl = this.urlFragment(url);
  nurl = nurl || url;
  if (nurl.lastIndexOf('/') < nurl.length - 1) {
    nurl = nurl.substring(nurl.lastIndexOf('/') + 1);
  }
  nurl = nurl.replace(/_/g, ' ');
  return nurl.charAt(0).toUpperCase() + nurl.slice(1);
};

/**
 * Generates a text label from a URL
 */
Utils.labelFromVariable = function (v) {
  v = v.replace(/_/g, ' ');
  return v.charAt(0).toUpperCase() + v.slice(1);
};

/**
 * returns the fragment part of a URL (whether compressed or not)
 */
Utils.urlFragment = function (url) {
  url = typeof url !== 'string' ? window.location.href : url;
  let bits = url.split('#');
  if (bits.length <= 1) {
    if (!this.validURL(url)) {
      bits = url.split(':');
    }
  }
  if (bits.length >= 1) {
    const [, urlStr] = bits;

    if (urlStr) {
      const [baseUrl] = urlStr.split('?');
      url = baseUrl;
    }
  }
  return url;
};

/**
 * returns the last part of a URL after the last /
 */
Utils.lastURLBit = function (url) {
  url = typeof url === 'undefined' ? window.location.href : url;
  const [urlFirst] = url.split('#');
  const [urlTmp] = urlFirst.split('?');
  url = urlTmp.substring(url.lastIndexOf('/') + 1);
  return url;
};

/**
 * returns the a standard URL associated with a given prefix and extension
 */
Utils.getStdURL = function (pref, ext, url) {
  if (this.standard_urls[pref]) {
    if (url) {
      if (url === this.standard_urls[pref] + ext) return url;
    } else {
      return this.standard_urls[pref] + ext;
    }
  }
  return false;
};

/*
 * Utility function adds v: to variables...
 */
Utils.addNamespacesToVariables = function (vars) {
  const nvars = [];
  for (let i = 0; i < vars.length; i++) {
    if (vars[i]) nvars.push(this.addNamespaceToVariable(vars[i]));
  }
  return nvars;
};

Utils.addNamespaceToVariable = function (v) {
  if (typeof v === 'string' && v.substring(0, 2) !== 'v:') return `v:${v}`;
  return v;
};

/*
 * Utility function removes v: prefix from a variable...
 */
Utils.removeNamespaceFromVariable = function (mvar) {
  if (mvar.substring(0, 2) === 'v:') return mvar.substring(2);
  return mvar;
};

/*
 * Utility function removes v: prefix from an array of variables
 */
Utils.removeNamespacesFromVariables = function (vars) {
  const nvars = [];
  for (let i = 0; i < vars.length; i++) {
    nvars.push(this.removeNamespaceFromVariable(vars[i]));
  }
  return nvars;
};

/*
 * Utility function to extract a value from a config rule - if the value is a variable,
take the value of that variable instead
 */
Utils.getConfigValue = function (val, row) {
  if (typeof val === 'string') val = this.removeNamespaceFromVariable(val);
  if (typeof val === 'string' && row[val]) {
    const rad = row[val];
    if (rad && rad['@value']) return rad['@value'];
    return rad;
  }
  return val;
};

/**
 * TypeHelper bundles together utility functions dealing with datatypes
 */
Utils.TypeHelper = {};

/**
 * Returns true if the passed type is an xsd:string (compressed or not)
 */
Utils.TypeHelper.isStringType = function (stype) {
  if (stype === 'http://www.w3.org/2001/XMLSchema#string') return true;
  if (stype === 'xsd:string') return true;
  return false;
};

Utils.TypeHelper.isDatatype = function (stype) {
  const sh = Utils.shorten(stype);
  if ((sh && sh.substring(0, 4) === 'xsd:') || sh.substring(0, 4) === 'xdd:') return true;
  return false;
};

/**
 * Adds 3 order magnitude separators ( default ,) into big numbers for legibility
 */
Utils.TypeHelper.numberWithCommas = function (value, separator) {
  separator = separator || ',';
  if (value >= 1000 || value <= -1000) {
    const parts = value.toString().split('.');
    if (value <= -1000) parts[0] = parts[0].substring(1);
    parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, separator);
    if (value <= -1000) value = `-${parts.join('.')}`;
    else value = parts.join('.');
  }
  return value;
};

Utils.TypeHelper.formatBytes = function (bytes, decimals = 2) {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return `${parseFloat((bytes / k ** i).toFixed(dm))} ${sizes[i]}`;
};

/**
 * List of supported datatypes
 */
Utils.TypeHelper.datatypes = [
  'xdd:coordinate',
  'xdd:coordinatePolyline',
  'xdd:coordinatePolygon',
  'xdd:dateRange',
  'xdd:gYearRange',
  'xdd:integerRange',
  'xdd:decimalRange',
  'xdd:cc',
  'xdd:email',
  'xdd:html',
  'xdd:url',
  'xsd:anySimpleType',
  'xsd:string',
  'xsd:boolean',
  'xsd:decimal',
  'xsd:double',
  'xsd:float',
  'xsd:time',
  'xsd:date',
  'xsd:dateTime',
  'xsd:dateTimeStamp',
  'xsd:gYear',
  'xsd:gMonth',
  'xsd:gDay',
  'xsd:gYearMonth',
  'xsd:gMonthDay',
  'xsd:duration',
  'xsd:yearMonthDuration',
  'xsd:dayTimeDuration',
  'xsd:byte',
  'xsd:short',
  'xsd:integer',
  'xsd:long',
  'xsd:unsignedByte',
  'xsd:unsignedInt',
  'xsd:unsignedLong',
  'xsd:nonNegativeInteger',
  'xsd:positiveInteger',
  'xsd:negativeInteger',
  'xsd:nonPositiveInteger',
  'xsd:base64Binary',
  'xsd:anyURI',
  'xsd:language',
  'xsd:normalizedString',
  'xsd:token',
  'xsd:NMTOKEN',
  'xsd:Name',
  'xsd:NCName',
  'xsd:NOTATION',
  'xsd:QName',
  'xsd:ID',
  'xsd:IDREF',
  'xsd:ENTITY',
  'rdf:XMLLiteral',
  'rdf:PlainLiteral',
  'rdfs:Literal',
  'xdd:json',
];

Utils.TypeHelper.parseRangeValue = function (val, dividor) {
  dividor = dividor || ',';
  let vals = [];
  if (typeof val === 'object' && val.length) {
    vals = val;
  } else if (val) {
    if (typeof val !== 'string') {
      val = `${val}`;
    }
    if (val.length && val.charAt(0) === '[' && val.charAt(val.length - 1) === ']') {
      vals.push(val.substring(1, val.indexOf(dividor)));
      vals.push(val.substring(val.indexOf(dividor) + 1, val.length - 1));
    } else {
      vals.push(val);
    }
  }
  return vals;
};

/**
 * DateHelper bundles together utility functions dealing with xsd date types
 */
Utils.DateHelper = {};

/**
 * Takes an xsd time string and returns a structure {hour: HH, minute: MM,
 * second ss.ssssss, timezone: tz}
 */
Utils.DateHelper.parseXsdTime = function (val) {
  if (!val) return {};
  const tz = this.extractXsdTimezone(val);
  if (tz) {
    val = val.substring(0, val.length - tz.length);
  }
  const parsed = {
    hour: val.substring(0, 2),
    minute: val.substring(3, 5),
    second: val.substring(6),
    timezone: tz,
  };
  return parsed;
};

/**
 * Takes an xsd time string and returns a structure {year: [-]YYYY, month: MM, day: dd}
 */
Utils.DateHelper.parseXsdDate = function (val) {
  const tz = this.extractXsdTimezone(val);
  if (tz) {
    val = val.substring(0, val.length - tz.length);
  }
  let year;
  if (val.substring(0, 1) === '-') {
    year = val.substring(0, 5);
  } else {
    year = val.substring(0, 4);
  }
  let parsed;
  if (year && Math.abs(year) < 10000) {
    let month = val.substring(year.length + 1, year.length + 3);
    if (month) {
      month = parseInt(month, 10);
    } else return false;
    let day = val.substring(year.length + 4);
    if (day) day = parseInt(day, 10);
    else return false;
    parsed = {
      year,
      month,
      day,
      timezone: tz,
    };
  }
  return parsed;
};

/**
 * Parses a date string of type ty
 */
Utils.DateHelper.parseDate = function (ty, value) {
  let parsed;
  if (ty === 'xsd:date') {
    parsed = this.parseXsdDate(value);
  } else if (ty === 'xsd:time') {
    parsed = this.parseXsdTime(value);
  } else if (ty === 'xsd:dateTime') {
    parsed = this.parseXsdDateTime(value);
  } else if (ty === 'xsd:gYear') {
    parsed = { year: value };
  } else if (ty === 'xsd:gYearRange') {
    parsed = { year: value };
  } else if (ty === 'xsd:gMonth') {
    parsed = { month: value.substring(2) };
  } else if (ty === 'xsd:gDay') {
    parsed = { day: value };
  } else if (ty === 'xsd:gYearMonth') {
    const bits = value.split('-');
    while (bits.length < 2) bits.push('');
    parsed = { year: bits[0], month: bits[1] };
  } else if (ty === 'xsd:gMonthDay') {
    const bits = value.split('-');
    while (bits.length < 2) bits.push('');
    parsed = { month: bits[0], day: bits[1] };
  } else if (ty === 'xsd:dateTimeStamp') {
    parsed = this.parseXsdDateTime(value);
  }
  return parsed;
};

/**
 * adds appropriate padding to date type for xsd rules
 */
Utils.DateHelper.addXsdPadding = function (parsed) {
  const nparsed = {};
  if (typeof parsed.year !== 'undefined' && parsed.year !== false && parsed.year < 1000) {
    if (Math.abs(parsed.year) < 10) nparsed.year = parsed.year < 0 ? `-000${Math.abs(parsed.year)}` : `000${parsed.year}`;
    else if (Math.abs(parsed.year) < 100) nparsed.year = parsed.year < 0 ? `-00${Math.abs(parsed.year)}` : `00${parsed.year}`;
    else nparsed.year = parsed.year < 0 ? `-0${Math.abs(parsed.year)}` : `0${parsed.year}`;
  } else if (parsed.year) {
    nparsed.year = parsed.year;
  }
  if (typeof parsed.month !== 'undefined' && parsed.month !== false && parsed.month < 10) {
    nparsed.month = `0${parsed.month}`;
  } else if (parsed.month) {
    nparsed.month = parsed.month;
  }
  if (typeof parsed.day !== 'undefined' && parsed.day !== false && parsed.day < 10) {
    nparsed.day = `0${parsed.day}`;
  } else if (parsed.day) {
    nparsed.day = parsed.day;
  }
  if (typeof parsed.hour !== 'undefined' && parsed.hour !== false && parsed.hour < 10) {
    nparsed.hour = `0${parsed.hour}`;
  } else if (parsed.hour) {
    nparsed.hour = parsed.hour;
  }
  if (typeof parsed.minute !== 'undefined' && parsed.minute !== false && parsed.minute < 10) {
    nparsed.minute = `0${parsed.minute}`;
  } else if (parsed.minute) {
    nparsed.minute = parsed.minute;
  }
  if (typeof parsed.second !== 'undefined' && parsed.second !== false && parsed.second < 10) {
    nparsed.second = `0${parsed.second}`;
  } else if (parsed.second) {
    nparsed.second = parsed.second;
  }
  return nparsed;
};

/**
 * generates an xsd string of type ty for the passed parsed structure (year, month, day, hour,
 * minute, second, timezone)
 */
Utils.DateHelper.xsdFromParsed = function (parsed, ty) {
  const xparsed = this.addXsdPadding(parsed);
  let ret;
  if (ty === 'xsd:gYear') {
    ret = xparsed.year ? xparsed.year : false;
  } else if (ty === 'xsd:time') {
    return xparsed.hour && xparsed.minute && xparsed.second
      ? `${xparsed.hour}:${xparsed.minute}:${xparsed.second}`
      : false;
  } else if (ty === 'xsd:date') {
    return xparsed.year && xparsed.month && xparsed.day
      ? `${xparsed.year}-${xparsed.month}-${xparsed.day}`
      : false;
  } else if (ty === 'xsd:dateTime' || ty === 'xsd:dateTimeStamp') {
    ret = xparsed.year && xparsed.month && xparsed.day
      ? `${xparsed.year}-${xparsed.month}-${xparsed.day}T`
      : false;
    if (ret) {
      ret += `${xparsed.hour ? xparsed.hour : '12'}:${
        xparsed.minute ? xparsed.minute : '00'
      }:${xparsed.second ? xparsed.second : '00'}`;
    }
  } else if (ty === 'xsd:gMonth') {
    ret = xparsed.month ? `--${xparsed.month}` : false;
  } else if (ty === 'xsd:gDay') {
    ret = xparsed.day ? `---${xparsed.day}` : false;
  } else if (ty === 'xsd:gYearMonth') {
    ret = xparsed.year && xparsed.month ? `${xparsed.year}-${xparsed.month}` : false;
  } else if (ty === 'xsd:gMonthDay') {
    ret = xparsed.day && xparsed.month ? `--${xparsed.month}-${xparsed.day}` : false;
  }
  if (xparsed.timezone) {
    ret += xparsed.timezone;
  }
  return ret;
};

/**
 * Converts between a unix timestamp and a parsed structure
 */
Utils.DateHelper.convertTimestampToXsd = function (val) {
  const a = new Date(val * 1000);
  const parsed = {
    year: a.getFullYear(),
    month: a.getMonth() + 1,
    day: a.getDate(),
    hour: a.getHours(),
    minute: a.getMinutes(),
    second: a.getSeconds(),
  };
  return parsed;
};

/**
 * Parses an xsd date time into a structure
 */
Utils.DateHelper.parseXsdDateTime = function (val) {
  if (!val) return {};
  if (typeof val === 'number') {
    return this.convertTimestampToXsd(val);
  }
  const tz = this.extractXsdTimezone(val);
  if (tz) {
    val = val.substring(0, val.length - tz.length);
  }
  const datetime = this.parseXsdDate(val);
  const ptime = this.parseXsdTime(val.substring(val.indexOf('T') + 1));

  for (const i of Object.keys(ptime)) {
    datetime[i] = ptime[i];
  }
  datetime.timezone = tz;
  return datetime;
};

/**
 * Extracts the timezone data from an xsd date string
 */
Utils.DateHelper.extractXsdTimezone = function (val) {
  if (typeof val === 'string' && val.endsWith('Z')) {
    return 'Z';
  }
  if (typeof val === 'string' && (val.charAt(val.length - 6) === '+' || val.charAt(val.length - 6) === '-')) {
    val.substring(val.length - 6);
  }
  return false;
};

module.exports = Utils;


/***/ }),

/***/ 2998:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* eslint-disable no-underscore-dangle */
/* eslint-disable no-use-before-define */
/// /@ts-check
const Config = __nccwpck_require__(9066);
// eslint-disable-next-line no-unused-vars
const WOQLChart = __nccwpck_require__(3132);

function WOQLChartConfig() {
  Config.ViewConfig.call(this);
  this.type = 'chart';
}

Object.setPrototypeOf(WOQLChartConfig.prototype, Config.ViewConfig.prototype);

WOQLChartConfig.prototype.prettyPrint = function () {
  let str = 'view = View.chart();\n';
  // eslint-disable-next-line no-plusplus
  for (let i = 0; i < this.rules.length; i++) {
    str += `view.${this.rules[i].prettyPrint()}\n`;
  }
  if (typeof this.margin() !== 'undefined') {
    str += `view.margin(${this.margin()})\n`;
  }
  if (typeof this.title() !== 'undefined') {
    str += `view.title('${this.title()}')\n`;
  }
  if (typeof this.description() !== 'undefined') {
    str += `view.description('${this.description()}')\n`;
  }
  if (typeof this.layout() !== 'undefined') {
    str += `view.layout('${this.layout()}')\n`;
  }
  if (typeof this.align() !== 'undefined') {
    str += `view.align('${this.align()}')\n`;
  }

  str += this.getBasicPrettyPrint();
  return str;
};

WOQLChartConfig.prototype.json = function () {
  /*
     *general properties
     */
  const conf = {};
  if (typeof this.margin() !== 'undefined') {
    conf.margin = this.margin();
  }
  if (typeof this.title() !== 'undefined') {
    conf.title = this.title();
  }
  if (typeof this.description() !== 'undefined') {
    conf.description = this.description();
  }
  if (typeof this.layout() !== 'undefined') {
    conf.layout = this.layout();
  }
  if (typeof this.align() !== 'undefined') {
    conf.align = this.align();
  }

  const mj = { chart: conf, rules: this.getRulesJSON() };
  return mj;
};

WOQLChartConfig.prototype.loadJSON = function (config, rules) {
  this.loadBasicJSON(config);
  const jr = [];
  // eslint-disable-next-line no-plusplus
  for (let i = 0; i < rules.length; i++) {
    const nr = new WOQLChartRule();
    nr.json(rules[i]);
    jr.push(nr);
  }
  this.rules = jr;
  if (typeof config.margin !== 'undefined') {
    this.margin(config.margin);
  }
  if (typeof config.title !== 'undefined') {
    this.title(config.title);
  }
  if (typeof config.description !== 'undefined') {
    this.description(config.description);
  }
  if (typeof config.layout !== 'undefined') {
    this.layout(config.layout);
  }
  if (typeof config.align !== 'undefined') {
    this.align(config.align);
  }
};

WOQLChartConfig.prototype.title = function (title) {
  if (typeof title === 'undefined') {
    return this._title;
  }
  this._title = title;
  return this;
};

WOQLChartConfig.prototype.description = function (description) {
  if (description) {
    this._description = description;
    return this;
  }
  return this._description;
};

// legend layout "vertical" | "horizontal"
WOQLChartConfig.prototype.layout = function (layout) {
  if (layout) {
    this._layout = layout;
    return this;
  }
  return this._layout;
};
// legend align'left', 'center', 'right'
WOQLChartConfig.prototype.align = function (align) {
  if (align) {
    this._align = align;
    return this;
  }
  return this._align;
};
// default is { top: 10, right: 30, left: 0, bottom: 80 }
WOQLChartConfig.prototype.margin = function (marginObj) {
  if (marginObj) {
    this._margin = marginObj;
    return this;
  }

  return this._margin;
};

WOQLChartConfig.prototype.create = function (client) {
  const wqt = new WOQLChartConfig(client, this);
  return wqt;
};

/*
{"XAxis":{dataKey:"date_i",type:'number'}
            ,"chartObj":
            [{'label':'Confident','dataKey':'conf',"chartType":"Area",
            "style":{"stroke":"#82ca9d", "fillOpacity":1, "fill":"#82ca9d"}},
              {'label':'Predictions','dataKey':'predictions',"chartType":"Line",
              "style":{"strokeWidth":2, "stroke":"#ff8000"}},
              {'label':'Picks','dataKey':'picks',"chartType":"Point","style":
              {"stroke": '#8884d8', "fill": '#8884d8'}},
              {'label':'Stock','dataKey':'stock',"chartType":"Line","style":
              {"stroke": '#0000ff', "fill": '#0000ff'}}]}

{"XAxis":{dataKey:"v:Date","label":{rotate:"-50"}},"chartObj":
                [{'dot':true, 'label':'Quantity','dataKey':'v:Quantity',"chartType":"Line",
                  "style": {"stroke": '#FF9800', "fill": '#FF9800'}}]
              }
*/

WOQLChartConfig.prototype.xAxis = function (...vars) {
  const woqlRule = new WOQLChartRule().scope('XAxis');
  woqlRule.setVariables(vars);
  this.rules.push(woqlRule);
  return woqlRule;
};

WOQLChartConfig.prototype.legend = function (...vars) {
  const woqlRule = new WOQLChartRule().scope('Legend');
  woqlRule.setVariables(vars);
  this.rules.push(woqlRule);
  return woqlRule;
};

WOQLChartConfig.prototype.yAxis = function (...vars) {
  const woqlRule = new WOQLChartRule().scope('YAxis');
  woqlRule.setVariables(vars);
  this.rules.push(woqlRule);
  return woqlRule;
};

WOQLChartConfig.prototype.bar = function (...vars) {
  const woqlRule = new WOQLChartRule().scope('Bar');
  woqlRule.setVariables(vars);
  this.rules.push(woqlRule);
  return woqlRule;
};

WOQLChartConfig.prototype.line = function (...vars) {
  const woqlRule = new WOQLChartRule().scope('Line');
  woqlRule.setVariables(vars);
  this.rules.push(woqlRule);
  return woqlRule;
};

WOQLChartConfig.prototype.point = function (...vars) {
  const woqlRule = new WOQLChartRule().scope('Point');
  woqlRule.setVariables(vars);
  this.rules.push(woqlRule);
  return woqlRule;
};

WOQLChartConfig.prototype.area = function (...vars) {
  const woqlRule = new WOQLChartRule().scope('Area');
  woqlRule.setVariables(vars);
  this.rules.push(woqlRule);
  return woqlRule;
};

// fillOpacity
/**
 *
 * @param {Chart} scope
 */
function WOQLChartRule() {
  Config.WOQLViewRule.call(this);
}

Object.setPrototypeOf(WOQLChartRule.prototype, Config.WOQLViewRule.prototype);

WOQLChartRule.prototype.style = function (key, value) {
  if (value) {
    this.rule[key] = value;
    return this;
  }
  return this.rule[key];
};

WOQLChartRule.prototype.label = function (label) {
  if (label) {
    this.rule.label = label;
    return this;
  }
  return this.rule.label;
};

/*
 *line is the default value
 * 'line' | 'square' | 'rect'| 'circle' | 'cross' | 'diamond' | 'square' | 'star' |
 * 'triangle' | 'wye' | 'none'
 */

WOQLChartRule.prototype.legendType = function (legendType) {
  if (legendType) {
    this.rule.legendType = legendType;
    return this;
  }
  return this.rule.legendType;
};

WOQLChartRule.prototype.fillOpacity = function (fillOpacity) {
  if (fillOpacity || fillOpacity === 0) {
    this.rule.fillOpacity = fillOpacity;
    return this;
  }
  return this.rule.fillOpacity;
};

WOQLChartRule.prototype.fill = function (color) {
  if (color) {
    this.rule.fill = color;
    return this;
  }
  return this.rule.fill;
};

WOQLChartRule.prototype.stroke = function (color) {
  if (color) {
    this.rule.stroke = color;
    return this;
  }
  return this.rule.stroke;
};

WOQLChartRule.prototype.strokeWidth = function (size) {
  if (typeof size !== 'undefined') {
    this.rule.strokeWidth = size;
    return this;
  }
  return this.rule.strokeWidth;
};

WOQLChartRule.prototype.dot = function (isVisible) {
  if (typeof isVisible !== 'undefined') {
    this.rule.dot = isVisible;
    return this;
  }
  return this.rule.dot;
};

WOQLChartRule.prototype.labelRotate = function (angle) {
  if (angle !== undefined) {
    this.rule.labelRotate = angle;
    return this;
  }
  return this.rule.labelRotate;
};

// Specify the padding of x-axis. DEFAULT: { left: 0, right: 0 }
WOQLChartRule.prototype.padding = function (paddingObj) {
  if (paddingObj) {
    this.rule.padding = paddingObj;
    return this;
  }

  return this.rule.padding;
};

/*
 *
 */

WOQLChartRule.prototype.labelDateInput = function (labelDateInput) {
  if (labelDateInput) {
    this.rule.labelDateInput = labelDateInput;
    return this;
  }
  return this.rule.labelDateInput;
};

/*
 * output date example 'YYYY-MM-DD' : 2020:03:11 or ''YYYY [text] YYYY',  2020 mytext 2020'
 */

WOQLChartRule.prototype.labelDateOutput = function (labelDateOutput) {
  if (labelDateOutput) {
    this.rule.labelDateOutput = labelDateOutput;
    return this;
  }
  return this.rule.labelDateOutput;
};

WOQLChartRule.prototype.stackId = function (stackId) {
  if (stackId) {
    this.rule.stackId = stackId;
    return this;
  }
  return this.rule.stackId;
};

/*
 * The type of xAxis 'number' | 'category' default is 'category'
 * The type of yAxis 'number' | 'category' default is 'number'
 * The type of line chart 'basis'|'basisClosed'|'basisOpen'|'linear'|'linearClosed'|'natural'|
 * 'monotoneX'|'monotoneY'|'monotone' | 'step' | 'stepBefore' | 'stepAfter' |
 */

WOQLChartRule.prototype.type = function (type) {
  if (type) {
    this.rule.type = type;
    return this;
  }
  return this.rule.type;
};
/*
 * works only if type is number
 * domainArr =[min,max];
 */
WOQLChartRule.prototype.axisDomain = function (domainArr) {
  if (domainArr) {
    this.rule.domain = domainArr;
    return this;
  }
  return this.rule.domain;
};

/*
 *
 * @param {string} name of the variable for the custom color
 */

WOQLChartRule.prototype.colorEntry = function (propValue) {
  if (propValue) {
    this.rule.colorEntry = propValue;
    return this;
  }
  return this.rule.colorEntry;
};

/*
 *
 * @param {object} an object of possible value and color {"value1":"#ff0000"...}
 */

WOQLChartRule.prototype.customColors = function (colorsObj) {
  if (colorsObj) {
    this.rule.customColors = colorsObj;
    return this;
  }
  return this.rule.customColors;
};

/*
 * @param {array} payload array of the object for descrive the legend
 [{value:"legend label",color:"#ff0000",type:"rect","id":'element id'}]
 */

WOQLChartRule.prototype.payload = function (payloadArr) {
  if (payloadArr) {
    this.rule.payload = payloadArr;
    return this;
  }
  return this.rule.payload;
};

WOQLChartRule.prototype.barSize = function (barSize) {
  if (barSize) {
    this.rule.barSize = barSize;
    return this;
  }
  return this.rule.barSize;
};

module.exports = WOQLChartConfig;


/***/ }),

/***/ 321:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* eslint-disable no-param-reassign */
/* eslint-disable no-use-before-define */
const Config = __nccwpck_require__(9066);
const WOQLChooser = __nccwpck_require__(9494);
const UTILS = __nccwpck_require__(4948);

function WOQLChooserConfig() {
  Config.ViewConfig.call(this);
  this.type = 'chooser';
}

Object.setPrototypeOf(WOQLChooserConfig.prototype, Config.ViewConfig.prototype);

WOQLChooserConfig.prototype.create = function (client) {
  const wqt = new WOQLChooser(client, this);
  return wqt;
};

WOQLChooserConfig.prototype.prettyPrint = function () {
  let str = 'view = View.chooser();\n';
  str += this.getBasicPrettyPrint();
  if (typeof this.change() !== 'undefined') {
    str += `view.change(${this.change()})\n`;
  }
  if (typeof this.show_empty() !== 'undefined') {
    str += `view.show_empty('${this.show_empty()}')\n`;
  }
  if (typeof this.values() !== 'undefined') {
    str += `view.values('${UTILS.removeNamespaceFromVariable(this.values())}')\n`;
  }
  if (typeof this.labels() !== 'undefined') {
    str += `view.labels('${UTILS.removeNamespaceFromVariable(this.labels())}')\n`;
  }
  if (typeof this.titles() !== 'undefined') {
    str += `view.titles('${UTILS.removeNamespaceFromVariable(this.titles())}')\n`;
  }
  if (typeof this.sort() !== 'undefined') {
    str += `view.sort(${this.sort()})\n`;
  }
  if (typeof this.direction() !== 'undefined') {
    str += `view.direction('${this.direction()}')\n`;
  }
  // eslint-disable-next-line no-plusplus
  for (let i = 0; i < this.rules.length; i++) {
    str += `view.${this.rules[i].prettyPrint('chooser')}\n`;
  }
  return str;
};

WOQLChooserConfig.prototype.json = function () {
  const conf = this.getBasicJSON();
  if (typeof this.change() !== 'undefined') {
    conf.change = this.change();
  }
  if (typeof this.show_empty() !== 'undefined') {
    conf.show_empty = this.show_empty();
  }
  if (typeof this.values() !== 'undefined') {
    conf.values = this.values();
  }
  if (typeof this.labels() !== 'undefined') {
    conf.labels = this.labels();
  }
  if (typeof this.titles() !== 'undefined') {
    conf.titles = this.titles();
  }
  if (typeof this.sort() !== 'undefined') {
    conf.sort = this.sort();
  }
  if (typeof this.direction() !== 'undefined') {
    conf.direction = this.direction();
  }
  const mj = { chooser: conf, rules: this.getRulesJSON() };
  return mj;
};

WOQLChooserConfig.prototype.loadJSON = function (config, rules) {
  const jr = [];
  // eslint-disable-next-line no-plusplus
  for (let i = 0; i < rules.length; i++) {
    const nr = new WOQLChooserRule();
    nr.json(rules[i]);
    jr.push(nr);
  }
  this.rules = jr;
  this.loadBasicJSON(config);
  if (typeof config.change !== 'undefined') {
    this.change(config.change);
  }
  if (typeof config.show_empty !== 'undefined') {
    this.show_empty(config.show_empty);
  }
  if (typeof config.values !== 'undefined') {
    this.values(config.values);
  }
  if (typeof config.labels !== 'undefined') {
    this.labels(config.labels);
  }
  if (typeof config.titles !== 'undefined') {
    this.titles(config.titles);
  }
  if (typeof config.sort !== 'undefined') {
    this.sort(config.sort);
  }
  if (typeof config.direction !== 'undefined') {
    this.direction(config.direction);
  }
};

WOQLChooserConfig.prototype.change = function (v) {
  if (typeof v !== 'undefined') {
    this.onChange = v;
    return this;
  }
  return this.onChange;
};

WOQLChooserConfig.prototype.show_empty = function (p) {
  if (typeof p !== 'undefined') {
    this.placeholder = p;
    return this;
  }
  return this.placeholder;
};

WOQLChooserConfig.prototype.rule = function (v) {
  const nr = new WOQLChooserRule().scope('row');
  this.rules.push(nr);
  if (v) nr.vars(v);
  // if(v) nr.v(v);
  return nr;
};

WOQLChooserConfig.prototype.values = function (v) {
  if (typeof v !== 'undefined') {
    if (v.substring(0, 2) === 'v:') v = v.substring(2);
    this.value_variable = v;
    return this;
  }
  return this.value_variable;
};

WOQLChooserConfig.prototype.labels = function (v) {
  if (v) {
    if (v.substring(0, 2) === 'v:') v = v.substring(2);
    this.label_variable = v;
    return this;
  }
  return this.label_variable;
};

WOQLChooserConfig.prototype.titles = function (v) {
  if (v) {
    if (v.substring(0, 2) === 'v:') v = v.substring(2);
    this.title_variable = v;
    return this;
  }
  return this.title_variable;
};

WOQLChooserConfig.prototype.sort = function (v) {
  if (v) {
    if (v.substring(0, 2) === 'v:') v = v.substring(2);
    this.sort_variable = v;
    return this;
  }
  return this.sort_variable;
};

WOQLChooserConfig.prototype.direction = function (v) {
  if (v) {
    this.sort_direction = v;
    return this;
  }
  return this.sort_direction;
};

function WOQLChooserRule(scope) {
  Config.WOQLViewRule.call(this, scope);
}

Object.setPrototypeOf(WOQLChooserRule.prototype, Config.WOQLViewRule.prototype);

WOQLChooserRule.prototype.label = function (l) {
  if (l) {
    this.rule.label = l;
    return this;
  }
  return this.rule.label;
};

WOQLChooserRule.prototype.title = function (l) {
  if (l) {
    this.rule.title = l;
    return this;
  }
  return this.rule.title;
};

WOQLChooserRule.prototype.values = function (l) {
  if (l) {
    this.rule.values = l;
    return this;
  }
  return this.rule.values;
};

WOQLChooserRule.prototype.selected = function (s) {
  if (typeof s !== 'undefined') {
    this.rule.selected = s;
    return this;
  }
  return this.rule.selected;
};

WOQLChooserRule.prototype.prettyPrint = function () {
  // eslint-disable-next-line no-undef
  let str = WOQLViewRule.prototype.prettyPrint.apply(this);
  if (typeof this.selected() !== 'undefined') {
    str += `.selected(${this.selected()})`;
  }
  if (typeof this.label() !== 'undefined') {
    str += `.label("${this.label()}")`;
  }
  if (typeof this.title() !== 'undefined') {
    str += `.title("${this.title()}")`;
  }
  if (typeof this.values() !== 'undefined') {
    str += `.values("${this.values()}")`;
  }
  return str;
};

module.exports = WOQLChooserConfig;


/***/ }),

/***/ 9242:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* eslint-disable no-unused-vars */
/* eslint-disable consistent-return */
/* eslint-disable no-unused-expressions */
/* eslint-disable no-param-reassign */
const ObjectFrame = __nccwpck_require__(5074);
const FrameConfig = __nccwpck_require__(1815);
const FrameHelper = __nccwpck_require__(4948);

/**
 * @file Document Frame
 * @license Apache Version 2
 */

function DocumentFrame(client, config) {
  this.client = client;
  this.config = (config || new FrameConfig());
  this.load_schema = false;
}

DocumentFrame.prototype.options = function (opts) {
  this.config = opts;
  return this;
};

DocumentFrame.prototype.db = function (dburl) {
  this.client.db(dburl);
  return this;
};

/**
 *  @param {String} url - loads the document frame from the document API in frame form
 *  - loads the frame encapsulates more meta-data in the json and reduces the
 * number of api calls we need to make
 *  @returns {Promise}
 */
DocumentFrame.prototype.loadDocument = function (url, encoding) {
  encoding = encoding || 'system:frame';
  return this.client.getDocument(url, { 'system:encoding': encoding })
    .then((response) => {
      (encoding === 'system:frame' ? this.loadDataFrames(response) : this.loadJSON(response));
    });
};

DocumentFrame.prototype.loadSchema = function (cls, dbURL) {
  const ncls = FrameHelper.unshorten(cls);
  return this.client.getClassFrame(dbURL, ncls)
    .then((response) => this.loadSchemaFrames(response, ncls));
};

/**
 *  @param {String} url - loads the document frame along with its class frame
 *  @param {String} [cls] - optional class id of the document - if absent class frames
 * will be loaded from the document class once it is loaded
 *  @returns {Promise}
 *  - loads a document frame and it's class frame in unison
 */

DocumentFrame.prototype.loadComplete = function (url, cls) {
  if (cls) {
    return Promise.all([this.loadDocument(url), this.loadDocumentSchema(cls)]);
  }

  return this.loadDocument(url)
    .then(() => {
      this.loadSchema(this.document.cls);
    });
};

DocumentFrame.prototype.loadJSON = function (json, type) {
  if (this.docid) {
    return this.loadDocument(this.docid);
  }
  if (this.clsid) {
    return this.loadDocumentSchema(this.clsid);
  }
  // eslint-disable-next-line no-console
  console.error('Either docid or clid must be set before load is called');
};

DocumentFrame.prototype.loadData = function (jsonld, cls, classframes) {
  if (!cls) {
    if (this.document) cls = this.document.cls;
    else if (jsonld && jsonld['@type']) {
      cls = jsonld['@type'];
    }
  }
  if (cls) {
    if (!this.document) {
      this.document = new ObjectFrame(cls, jsonld, classframes);
    } else {
      this.document.loadJSONLDDocument(jsonld);
    }
  } else {
    // eslint-disable-next-line no-console
    console.log('Missing Class Failed to add dataframes due to missing class');
  }
};

DocumentFrame.prototype.load = function (classframes, doc) {
  this.document = new ObjectFrame(doc['@type'], doc, classframes);
};

DocumentFrame.prototype.loadSchemaFrames = function (classframes, cls) {
  if (!cls) {
    if (classframes && classframes.length && classframes[0] && classframes[0].domain) {
      cls = classframes[0].domain;
    }
  }
  if (cls) {
    if (!this.document) {
      this.document = new ObjectFrame(cls);
    }
    if (classframes) {
      this.document.loadClassFrames(classframes);
      if (!this.document.subjid) {
        this.document.newDoc = true;
        this.document.fillFromSchema(FrameHelper.genBNID(`${FrameHelper.urlFragment(cls)}_`));
      }
    }
  } else {
    // eslint-disable-next-line no-console
    console.log('Missing Class', 'Failed to add class frames due to missing both class and classframes');
  }
};

DocumentFrame.prototype.filterFrame = function (loadRenderer) {
  const myfilt = function (frame, rule) {
    if (typeof rule.render() !== 'undefined') {
      frame.render = rule.render();
    }
    /* else {
    if(rule.renderer()){
      var renderer = loadRenderer(rule.renderer(), frame, rule.args);
    }
    if(renderer){
      frame.render = function(fframe){
        return renderer(fframe);
      }
    }
  } */
    if (rule.compare()) {
      frame.compare = rule.compare();
    }
    if (rule.errors()) {
      frame.errors = frame.errors ? frame.errors.concat(rule.errors()) : rule.errors();
    } else if (rule.errors() === false) delete frame.errors;
  };
  this.applyRules(false, false, myfilt);
};

DocumentFrame.prototype.setErrors = function (errors, frameconf) {
  this.clearErrors(frameconf);
  // eslint-disable-next-line no-plusplus
  for (let i = 0; i < errors.length; i++) {
    // eslint-disable-next-line no-use-before-define
    addRuleForVio(frameconf, errors[i]);
  }
  const myfilt = function (frame, rule) {
    if (rule.errors()) {
      frame.errors = frame.errors ? frame.errors.concat(rule.errors()) : rule.errors();
    }
  };
  this.applyRules(false, frameconf, myfilt);
};

DocumentFrame.prototype.clearErrors = function (frameconf) {
  frameconf.all();
  const myfilt = function (frame, rule) {
    if (frame.errors) delete (frame.errors);
  };
  this.applyRules(false, frameconf, myfilt);
  frameconf.rules = [];
};

function addRuleForVio(docview, error) {
  const prop = (error['vio:property'] ? error['vio:property']['@value'] : false);
  const subj = (error['vio:subject'] ? error['vio:subject']['@value'] : false);
  const msg = (error['vio:message'] ? error['vio:message']['@value'] : false);
  let val = (error['api:value'] ? error['api:value'] : false);
  if (val && val[0] === '"' && val[val.length - 1] === '"') val = val.substring(1, val.length - 1);
  const type = (error['api:type'] ? error['api:type'] : false);
  if (type && val) { // api:BadCast
    docview.data().value(val).type(type).errors([error]);
  }
  if (prop && subj) { // untypedInstanceViolation
    const shrt = FrameHelper.shorten(subj);
    if (shrt.substring(0, 5) === 'woql:') shrt === shrt.substring(5);
    docview.data().property(prop).value(shrt, subj).errors([error]);
  }
}

/* "
 * adds render and compare functions to object frames
 */
DocumentFrame.prototype.applyRules = function (doc, config, mymatch) {
  doc = doc || this.document;
  if (!doc) return;
  config = (config || this.config);
  const onmatch = function (frame, rule) {
    config.setFrameDisplayOptions(frame, rule);
    if (mymatch) mymatch(frame, rule);
  };
  doc.mfilter(config.rules, onmatch);
};

module.exports = DocumentFrame;


/***/ }),

/***/ 1815:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* eslint-disable no-undef */
/* eslint-disable no-redeclare */
/* eslint-disable block-scoped-var */
/* eslint-disable no-var */
/* eslint-disable vars-on-top */
/* eslint-disable guard-for-in */
/* eslint-disable no-restricted-syntax */
/* eslint-disable no-param-reassign */
/* eslint-disable no-use-before-define */
/* eslint-disable no-plusplus */
/* eslint-disable import/extensions */
const Config = __nccwpck_require__(9066);
const { FrameRule } = __nccwpck_require__(7700);
const DocumentFrame = __nccwpck_require__(9242);

/**
 * @file Frame Config
 * @license Apache Version 2
 */
function FrameConfig() {
  Config.ViewConfig.call(this);
  this.type = 'document';
}

Object.setPrototypeOf(FrameConfig.prototype, Config.ViewConfig.prototype);

FrameConfig.prototype.create = function (client) {
  const tf = new DocumentFrame(client, this);
  return tf;
};

FrameConfig.prototype.prettyPrint = function () {
  let str = 'view = View.document();\n';
  str += this.getBasicPrettyPrint();
  if (typeof this.load_schema() !== 'undefined') {
    str += `view.load_schema(${this.load_schema()})\n`;
  }
  for (let i = 0; i < this.rules.length; i++) {
    str += `view.${this.rules[i].prettyPrint()}\n`;
  }
  return str;
};

FrameConfig.prototype.json = function () {
  const conf = this.getBasicJSON();
  if (typeof this.load_schema() !== 'undefined') {
    conf.load_schema = this.load_schema();
  }
  const mj = { frame: conf, rules: this.getRulesJSON() };
  return mj;
};

FrameConfig.prototype.loadJSON = function (config, rules) {
  const jr = [];
  for (let i = 0; i < rules.length; i++) {
    const nr = new DocumentRule();
    nr.json(rules[i]);
    jr.push(nr);
  }
  this.rules = jr;
  this.loadBasicJSON(config);
  if (typeof config.load_schema !== 'undefined') {
    this.load_schema(config.load_schema);
  }
  return this;
};

FrameConfig.prototype.json_rules = function () {
  const jr = [];
  for (let i = 0; i < this.rules.length; i++) {
    jr.push(this.rules[i].json());
  }
  return jr;
};

FrameConfig.prototype.load_schema = function (tf) {
  if (typeof tf === 'undefined') return this.get_schema;
  this.get_schema = tf;
  return this;
};

FrameConfig.prototype.show_all = function (r) {
  this.all().renderer(r);
  return this;
};

FrameConfig.prototype.show_parts = function (o, p, d) {
  this.object().renderer(o);
  this.property().renderer(p);
  this.data().renderer(d);
  return this;
};

FrameConfig.prototype.object = function () {
  const fp = new DocumentRule().scope('object');
  this.rules.push(fp);
  return fp;
};

FrameConfig.prototype.property = function () {
  const fp = new DocumentRule().scope('property');
  this.rules.push(fp);
  return fp;
};

FrameConfig.prototype.scope = function (scope) {
  const fp = new DocumentRule().scope(scope);
  this.rules.push(fp);
  return fp;
};

FrameConfig.prototype.data = function () {
  const fp = new DocumentRule().scope('data');
  this.rules.push(fp);
  return fp;
};

FrameConfig.prototype.all = function () {
  const fp = new DocumentRule().scope('*');
  this.rules.push(fp);
  return fp;
};

/**
 * Attaches display options to frames from matching rules
 */
FrameConfig.prototype.setFrameDisplayOptions = function (frame, rule) {
  if (typeof frame.display_options === 'undefined') frame.display_options = {};
  if (typeof rule.mode() !== 'undefined') { frame.display_options.mode = rule.mode(); }
  if (typeof rule.view() !== 'undefined') frame.display_options.view = rule.view();
  if (typeof rule.showDisabledButtons() !== 'undefined') frame.display_options.show_disabled_buttons = rule.showDisabledButtons();
  if (typeof rule.hidden() !== 'undefined') frame.display_options.hidden = rule.hidden();
  if (typeof rule.collapse() !== 'undefined') frame.display_options.collapse = rule.collapse();
  if (typeof rule.style() !== 'undefined') frame.display_options.style = rule.style();
  if (typeof rule.headerStyle() !== 'undefined') frame.display_options.header_style = rule.headerStyle();
  if (typeof rule.features() !== 'undefined') { frame.display_options.features = this.setFrameFeatures(frame.display_options.features, rule.features()); }
  if (typeof rule.headerFeatures() !== 'undefined') frame.display_options.header_features = this.setFrameFeatures(frame.display_options.header_features, rule.headerFeatures());
  if (typeof rule.header() !== 'undefined') frame.display_options.header = rule.header();
  if (typeof rule.showEmpty() !== 'undefined') frame.display_options.show_empty = rule.showEmpty();
  if (typeof rule.dataviewer() !== 'undefined') frame.display_options.dataviewer = rule.dataviewer();
  if (typeof rule.args() !== 'undefined') frame.display_options.args = this.setFrameArgs(frame.display_options.args, rule.args());
};

/*
Consolidates properties of features sent in in different rules
*/
FrameConfig.prototype.setFrameFeatures = function (existing, fresh) {
  // preserve order of existing
  if (!existing || !existing.length) return fresh;
  if (!fresh || !fresh.length) return existing;
  const got = [];
  for (let i = 0; i < existing.length; i++) {
    const key = (typeof existing[i] === 'string' ? existing[i] : Object.keys(existing[i])[0]);
    got.push(key);
  }
  for (let j = 0; j < fresh.length; j++) {
    const fkey = (typeof fresh[j] === 'string' ? fresh[j] : Object.keys(fresh[j])[0]);
    const rep = got.indexOf(fkey);
    if (rep === -1) existing.push(fresh[j]);
    else if (typeof fresh[j] === 'object') {
      const val = existing[rep];
      if (typeof val === 'string') existing[rep] = fresh[j];
      else if (typeof val === 'object') {
        const props = fresh[j][fkey];
        // eslint-disable-next-line no-restricted-syntax
        for (const p in props) {
          existing[rep][fkey][p] = props[p];
        }
      }
    }
  }
  return existing;
};

FrameConfig.prototype.setFrameArgs = function (existing, fresh) {
  if (!existing) return fresh;
  if (!fresh) return existing;
  for (const k in fresh) {
    existing[k] = fresh[k];
  }
  return existing;
};

/**
 * @file Document Rule
 * @license Apache Version 2
 */

function DocumentRule() {
  FrameRule.call(this);
  this.rule = {};
}

Object.setPrototypeOf(DocumentRule.prototype, FrameRule.prototype);

DocumentRule.prototype.renderer = function (rend) {
  if (typeof rend === 'undefined') {
    return this.rule.renderer;
  }
  this.rule.renderer = rend;
  return this;
};

DocumentRule.prototype.compare = function (func) {
  if (typeof func === 'undefined') {
    return this.rule.compare;
  }
  this.rule.compare = func;
  return this;
};

DocumentRule.prototype.mode = function (mode) {
  if (typeof mode === 'undefined') {
    return this.rule.mode;
  }
  this.rule.mode = mode;
  return this;
};

DocumentRule.prototype.collapse = function (func) {
  if (typeof func === 'undefined') {
    return this.rule.collapse;
  }
  this.rule.collapse = func;
  return this;
};

DocumentRule.prototype.view = function (m) {
  if (!m) return this.rule.view;
  this.rule.view = m;
  return this;
};

/**
 * Should actions which are disabled in the given context be displayed?
 */
DocumentRule.prototype.showDisabledButtons = function (m) {
  if (typeof m === 'undefined') return this.rule.show_disabled_buttons;
  this.rule.show_disabled_buttons = m;
  return this;
};

DocumentRule.prototype.header = function (m) {
  if (!m) return this.rule.header;
  this.rule.header = m;
  return this;
};

DocumentRule.prototype.errors = function (errs) {
  if (!errs) return this.rule.errors;
  this.rule.errors = errs;
  return this;
};

DocumentRule.prototype.headerStyle = function (m) {
  if (!m) return this.rule.headerStyle;
  this.rule.headerStyle = m;
  return this;
};

DocumentRule.prototype.showEmpty = function (m) {
  if (!m) return this.rule.show_empty;
  this.rule.show_empty = m;
  return this;
};

DocumentRule.prototype.dataviewer = function (m) {
  if (!m) return this.rule.dataviewer;
  this.rule.dataviewer = m;
  return this;
};

DocumentRule.prototype.features = function (...m) {
  if (typeof m === 'undefined' || m.length === 0) return this.rule.features;
  this.rule.features = m;
  return this;
};

DocumentRule.prototype.headerFeatures = function (...m) {
  if (typeof m === 'undefined' || m.length === 0) return this.rule.header_features;
  this.rule.header_features = m;
  return this;
};

DocumentRule.prototype.render = function (func) {
  if (!func) return this.rule.render;
  const hf = this.headerFeatures();
  const f = this.features();
  if (hf && hf.length) {
    var feats = this.applyFeatureProperty(hf, 'render', func);
    this.headerFeatures(...feats);
  } else if (f && f.length) {
    // eslint-disable-next-line no-redeclare
    var feats = this.applyFeatureProperty(f, 'render', func);
    this.features(...feats);
  } else {
    this.rule.render = func;
  }
  return this;
};

DocumentRule.prototype.style = function (style) {
  if (typeof style === 'undefined') return this.rule.style;
  const hf = this.headerFeatures();
  const f = this.features();
  if (hf && hf.length) {
    var feats = this.applyFeatureProperty(hf, 'style', style);
    this.headerFeatures(...feats);
  } else if (f && f.length) {
    var feats = this.applyFeatureProperty(f, 'style', style);
    this.features(...feats);
  } else {
    this.rule.style = style;
  }
  return this;
};

/**
 * The frame or feature will be hidden or unhidden (boolean)
 */
DocumentRule.prototype.hidden = function (m) {
  if (typeof m === 'undefined') return this.rule.hidden;
  const hf = this.headerFeatures();
  const f = this.features();
  if (hf && hf.length) {
    var feats = this.applyFeatureProperty(hf, 'hidden', m);
    this.headerFeatures(...feats);
  } else if (f && f.length) {
    var feats = this.applyFeatureProperty(f, 'hidden', m);
    this.features(...feats);
  } else {
    this.rule.hidden = m;
  }
  return this;
};

/**
 * Specifies arguments to a renderer
 */
DocumentRule.prototype.args = function (json) {
  if (!json) return this.rule.args;
  const hf = this.headerFeatures();
  const f = this.features();
  if (hf && hf.length) {
    var feats = this.applyFeatureProperty(hf, 'args', json);
    this.headerFeatures(...feats);
  } else if (f && f.length) {
    var feats = this.applyFeatureProperty(f, 'args', json);
    this.features(...feats);
  } else {
    this.rule.args = json;
  }
  return this;
};

/**
 * Adds a property to a feature array
 */
DocumentRule.prototype.applyFeatureProperty = function (feats, prop, val) {
  const nfeats = [];
  for (let i = 0; i < feats.length; i++) {
    if (typeof feats[i] === 'string') {
      var nfeat = {};
      nfeat[feats[i]] = {};
      nfeat[feats[i]][prop] = val;
      nfeats.push(nfeat);
    } else if (typeof feats[i] === 'object') {
      const fkey = Object.keys(feats[i])[0];
      if (fkey) {
        var nfeat = feats[i];
        nfeat[fkey][prop] = val;
        nfeats.push(nfeat);
      }
    }
  }
  return nfeats;
};

DocumentRule.prototype.unpackFeatures = function (feats) {
  const extensions = {};
  let fstr = '';
  for (let i = 0; i < feats.length; i++) {
    if (typeof feats[i] === 'string') {
      fstr += `"${feats[i]}"`;
    } else if (typeof feats[i] === 'object') {
      const fid = Object.keys(feats[i])[0];
      fstr += `"${fid}"`;
      for (const prop in feats[i][fid]) {
        extensions[prop] = feats[i][fid][prop];
      }
    }
    if (i < feats.length - 1) {
      fstr += ', ';
    }
  }
  for (let k = 0; k < Object.keys(extensions).length; k++) {
    const ext = Object.keys(extensions)[k];
    const val = extensions[ext];
    fstr += `).${ext}(`;
    if (typeof val === 'function') {
      fstr += val;
    } else if (typeof val === 'string') {
      fstr += `"${val}"`;
    } else if (typeof val === 'object') {
      fstr += JSON.stringify(val);
    }
  }
  return fstr;
};

DocumentRule.prototype.prettyPrint = function () {
  if (this.pattern) {
    str = this.pattern.prettyPrint();
  }
  if (typeof this.renderer() !== 'undefined') {
    str += `.renderer('${this.renderer()}')`;
  }
  if (typeof this.render() !== 'undefined') {
    str += `.render(${this.render})`;
  }
  if (typeof this.compare() !== 'undefined') {
    str += `.compare(${this.compare()})`;
  }
  if (typeof this.mode() !== 'undefined') {
    str += `.mode('${this.mode()}')`;
  }
  if (typeof this.collapse() !== 'undefined') {
    str += `.collapse(${this.collapse()})`;
  }
  if (typeof this.hidden() !== 'undefined') {
    str += `.hidden(${this.hidden()})`;
  }
  if (typeof this.view() !== 'undefined') {
    str += `.view('${this.view()}')`;
  }
  if (typeof this.showDisabledButtons() !== 'undefined') {
    str += `.showDisabledButtons(${this.showDisabledButtons()})`;
  }
  if (typeof this.header() !== 'undefined') {
    str += `.header(${this.header()})`;
  }
  if (typeof this.style() !== 'undefined') {
    str += `.style("${this.style()}")`;
  }
  if (typeof this.headerStyle() !== 'undefined') {
    str += `.headerStyle("${this.headerStyle()}")`;
  }
  if (typeof this.args() !== 'undefined') {
    str += `.args(${JSON.stringify(this.args())})`;
  }
  if (typeof this.errors() !== 'undefined') {
    str += `.errors(${JSON.stringify(this.errors())})`;
  }
  if (typeof this.showEmpty() !== 'undefined') {
    str += `.showEmpty(${this.show_empty()})`;
  }
  if (typeof this.dataviewer() !== 'undefined') {
    str += `.dataviewer("${this.dataviewer()}")`;
  }
  if (typeof this.features() !== 'undefined') {
    str += `.features(${this.unpackFeatures(this.features())})`;
  }
  if (typeof this.headerFeatures() !== 'undefined') {
    str += `.headerFeatures(${this.unpackFeatures(this.headerFeatures())})`;
  }
  return str;
};

module.exports = FrameConfig;


/***/ }),

/***/ 7700:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* eslint-disable no-continue */
/* eslint-disable no-restricted-syntax */
/* eslint-disable block-scoped-var */
/* eslint-disable no-var */
/* eslint-disable vars-on-top */
/* eslint-disable no-plusplus */
/* eslint-disable camelcase */
/* eslint-disable no-use-before-define */
const TerminusRule = __nccwpck_require__(786);

/**
 * @file Frame Rule
 * @license Apache Version 2
 */

function FrameRule() {
  TerminusRule.TerminusRule.call(this);
  this.pattern = new FramePattern();
}

Object.setPrototypeOf(FrameRule.prototype, TerminusRule.TerminusRule.prototype);

/**
 * Returns an array of rules that match the paased frame
 * @param {[FrameRule]} rules - array of rules to be tested
 * @param {Frame} frame - object frame, property frame or data from to be tested
 * @param {function} [onmatch] - optional function to be called with args (frame, rule)
 * on each match
 */
FrameRule.prototype.testRules = function (rules, frame, onmatch) {
  const matched_rules = [];
  if (rules && rules.length) {
    for (let i = 0; i < rules.length; i++) {
      const match = (!rules[i].pattern || this.patternMatchesFrame(rules[i].pattern, frame));
      if (match) {
        matched_rules.push(rules[i]);
        if (onmatch && typeof onmatch === 'function') {
          onmatch(frame, rules[i]);
        }
      }
    }
  }
  return matched_rules;
};

/**
 * Determines whether a given pattern matches a given frame
 */
FrameRule.prototype.patternMatchesFrame = function (pattern, frame) {
  if (pattern.checkFrame) {
    return pattern.checkFrame(frame);
  }

  const fp = new FramePattern().setPattern(pattern);
  return fp.checkFrame(frame);
};

/**
 * Specifies that only one from among the list of properties will match
 */
FrameRule.prototype.property = function (...prop) {
  if (!prop || prop.length === 0) return this.pattern.property;
  this.pattern.property = prop;
  return this;
};

/**
 * Specifies that only one from among the list of frame_types will match
 * frame_types are: data, oneOf, document, object?
 */
FrameRule.prototype.frame_type = function (...frame_type) {
  if (!frame_type || frame_type.length === 0) return this.pattern.frame_type;
  this.pattern.frame_type = frame_type;
  return this;
};

/**
 * Specifies that only one from among the list of labels will match
 */
FrameRule.prototype.label = function (...prop) {
  if (!prop || prop.length === 0) return this.pattern.label;
  this.pattern.label = prop;
  return this;
};

/**
 * Specifies that only one from among the list of subject ids will match
 */
FrameRule.prototype.subject = function (...prop) {
  if (!prop || prop.length === 0) return this.pattern.subject;
  this.pattern.subject = prop;
  return this;
};

/**
 * Specifies that only one from among the list of subject classes will match
 */
FrameRule.prototype.subjectClass = function (...prop) {
  if (!prop || prop.length === 0) return this.pattern.subjectClass;
  this.pattern.subjectClass = prop;
  return this;
};

/**
 * Specifies that only one from among the list of range types will match
 */
FrameRule.prototype.range = function (...prop) {
  if (!prop || prop.length === 0) return this.pattern.range;
  this.pattern.range = prop;
  return this;
};

/**
 * Specifies that only one from among the list of range types will match
 */
FrameRule.prototype.value = function (...prop) {
  if (!prop || prop.length === 0) return this.pattern.value;
  this.pattern.value = prop;
  return this;
};

/**
 * Specifies that only frames of the specified depth will match the rule
 */
FrameRule.prototype.depth = function (depth) {
  if (typeof depth === 'undefined') return this.pattern.depth;
  this.pattern.depth = depth;
  return this;
};

/**
 * Specifies that only frames of the specified index will match the rule (index is the order of a
 * value in the property frame)
 */
FrameRule.prototype.index = function (...index) {
  if (!index || index.length === 0) return this.pattern.index;
  this.pattern.index = index;
  return this;
};

/**
 * Specifies that only frames with the given statuses will match the rule
 */
FrameRule.prototype.status = function (...status) {
  if (!status || status.length === 0) return this.pattern.status;
  this.pattern.status = status;
  return this;
};

/**
 * Specifies that the frame will only match if its parent matches the pattern passed as par
 */
FrameRule.prototype.parent = function (par) {
  if (!par) return this.pattern.parent;
  this.pattern.parent = par;
  return this;
};

FrameRule.prototype.children = function (...children) {
  if (typeof children === 'undefined' || children.length === 0) return this.pattern.children;
  if (typeof this.pattern.children === 'undefined') {
    this.pattern.children = [];
  }
  for (let i = 0; i < children.length; i++) {
    this.pattern.children.push(children[i]);
  }
  return this;
};

/**
 * @file Frame Pattern
 * A frame pattern can have the following variables
 * scope : object, property, data, * - matches a specific part of the frame
 * label : matches the label of a property
 * frame_type: object, data, document, id, oneOf
 * subject: id of the subject
 * subjectClass: class of the subject
 * range: type of a property (applies to property and data)
 * property: property id or list of property ids (parent property if it is an object or data)
 * value: value of the property
 * parent: a pattern relating to the parent of this frame
 * children: patterns for matching on the children of a frame
 * depth: how deep are we in the document? starts from 0
 * index: the index of a value in an array
 * status: updated, error, new, ok,
 */

function FramePattern() {
  TerminusRule.TerminusPattern.call(this);
}

Object.setPrototypeOf(FramePattern.prototype, TerminusRule.TerminusPattern.prototype);

FramePattern.prototype.setPattern = function (pattern) {
  if (pattern.scope) this.scope = pattern.scope;
  if (typeof pattern.literal !== 'undefined') this.literal = pattern.literal;
  if (typeof pattern.type !== 'undefined') this.type = pattern.type;
  if (typeof pattern.label !== 'undefined') this.label = pattern.label;
  if (typeof pattern.frame_type !== 'undefined') this.frame_type = pattern.frame_type;
  if (typeof pattern.subject !== 'undefined') this.subject = pattern.subject;
  if (typeof pattern.subjectClass !== 'undefined') this.subjectClass = pattern.subjectClass;
  if (typeof pattern.range !== 'undefined') this.range = pattern.range;
  if (typeof pattern.property !== 'undefined') this.property = pattern.property;
  if (typeof pattern.value !== 'undefined') this.value = pattern.value;
  if (typeof pattern.parent !== 'undefined') {
    let { parent } = pattern;
    if (typeof parent.json !== 'function') {
      parent = new FramePattern().setPattern(parent);
    }
    this.parent = parent;
  }
  if (pattern.children) {
    this.children = [];
    for (let i = 0; i < pattern.children.length; i++) {
      let kid = pattern.children[i];
      if (typeof kid.json !== 'function') {
        kid = new FramePattern().setPattern(kid);
      }
      this.children.push(kid);
    }
  }
  if (typeof pattern.depth !== 'undefined') this.depth = pattern.depth;
  if (typeof pattern.index !== 'undefined') this.index = pattern.index;
  if (typeof pattern.status !== 'undefined') this.status = pattern.status;
};

FramePattern.prototype.json = function () {
  const json = {};
  if (typeof this.literal !== 'undefined') json.literal = this.literal;
  if (this.type) json.type = this.type;
  if (this.scope) json.scope = this.scope;
  if (typeof this.value !== 'undefined') json.value = this.value;
  if (typeof this.label !== 'undefined') json.label = this.label;
  if (typeof this.frame_type !== 'undefined') json.frame_type = this.frame_type;
  if (typeof this.subject !== 'undefined') json.subject = this.subject;
  if (typeof this.subjectClass !== 'undefined') json.subjectClass = this.subjectClass;
  if (typeof this.range !== 'undefined') json.range = this.range;
  if (typeof this.property !== 'undefined') json.property = this.property;
  if (typeof this.parent !== 'undefined') json.parent = (this.parent.json ? this.parent.json() : this.parent);
  if (typeof this.children !== 'undefined') {
    json.children = [];
    for (let i = 0; i < this.children.length; i++) {
      json.children.push((this.children[i].json ? this.children[i].json() : this.children[i]));
    }
  }
  if (typeof this.depth !== 'undefined') json.depth = this.depth;
  if (typeof this.index !== 'undefined') json.index = this.index;
  if (typeof this.status !== 'undefined') json.status = this.status;
  return json;
};

FramePattern.prototype.checkFrame = function (frame) {
  const rtype = this.getRendererType(frame);
  if (!rtype) return false;
  if (this.scope && (this.scope !== rtype) && (this.scope !== '*')) return false;
  if (this.illegalRuleType(rtype)) return false;
  if (this.frame_type && !this.checkFrameType(rtype, frame)) return false;
  if (this.label && !this.checkLabel(rtype, frame)) return false;
  if (this.subject && !this.checkSubject(rtype, frame)) return false;
  if (this.subjectClass && !this.checkSubjectClass(rtype, frame)) return false;
  if (this.property && !this.checkProperty(rtype, frame)) return false;
  if (typeof this.depth !== 'undefined' && !this.checkDepth(rtype, frame)) return false;
  if (this.range && !this.checkRange(rtype, frame)) return false;
  if (typeof this.value !== 'undefined' && !this.checkValue(rtype, frame)) return false;
  if (this.type && !this.checkType(rtype, frame)) return false;
  if (typeof this.literal !== 'undefined' && !this.checkLiteral(rtype, frame)) return false;
  if (this.parent && !this.checkParent(rtype, frame)) return false;
  if (this.children && this.children.length && !this.checkChildren(rtype, frame)) return false;
  if (this.index && !this.checkIndex(rtype, frame)) return false;
  if (this.status && !this.checkStatus(rtype, frame)) return false;
  return true;
};

FramePattern.prototype.prettyPrint = function () {
  // starts with obj. ...
  if (this.scope === '*') {
    var str = 'all()';
  } else {
    // eslint-disable-next-line no-redeclare
    var str = `${this.scope}()`;
  }
  if (typeof this.literal !== 'undefined') {
    str += `.literal(${this.literal})`;
  }
  if (typeof this.type !== 'undefined') {
    str += `.type(${this.unpack(this.type)})`;
  }
  if (typeof this.range !== 'undefined') {
    str += `.range(${this.unpack(this.range)})`;
  }
  if (typeof this.frame_type !== 'undefined') {
    str += `.frame_type(${this.unpack(this.frameType)})`;
  }
  if (typeof this.label !== 'undefined') {
    str += `.label(${this.unpack(this.label)})`;
  }
  if (typeof this.subject !== 'undefined') {
    str += `.subject(${this.unpack(this.subject)})`;
  }
  if (typeof this.subjectClass !== 'undefined') {
    str += `.subjectClass(${this.unpack(this.subjectClass)})`;
  }
  if (typeof this.property !== 'undefined') {
    str += `.property(${this.unpack(this.property)})`;
  }
  if (typeof this.value !== 'undefined') {
    str += `.value(${this.unpack(this.value, true)})`;
  }
  if (typeof this.children !== 'undefined' && this.children.length > 0) {
    str += '.children(\n';
    const kids = this.children;
    for (let i = 0; i < kids.length; i++) {
      str += `View.pattern().${kids[i].prettyPrint()}`;
      if (i < kids.length - 1) str += ',';
      str += '\n';
    }
    str += ')';
  }
  if (typeof this.parent !== 'undefined') {
    str += `.parent(View.pattern().${this.parent.prettyPrint()})`;
  }
  if (typeof this.depth !== 'undefined') {
    str += `.depth(${this.unpack(this.depth, true)})`;
  }
  if (typeof this.index !== 'undefined') {
    str += `.index(${this.unpack(this.index, true)})`;
  }
  if (typeof this.status !== 'undefined') {
    str += `.status(${this.unpack(this.status)})`;
  }
  return str;
};

FramePattern.prototype.illegalRuleType = function (rtype) {
  // data frames have no children
  if (rtype === 'data' && this.children && this.children.length) return true;
  // object frames have no range
  if (rtype === 'object' && this.range) return true;
  return false;
};

/* subject is an id or an array of ids,
/* match is positive if the renderer's subject appears in the array or is the id
 */
FramePattern.prototype.checkSubject = function (subject, frame) {
  if (typeof this.subject !== 'object' || !this.subject.length) this.subject = [this.subject];
  const rsubj = frame.subject();
  for (let i = 0; i < this.subject.length; i++) {
    if (this.IDsMatch(subject[i], rsubj)) {
      return true;
    }
  }
  return false;
};

// at least one child must match all child rules
FramePattern.prototype.checkChildren = function (rtype, frame) {
  for (let i = 0; i < this.children.length; i++) {
    let found = false;
    if (rtype === 'object') {
      for (const prop in frame.properties) {
        if (this.children[i].checkFrame(frame.properties[prop])) {
          found = true;
          continue;
        }
      }
    } else if (rtype === 'property') {
      // eslint-disable-next-line no-undef
      for (let j = 0; j <= renderer.values.length; j++) {
        if (this.children[j].checkFrame(frame.values[j])) {
          found = true;
          continue;
        }
      }
    }
    if (!found) return false;
  }
  return true;
};

FramePattern.prototype.checkStatus = function (rtype, frame) {
  if (typeof this.status !== 'object' || this.status.length === 0) this.status = [this.status];
  for (let i = 0; i < this.status.length; i++) {
    if (this.status[i] === 'updated' && !frame.isUpdated()) return false;
    if (this.status[i] === 'new' && !frame.isNew()) return false;
    if (this.status[i] === 'unchanged' && frame.isUpdated()) return false;
  }
  return true;
};

FramePattern.prototype.checkDepth = function (rtype, frame) {
  return this.numberMatch(this.depth, frame.depth());
};

FramePattern.prototype.checkParent = function (rtype, frame) {
  return this.parent.checkFrame(frame.parent);
};

FramePattern.prototype.checkIndex = function (rtype, frame) {
  if (rtype === 'data') {
    return this.index === frame.index;
  }
  return false;
};

FramePattern.prototype.checkProperty = function (rtype, frame) {
  if (typeof this.property !== 'object' || !this.property.length) this.property = [this.property];
  for (let i = 0; i < this.property.length; i++) {
    if (this.propertyIDsMatch(frame.property(), this.property[i])) {
      return true;
    }
  }
  return false;
};

/**
 * Checks to make sure the frame is among the specified types
 */
FramePattern.prototype.checkType = function (rtype, frame) {
  if (rtype === 'object') var vs = frame.subjectClass();
  // eslint-disable-next-line no-redeclare
  else var vs = typeof frame.range === 'function' ? frame.range() : frame.range;
  if (!Array.isArray(this.type)) this.type = [this.type];
  if (this.type.indexOf(vs) === -1) return false;
  return true;
};

FramePattern.prototype.checkLiteral = function (rtype, frame) {
  if (rtype === 'object') return false;
  if (rtype === 'property') return false;
  if (rtype === 'data') return frame.isDatatypeProperty();
  return true;
};

// returns true if any of the values are found
FramePattern.prototype.checkValue = function (rtype, frame) {
  if (typeof this.value !== 'object' || !this.value.length) this.value = [this.value];
  for (let i = 0; i < this.value.length; i++) {
    if (rtype === 'data') {
      if (this.valuesMatch(frame.get(), this.value[i])) {
        return true;
      }
    } else if (rtype === 'property') {
      for (let j = 0; j <= frame.values.length; j++) {
        if (this.getRendererType(frame.values[i]) === 'data'
            && this.valuesMatch(frame.values[i].get(), this.value[i])) {
          return true;
        }
      }
    } else if (rtype === 'object') {
      for (const prop in frame.properties) {
        if (this.checkValue(this.getRendererType(frame.properties[prop]), frame.properties[prop])) {
          return true;
        }
      }
    }
  }
  return false;
};

FramePattern.prototype.checkRange = function (rtype, frame) {
  if (typeof this.range !== 'object' || !this.range.length) this.range = [this.range];
  for (let i = 0; i < this.range.length; i++) {
    if (this.rangeIDsMatch(frame.range(), this.range[i])) {
      return true;
    }
  }
  return false;
};

FramePattern.prototype.checkSubjectClass = function (rtype, frame) {
  if (typeof this.subjectClass !== 'object' || !this.subjectClass.length) this.subjectClass = [this.subjectClass];
  const rcls = frame.subjectClass();
  for (let i = 0; i < this.subjectClass.length; i++) {
    if (this.classIDsMatch(this.subjectClass[i], rcls)) {
      return true;
    }
  }
  return false;
};

// eslint-disable-next-line consistent-return
FramePattern.prototype.checkFrameType = function (rtype, frame) {
  if (rtype === 'object') return (this.frame_type.indexOf('object') !== -1);
  if (rtype === 'data') {
    if (frame.frame) {
      return (this.frame_type.indexOf(frame.frame.ftype()) !== -1);
    }
  }
  if (rtype === 'property') return false;
};

FramePattern.prototype.checkLabel = function (rtype, frame) {
  if (typeof frame.getLabel !== 'function') {
    // eslint-disable-next-line no-console
    console.log(new Error('Rule passed to check label with broken renderer object - no getLabel'));
    return false;
  }
  for (let i = 0; i < this.label.length; i++) {
    if (this.stringMatch(this.label[i], frame.getLabel())) return true;
  }
  return false;
};

FramePattern.prototype.getRendererType = function (frame) {
  if (frame.isProperty()) return 'property';
  if (frame.isObject()) return 'object';
  if (frame.isData()) return 'data';
  if (frame.renderer_type) return frame.renderer_type;
  // eslint-disable-next-line no-console
  console.log(frame, new Error(`frame configuration passed non-renderer type ${frame.constructor.name}`));
  return false;
};

module.exports = { FrameRule, FramePattern };


/***/ }),

/***/ 120:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* eslint-disable block-scoped-var */
/* eslint-disable no-var */
/* eslint-disable vars-on-top */
/* eslint-disable no-plusplus */
/* eslint-disable no-use-before-define */
/* eslint-disable import/extensions */
const Config = __nccwpck_require__(9066);
const WOQLGraph = __nccwpck_require__(5441);
const UTILS = __nccwpck_require__(4948);

function WOQLGraphConfig() {
  Config.ViewConfig.call(this);
  this.type = 'graph';
}

Object.setPrototypeOf(WOQLGraphConfig.prototype, Config.ViewConfig.prototype);

WOQLGraphConfig.prototype.create = function (client) {
  const wqt = new WOQLGraph(client, this);
  return wqt;
};

WOQLGraphConfig.prototype.literals = function (v) {
  if (typeof v !== 'undefined') {
    this.show_literals = v;
    return this;
  }
  return this.show_literals;
};

WOQLGraphConfig.prototype.source = function (v) {
  if (v) {
    // if(v.substring(0, 2) != "v:") v = "v:" + v;
    this.source_variable = UTILS.removeNamespaceFromVariable(v);
    return this;
  }
  return this.source_variable;
};

WOQLGraphConfig.prototype.fontfamily = function (v) {
  if (typeof v !== 'undefined') {
    this.fontfam = v;
    return this;
  }
  // return 'Font Awesome 5 Free';
  return this.fontfam;
};

WOQLGraphConfig.prototype.show_force = function (v) {
  if (typeof v !== 'undefined') {
    this.force = v;
    return this;
  }
  return this.force;
};

WOQLGraphConfig.prototype.fix_nodes = function (v) {
  if (typeof v !== 'undefined') {
    this.fixed = v;
    return this;
  }
  return this.fixed;
};

WOQLGraphConfig.prototype.explode_out = function (v) {
  if (typeof v !== 'undefined') {
    this.explode = v;
    return this;
  }
  return this.explode;
};

WOQLGraphConfig.prototype.selected_grows = function (v) {
  if (typeof v !== 'undefined') {
    this.bigsel = v;
    return this;
  }
  return this.bigsel;
};

/**
 * no parameter get the graph width or
 * set the graph width and return the WOQLGraphConfig
 * @param {size} Number
 */

WOQLGraphConfig.prototype.width = function (size) {
  if (typeof size !== 'undefined') {
    this.gwidth = size;
    return this;
  }
  return this.gwidth;
};

/**
 * no parameter get the graph height or
 * set the graph height and return the WOQLGraphConfig
 * @param {size} Number
 */

WOQLGraphConfig.prototype.height = function (size) {
  if (typeof size !== 'undefined') {
    this.gheight = size;
    return this;
  }
  return this.gheight;
};

/**
 *
 * @param  {...any} edges
 * @returns {any[][]}
 */
WOQLGraphConfig.prototype.edges = function (...edges) {
  if (edges && edges.length) {
    const nedges = [];
    for (let i = 0; i < edges.length; i++) {
      nedges.push(UTILS.removeNamespacesFromVariables(edges[i]));
    }
    this.show_edges = nedges;
    return this;
  }
  return this.show_edges;
};

WOQLGraphConfig.prototype.edge = function (source, target) {
  const nr = new WOQLGraphRule().edge(source, target);
  this.rules.push(nr);
  return nr;
};

WOQLGraphConfig.prototype.node = function (...cols) {
  const nr = new WOQLGraphRule();
  if (cols && cols.length) {
    nr.scope('node').setVariables(cols);
  } else {
    nr.scope('row');
  }
  this.rules.push(nr);
  return nr;
};

WOQLGraphConfig.prototype.loadJSON = function (config, rules) {
  const jr = [];
  for (let i = 0; i < rules.length; i++) {
    const nr = new WOQLGraphRule();
    nr.json(rules[i]);
    jr.push(nr);
  }
  this.rules = jr;
  if (typeof config.literals !== 'undefined') {
    this.literals(config.literals);
  }
  if (typeof config.source !== 'undefined') {
    this.source(config.source);
  }
  if (typeof config.fontfamily !== 'undefined') {
    this.fontfamily(config.fontfamily);
  }
  if (typeof config.show_force !== 'undefined') {
    this.show_force(config.show_force);
  }
  if (typeof config.fix_nodes !== 'undefined') {
    this.fix_nodes(config.fix_nodes);
  }
  if (typeof config.explode_out !== 'undefined') {
    this.explode_out(config.explode_out);
  }
  if (typeof config.selected_grows !== 'undefined') {
    this.selected_grows(config.selected_grows);
  }
  if (typeof config.width !== 'undefined') {
    this.width(config.width);
  }
  if (typeof config.height !== 'undefined') {
    this.height(config.height);
  }
  if (typeof config.edges !== 'undefined') {
    this.edges(...config.edges);
  }
};

WOQLGraphConfig.prototype.prettyPrint = function () {
  let str = 'view = View.graph();\n';
  if (typeof this.literals() !== 'undefined') {
    str += `view.literals('${this.literals()}')\n`;
  }
  if (typeof this.source() !== 'undefined') {
    str += `view.source('${UTILS.removeNamespaceFromVariable(this.source())}')\n`;
  }
  if (typeof this.fontfamily() !== 'undefined') {
    str += `view.fontfamily('${this.fontfamily()}')\n`;
  }
  if (typeof this.show_force() !== 'undefined') {
    str += `view.show_force('${this.show_force()}')\n`;
  }
  if (typeof this.fix_nodes() !== 'undefined') {
    str += `view.fix_nodes('${this.fix_nodes()}')\n`;
  }
  if (typeof this.explode_out() !== 'undefined') {
    str += `view.explode_out('${this.explode_out()}')\n`;
  }
  if (typeof this.selected_grows() !== 'undefined') {
    str += `view.selected_grows('${this.selected_grows()}')\n`;
  }
  if (typeof this.width() !== 'undefined') {
    str += `view.width('${this.width()}')\n`;
  }
  if (typeof this.height() !== 'undefined') {
    str += `view.height('${this.height()}')\n`;
  }
  if (typeof this.edges() !== 'undefined') {
    const nedges = this.edges();
    const estrs = [];
    for (var i = 0; i < nedges.length; i++) {
      estrs.push(`['${nedges[i][0]}, ${nedges[i][1]}']`);
    }
    str += `view.edges('${estrs.join(', ')}')\n`;
  }
  // eslint-disable-next-line no-redeclare
  for (var i = 0; i < this.rules.length; i++) {
    const x = this.rules[i].prettyPrint();
    if (x) str += `view.${x}\n`;
  }
  return str;
};

WOQLGraphConfig.prototype.json = function () {
  const jr = [];
  for (let i = 0; i < this.rules.length; i++) {
    jr.push(this.rules[i].json());
  }
  const json = {};
  if (typeof this.literals() !== 'undefined') {
    json.literals = this.literals();
  }
  if (typeof this.source() !== 'undefined') {
    json.source = this.source();
  }
  if (typeof this.fontfamily() !== 'undefined') {
    json.fontfamily = this.fontfamily();
  }
  if (typeof this.show_force() !== 'undefined') {
    json.show_force = this.show_force();
  }
  if (typeof this.fix_nodes() !== 'undefined') {
    json.fix_nodes = this.fix_nodes();
  }
  if (typeof this.explode_out() !== 'undefined') {
    json.explode_out = this.explode_out();
  }
  if (typeof this.selected_grows() !== 'undefined') {
    json.selected_grows = this.selected_grows();
  }
  if (typeof this.width() !== 'undefined') {
    json.width = this.width();
  }
  if (typeof this.height() !== 'undefined') {
    json.height = this.height();
  }
  if (typeof this.edges() !== 'undefined') {
    json.edges = this.edges();
  }
  const mj = { graph: json, rules: jr };
  return mj;
};

function WOQLGraphRule(scope) {
  Config.WOQLViewRule.call(this, scope);
}

Object.setPrototypeOf(WOQLGraphRule.prototype, Config.WOQLViewRule.prototype);

WOQLGraphRule.prototype.charge = function (v) {
  if (typeof v === 'undefined') {
    return this.rule.charge;
  }
  this.rule.charge = v;
  return this;
};

WOQLGraphRule.prototype.collisionRadius = function (v) {
  if (typeof v === 'undefined') {
    return this.rule.collisionRadius;
  }
  this.rule.collisionRadius = v;
  return this;
};

WOQLGraphRule.prototype.arrow = function (json) {
  if (json) {
    this.rule.arrow = json;
    return this;
  }
  return this.rule.arrow;
};

WOQLGraphRule.prototype.distance = function (d) {
  if (typeof d !== 'undefined') {
    this.rule.distance = d;
    return this;
  }
  return this.rule.distance;
};

WOQLGraphRule.prototype.symmetric = function (d) {
  if (typeof d !== 'undefined') {
    this.rule.symmetric = d;
    return this;
  }
  return this.rule.symmetric;
};

WOQLGraphRule.prototype.weight = function (w) {
  if (typeof w !== 'undefined') {
    this.rule.weight = w;
    return this;
  }
  return this.rule.weight;
};

WOQLGraphRule.prototype.prettyPrint = function () {
  let str = Config.WOQLViewRule.prototype.prettyPrint.apply(this);
  if (typeof this.charge() !== 'undefined') {
    str += `.charge('${this.charge()}')`;
  }
  if (typeof this.distance() !== 'undefined') {
    str += `.distance('${this.distance()}')`;
  }
  if (typeof this.weight() !== 'undefined') {
    str += `.weight('${this.weight()}')`;
  }
  if (typeof this.symmetric() !== 'undefined') {
    str += `.symmetric(${this.symmetric()})`;
  }
  if (typeof this.collisionRadius() !== 'undefined') {
    str += `.collisionRadius(${this.collisionRadius()})`;
  }
  if (typeof this.arrow() !== 'undefined') {
    str += `.arrow(${JSON.stringify(this.arrow())})`;
  }
  return str;
};

module.exports = WOQLGraphConfig;


/***/ }),

/***/ 5074:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* eslint-disable consistent-return */
/* eslint-disable prefer-destructuring */
/* eslint-disable guard-for-in */
/* eslint-disable max-len */
/* eslint-disable no-redeclare */
/* eslint-disable block-scoped-var */
/* eslint-disable no-var */
/* eslint-disable vars-on-top */
/* eslint-disable no-plusplus */
/* eslint-disable no-unused-vars */
/* eslint-disable no-shadow */
/* eslint-disable no-param-reassign */
/* eslint-disable no-continue */
/* eslint-disable no-console */
/* eslint-disable no-restricted-syntax */
/* eslint-disable no-use-before-define */
const FrameHelper = __nccwpck_require__(4948);
const { FrameRule } = __nccwpck_require__(7700);
const WOQL = __nccwpck_require__(5054);

/**
 * @file Javascript Terminus Document Classes
 * @license Apache Version 2
 * Helper classes for accessing documents returned by the Terminus DB API programmatically
 *
 * @example
 * let doc = new TerminusDocument(client);
 *
 * //These set the objects document property and return promises:
 *
 * doc.loadDocument(URL).then(() => console.log(this.document));
 * doc.loadComplete(URL, CLS).then(() => console.log(this.document))
 * doc.loadSchema(cls).then(() => console.log(this.document))
 *
 * //These just set the object's document property
 * doc.loadJSON(json_frames, cls) //console.log(this.document)
 * doc.loadDataFrames(json_frames, cls)
 * doc.loadClassFrames(json_frames, cls)
 * @example
 *
 * @description Represents a frame for programmatic access to object frame,
 * anywhere within a document
 * Recursive data structure where this.children contains an indexed array of object frames
 * and this.dataframes contains a property indexed array of data frames
 * Every object frame carries a reference to its classframe
 * This gives us instructions as to how to create new frames according to the schema
 * After that it's turtles all the way down.
 * @param cls - ID of the class (URL)
 * @param classframe - an array of frames representing a class
 * @param archetypes list of class frames
 * @param parent parent object
 * @returns
 */

function ObjectFrame(cls, jsonld, classframes, parent) {
  // the class of the frame - mandatory
  this.empty();
  this.cls = FrameHelper.unshorten(cls);

  // array of frames representing the full class frame
  // (optional - required to be able to safely add missing properties)
  if (classframes && typeof classframes === 'object') {
    this.loadClassFrames(classframes);
  }
  // console.log("this", this)
  if (jsonld && typeof jsonld === 'object' && Object.keys(jsonld).length) {
    this.originalDocument = jsonld;
    this.loadJSONLDDocument(jsonld);
    // console.log("this after jsonld doc call", this)
  } else {
    this.originalDocument = false;
  }
  // parent object frame
  this.parent = parent;
  // set to true if this is a newly created document
  this.newDoc = false;
}

/**
 * Loads class frames for the object's class - the instructions about how to put an object together
 */
ObjectFrame.prototype.loadClassFrames = function (classframes) {
  for (let j = 0; j < classframes.length; j += 1) {
    if (classframes[j]['@context']) this.jsonld_context = classframes[j]['@context'];

    const cf = new ClassFrame(classframes[j], this);
    if (cf.isValid()) {
      if (!this.classframes) this.classframes = {};
      this.classframes[classframes[j].property] = cf;
      if (cf.isObject() && this.properties[classframes[j].property]) {
        for (let i = 0; i < this.properties[classframes[j].property].values.length; i += 1) {
          this.properties[classframes[j].property].values[i].loadClassFrames(classframes[j].frame);
        }
      }
    } else {
      // eslint-disable-next-line no-console
      console.log('Invalid classframe', cf);
    }
  }
  return this;
};

/**
 * Does this object have a schema loaded?
 */
ObjectFrame.prototype.hasSchema = function () {
  return !FrameHelper.empty(this.classframes);
};

/*
 * Loads an array of data frames into the object's internal index
 * {property: [frames]}
 */
/* ObjectFrame.prototype.loadDataFrames = function (frames) {
  if (typeof frames !== 'object' || !frames.length) return undefined;
  if (!this.originalFrames) this.originalFrames = frames;
  if (!this.subjid && frames[0].domainValue) this.subjid = frames[0].domainValue;
  for (let i = 0; i < frames.length; i += 1) {
    if (frames[i]['@context']) this.jsonld_context = frames[i]['@context'];
    let cframe = this.getPropertyClassFrame(frames[i].property, frames[i]);
    if (cframe && cframe.isClassChoice()) {
      cframe = cframe.getChosenClassFrame(frames[i].range);
      if (!cframe) {
        console.log(`no choice frame ${frames[i].range}`);
      }
    } else if (cframe && cframe.isLogic()) {
      cframe = cframe.getChosenFrame(frames[i]);
    }
    if (cframe) {
      if (typeof this.properties[frames[i].property] === 'undefined') {
        this.properties[frames[i].property] = new PropertyFrame(frames[i].property, cframe, this);
      }
      this.properties[frames[i].property].addFrame(frames[i]);
    }
  }
  return this;
}; */

ObjectFrame.prototype.loadJSONLDDocument = function (rdoc) { // KItty check herer
  if (typeof rdoc !== 'object') return undefined;
  const doc = FrameHelper.json_unshorten(rdoc);
  if (!this.originalDocument) this.originalDocument = doc;
  if (!this.subjid && doc['@id']) {
    this.subjid = FrameHelper.unshorten(doc['@id']);
  }
  if (doc['@context']) this.jsonld_context = doc['@context'];
  for (const prop in doc) {
    if (prop[0] === '@' || (typeof doc[prop] === 'object' && Object.keys(doc[prop]).length === 0)) continue;
    let cframe = this.getPropertyClassFrame(prop, doc);
    if (cframe && cframe.isClassChoice()) {
    // cframe = cframe.getChosenClassFrame(FrameHelper.unshorten(doc[prop]["@type"]),cframe.parent)
      if (!cframe) {
        console.log(`no choice frame ${doc[prop]['@type']}`);
      }
    } else if (cframe && cframe.isLogic()) {
      cframe = cframe.getChosenFrame(doc[prop]);
    }
    if (cframe) {
      if (typeof this.properties[prop] === 'undefined') {
        this.properties[prop] = new PropertyFrame(prop, cframe, this);
      }
      this.properties[prop].addJSONLDDocument(doc[prop]);
    }
  }
  return this;
};

/*
 * Serialises the javascript object as an array of frames
 */
ObjectFrame.prototype.getAsFrame = function (prop, parent) {
  prop = FrameHelper.unshorten(prop);
  if (this.parentframe) return this.parentframe;
  const ff = { type: 'objectProperty', property: prop };
  ff.range = this.cls;
  ff.domain = parent.cls;
  ff.domainValue = parent.subjid;
  ff.frame = [];
  for (const prop of Object.keys(this.properties)) {
    ff.frame = ff.frame.concat(ff.frame, this.properties[prop].getAsFrames());
  }
  return ff;
};

ObjectFrame.prototype.getAsFrames = function (prop, parent) {
  let frames = [];
  for (const prop of Object.keys(this.properties)) {
    frames = frames.concat(frames, this.properties[prop].getAsFrames());
  }
  return frames;
};

/**
 * Cleans out object and sets everything empty
 */
ObjectFrame.prototype.empty = function () {
  // all indexed by property
  this.properties = {};
  this.restrictions = {};
  this.subjid = false;
  this.cls = false;
};

/*
 * Resets object state to original state
 */
ObjectFrame.prototype.reset = function (prop) {
  if (prop) {
    prop = FrameHelper.unshorten(prop);
    const props = [];
    for (let i = 0; i < this.originalFrames.length; i += 1) {
      if (this.originalFrames[i].property === prop) {
        props.push(this.originalFrames[i]);
      }
    }
    if (this.properties[prop]) this.properties[prop] = [];
    this.loadDataFrames(props);
  } else {
    this.restrictions = {};
    this.properties = {};
    this.loadDataFrames(this.originalFrames);
  }
};

/*
 * Clears out any specific information from a tree
 */
ObjectFrame.prototype.clear = function () {
  for (const prop of Object.keys(this.properties)) {
    this.properties[prop].clear();
  }
  return this;
};

/*
 * Filters the frame and its children
 */
ObjectFrame.prototype.mfilter = function (rules, onmatch) {
  const hits = new FrameRule().testRules(rules, this, onmatch);
  for (const prop of Object.keys(this.properties)) {
    if (!this.properties[prop].mfilter) {
      console.log(prop, this.properties[prop]);
    } else {
      this.properties[prop].mfilter(rules, onmatch);
    }
  }
  return this;
};

/**
 * If a class frame is present, it is returned for the given property
 * If no class frame is present and an instance frame is passed in the
 * this enables make it up as you go along editing
 * second argument a class frame will be created from the instance frame.
 */
ObjectFrame.prototype.getPropertyClassFrame = function (prop, jsonlddoc) {
  if (typeof prop === 'object') {
    return new ClassFrame(prop);
  }

  prop = FrameHelper.unshorten(prop);

  if (this.classframes && typeof this.classframes === 'object' && typeof this.classframes[prop] === 'object') {
    // console.log("returning " + prop, this.classframes[prop])
    return this.classframes[prop];
  }
  if (jsonlddoc) {
    const cf = new ClassFrame();
    cf.loadFromJSONLD(jsonlddoc, prop);
    return cf;
  }
  if (this.properties[prop]) {
    return new ClassFrame(this.properties[prop].values[0]);
  }
  return false;
};

/*
 * Returns a list of properties - type can be filled|missing|all
 */
ObjectFrame.prototype.getProperties = function (type) {
  if (type === 'filled' || !this.classframes) {
    return Object.keys(this.properties);
  }
  if (type === 'missing') {
    const filled = Object.keys(this.properties).map((item) => FrameHelper.unshorten(item));
    const all = Object.keys(this.classframes).map((item) => FrameHelper.unshorten(item));
    const missing = [];
    for (let i = 0; i < all.length; i++) {
      if (filled.indexOf(all[i]) === -1 && missing.indexOf(all[i]) === -1) {
        missing.push(all[i]);
      }
    }
    return missing;
  }
  return Object.keys(this.classframes);
};

/**
 * Missing properties are those that are present in the classframe,
 * but not instantiated in the current object frame
 * for this to work we need to load the frame with the associated classframe
 */
ObjectFrame.prototype.getMissingPropertyList = function () {
  const missing = this.getProperties('missing');
  const nmissing = [];
  for (let i = 0; i < missing.length; i++) {
    const cframe = this.getPropertyClassFrame(missing[i]);
    if (cframe) {
      var newb = { label: cframe.getLabel(), value: missing[i] };
    } else {
      var newb = { label: missing[i], value: missing[i] };
    }
    nmissing.push(newb);
  }
  return nmissing;
};

/**
 * Returns a list of all the classes that can show up in the frame
 */
ObjectFrame.prototype.getPossibleContainedClasses = function () {
  const cls = [];
  function efcf(frames) {
    if (frames.type && frames.type === 'class_choice') {
      efcf(frames.operands);
    }
    if (!Array.isArray(frames)) frames = [frames];
    for (let i = 0; i < frames.length; i++) {
      if (frames[i].domain && cls.indexOf(frames[i].domain) === -1) cls.push(frames[i].domain);
      if (frames[i].frame) {
        efcf(frames[i].frame);
      }
    }
  }
  efcf(Object.values(this.classframes));
  return cls;
};

ObjectFrame.prototype.getDocumentLinks = function () {
  const vals = [];
  const props = this.getProperties('filled');
  for (let i = 0; i < props.length; i++) {
    const mprop = this.properties[props[i]];
    for (let k = 0; k < mprop.values.length; k++) {
      const dval = mprop.values[k];
      if (dval.isObject() && dval.getDocumentLinks) {
        const nvals = dval.getDocumentLinks();
        for (let l = 0; l < nvals.length; l++) {
          if (vals.indexOf(nvals[l]) === -1) {
            vals.push(nvals[l]);
          }
        }
      } else if (dval.isDocument()) {
        const nv = dval.get();
        if (vals.indexOf(nv) === -1) {
          vals.push(nv);
        }
      }
    }
  }
  return vals;
};

/**
 * List of properties that are filled in the object
 */
ObjectFrame.prototype.getFilledPropertyList = function () {
  const props = this.getProperties('filled');
  const filled = [];
  for (let i = 0; i < props.length; i++) {
    const cframe = this.getPropertyClassFrame(props[i]);
    if (cframe) {
      var newb = { label: cframe.getLabel(), value: props[i] };
    } else {
      var newb = { label: props[i], value: props[i] };
    }
    filled.push(newb);
  }
  return filled;
};

/*
 * Fills the object frame from the schema - adding all the necessary property
 * frames, etc to make it complete
 */
ObjectFrame.prototype.fillFromSchema = function (newid) {
  if (newid) this.subjid = newid;
  newid = (newid || FrameHelper.genBNID(`${FrameHelper.urlFragment(this.cls)}_`));
  const properties = {};
  if (this.classframes) {
    for (const prop of Object.keys(this.classframes)) {
      const pf = this.getPropertyClassFrame(prop);
      properties[prop] = new PropertyFrame(prop, pf, this);
      properties[prop].fillFromSchema(newid);
    }
  }
  this.properties = properties;
  this.originalFrames = [];
  for (const prop of Object.keys(this.properties)) {
    this.originalFrames.push(this.properties[prop].getAsFrames());
  }
  return this;
};

/*
 * Clones an object frame to be a copy of the current frame
 */
ObjectFrame.prototype.clone = function (newid) {
  const properties = {};
  const cloned = new ObjectFrame(this.cls, false, false, this.parent);
  cloned.classframes = this.classframes;
  cloned.subjid = newid;
  for (const prop of Object.keys(this.properties)) {
    properties[prop] = this.properties[prop].clone();
  }
  cloned.properties = properties;
  return cloned;
};

/**
 * Returns a child frame with a particular id
 * If the second parameter is included, it will only look in that specific property
 * Otherwise searches all properties for the child
 */
ObjectFrame.prototype.getChild = function (childid, prop) {
  let pframe = this.getProperty(prop);
  for (let i = 0; i < pframe.values.length; pframe++) {
    if (pframe.values[i].isObject() && pframe.values[i].subject === childid) return pframe.values[i];
  }
  if (!prop) {
    for (const key of Object.keys(this.properties)) {
      for (let i = 0; i < this.properties[key].values.length; i += 1) {
        if (this.properties[key].values[i].subject() === childid) return this.properties[key].values[i];
      }
    }
  }
  return false;
};

ObjectFrame.prototype.addProperty = function (prop, cls) {
  if (typeof prop !== 'object') prop = FrameHelper.unshorten(prop);
  const cframe = this.getPropertyClassFrame(prop);
  let ndata = false;
  if (cframe) {
    const nprop = new PropertyFrame(prop, cframe, this);
    if (cframe.isObject()) {
      if (!cframe.isClassChoice()) {
        ndata = cframe.createEmpty(FrameHelper.genBNID(`${FrameHelper.urlFragment(cframe.range)}_`));
      }
      if (cls) {
        ndata = cframe.createEmptyChoice(cls, FrameHelper.genBNID(`${FrameHelper.urlFragment(cls)}_`));
      }
      const clss = cframe.getClassChoices();
      if (clss && clss.length) {
        ndata = cframe.createEmptyChoice(clss[0], FrameHelper.genBNID(`${FrameHelper.urlFragment(clss[0])}_`));
      }
    } else {
      ndata = cframe.createEmpty();
    }
    if (ndata) {
      nprop.addValueFrame(ndata);
    }
    if (typeof this.properties[prop] === 'undefined') {
      if (typeof prop === 'object') var p = prop.property;
      else var p = prop;
      this.properties[p] = nprop;
      // this.properties[prop] = nprop;
    }
    // else {
    // this.properties[prop].push(nprop);
    // }
    nprop.status = 'new';
    return nprop;
  }
  return false;
};

ObjectFrame.prototype.addPropertyValue = function (prop, value) {
  prop = FrameHelper.unshorten(prop);
  if (this.properties[prop]) return this.properties[prop].addValue(value);
  return null;
};

ObjectFrame.prototype.removeProperty = function (prop) {
  prop = FrameHelper.unshorten(prop);
  if (typeof this.properties[prop] !== 'undefined') {
    delete (this.properties[prop]);
  }
};

ObjectFrame.prototype.removePropertyValue = function (prop, value, index) {
  prop = FrameHelper.unshorten(prop);
  const pframe = this.properties[prop];
  pframe.removeValue(value, index);
  if (pframe.values.length === 0) {
    this.removeProperty(prop);
  }
};

ObjectFrame.prototype.error = function (msg) {
  if (!this.errors) this.errors = [];
  this.errors.push({ type: 'Internal Object Frame Error', msg });
};

ObjectFrame.prototype.extract = function () {
  const extracts = {};
  for (const prop in this.properties) {
    const extracted = this.properties[prop].extract();
    if (!FrameHelper.empty(extracted)) {
      if (typeof extracts[prop] === 'undefined') extracts[prop] = [];
      extracts[prop] = extracts[prop].concat(extracted);
    }
    if (extracts[prop] && extracts[prop].length === 1) extracts[prop] = extracts[prop][0];
  }
  if (FrameHelper.empty(extracts) && this.parent) {
    return false;
  }

  const ext = this.extractJSONLD(extracts);
  return ext;
};

ObjectFrame.prototype.extractJSONLD = function (extracts) {
  extracts['@type'] = this.cls;
  if (this.subject() !== '_:') extracts['@id'] = this.subject();
  if (this.jsonld_context) extracts['@context'] = this.jsonld_context;
  return extracts;
};

ObjectFrame.prototype.subject = function () {
  return this.subjid || '';
};

ObjectFrame.prototype.get = ObjectFrame.prototype.subject;
ObjectFrame.prototype.set = function (val) {
  this.subjid = val;
};

ObjectFrame.prototype.isObject = function () { return true; };
ObjectFrame.prototype.isProperty = function () { return false; };
ObjectFrame.prototype.isData = function () { return false; };
ObjectFrame.prototype.isClassChoice = function () {
  return (this.frame && this.frame.type === 'class_choice');
};

ObjectFrame.prototype.subjectClass = function () {
  return this.cls;
};

ObjectFrame.prototype.depth = function () {
  if (this.parent) return (this.parent.depth() + 1);
  return 0;
};

ObjectFrame.prototype.getProperty = function (prop) {
  return this.properties[prop];
};

ObjectFrame.prototype.first = function (prop) {
  if (this.properties && this.properties[prop]) {
    return this.properties[prop].first();
  }
};

ObjectFrame.prototype.property = function (prop) {
  if (this.parent) return this.parent.property();
  return false;
};

ObjectFrame.prototype.parentObject = function () {
  if (this.parent && this.parent.parent) {
    return this.parent.parent;
  }
  return false;
};

ObjectFrame.prototype.root = function () {
  if (this.parent) return false;
  return true;
};

ObjectFrame.prototype.renderProperties = function () {
  const props = this.sortProperties();
  const nprops = [];
  for (let i = 0; i < props.length; i++) {
    if (this.properties[props[i]].render) {
      const rend = this.properties[props[i]].render(this.properties[props[i]]);
      if (rend) nprops.push(rend);
    }
  }
  return nprops;
};

ObjectFrame.prototype.sortProperties = function () {
  const unsorted = Object.keys(this.properties);
  if (this.compare) {
    return unsorted.sort((a, b) => this.compare(a, b, this));
  }
  return unsorted.sort((a, b) => this.standardCompare(a, b, this));
};

/*
 * Label first, then datatype properties, then object properties
 */
ObjectFrame.prototype.standardCompare = function (a, b, doc) {
  if (FrameHelper.shorten(a) === 'rdfs:label') return -1;
  if (FrameHelper.shorten(b) === 'rdfs:label') return 1;
  if (FrameHelper.shorten(a) === 'rdfs:comment') return -1;
  if (FrameHelper.shorten(b) === 'rdfs:comment') return 1;
  if (doc.properties[a].isData() && doc.properties[b].isObject()) return -1;
  if (doc.properties[b].isData() && doc.properties[a].isObject()) return 1;
  return 0;
};

ObjectFrame.prototype.cardControlAllows = function (action) {
  if (!this.parent) return true;
  if (this.parent.cframe.hasRestriction()) {
    const rest = this.parent.cframe.restriction;
    const currentnum = this.parent.values.length;
    if (action === 'add' || action === 'clone') {
      if (rest.max && currentnum >= rest.max) {
        return false;
      }
    }
    if (action === 'delete' && (rest.min && currentnum <= rest.min)) {
      return false;
    }
  }
  return true;
};

ObjectFrame.prototype.isUpdated = function () {
  let i = 0;
  for (const prop in this.properties) {
    if (this.originalFrames[i] !== prop) return true;
    if (this.properties[prop].isUpdated()) return true;
    i++;
  }
  if (i !== this.originalFrames.length) return true;
  return false;
};

ObjectFrame.prototype.isNew = function () {
  return (this.subject().substring(0, 2) === '_:');
};

ObjectFrame.prototype.getSummary = function () {
  const ret = { status: 'ok' };
  if (this.isUpdated()) ret.status = 'updated';
  if (this.isNew()) ret.status = 'new';
  ret.propcount = 0;
  for (const prop in this.properties) {
    ret.propcount++;
  }
  ret.long = `${ret.propcount} properties`;
  return ret;
};

ObjectFrame.prototype.saveQuery = function () {
  const q = WOQL.update_object(this.extract());
  this.pathToDoc(q);
  return q;
};

ObjectFrame.prototype.pathToDoc = function (q) {
  q.add_triple(this.subjid, 'type', this.cls);
  if (this.parent) {
    q.add_triple(this.parent.subject(), 'type', this.parent.subjectClass());
    q.add_triple(this.parent.subject(), this.parent.predicate, this.subjid);
    if (this.parent.parent) {
      this.parent.parent.pathToDoc(q);
    }
  }
};

ObjectFrame.prototype.deleteQuery = function () {
  const q = WOQL.delete_object(this.subjid);
  if (this.parent) {
    q.delete_triple(this.parent.subject(), this.parent.predicate, this.subjid);
  }
  return q;
};

function PropertyFrame(property, cframe, parent) {
  this.predicate = property;
  this.cframe = cframe;
  this.parent = parent;
  this.values = [];
}

PropertyFrame.prototype.addJSONLDDocument = function (jsonld) {
  if (this.cframe.isData()) {
    if (Array.isArray(jsonld)) {
      for (var i = 0; i < jsonld.length; i++) {
        var df = new DataFrame(jsonld[i], this, this.values.length);
        this.values.push(df);
      }
    } else {
      var df = new DataFrame(jsonld, this, this.values.length);
      this.values.push(df);
    }
  } else if (Array.isArray(jsonld)) {
    for (var i = 0; i < jsonld.length; i++) {
      const kid = new ObjectFrame(FrameHelper.unshorten(jsonld[i]['@type']), jsonld[i], this.cframe.frame, this);
      this.values.push(kid);
    }
  } else {
    const kid = new ObjectFrame(jsonld['@type'], jsonld, this.cframe.frame, this);
    this.values.push(kid);
  }
};

PropertyFrame.prototype.addFrame = function (frame) {
  if (this.cframe.isData()) {
    const df = new DataFrame(frame, this, this.values.length);
    this.values.push(df);
  } else {
    const kid = new ObjectFrame(this.range(), this.cframe.frame, frame.frame, this, frame);
    this.values.push(kid);
  }
};

PropertyFrame.prototype.addValueFrame = function (oframe) {
  if (oframe) {
    oframe.parent = this;
    oframe.index = this.values.length;
    this.values.push(oframe);
  }
};

PropertyFrame.prototype.addValue = function (val) {
  const nu = this.createEmpty();
  if (val) nu.set(val);
  this.addValueFrame(nu);
  return nu;
};

PropertyFrame.prototype.fillFromSchema = function (newid) {
  if (this.isData() || (this.isObject() && !this.isClassChoice())) {
    const values = [];
    if (this.cframe.hasRestriction() && this.cframe.restriction.min) {
      for (let i = 0; i < this.cframe.restriction.min; i += 1) {
        var nframe = this.createEmpty(newid);
        nframe.parent = this;
        values.push(nframe);
      }
    } else {
      var nframe = this.createEmpty(newid);
      nframe.parent = this;
      values.push(nframe);
    }
    this.values = values;
  } else if (this.isClassChoice()) {
    const clss = this.cframe.getClassChoices();
    if (clss && clss.length) {
      const empty = this.cframe.createEmptyChoice(clss[0], FrameHelper.genBNID(`${FrameHelper.urlFragment(clss[0])}_`));
      empty.parent = this;
      this.values = [empty];
    }
  }
};

PropertyFrame.prototype.isData = function () {
  return this.cframe.isData();
};

PropertyFrame.prototype.isObject = function () {
  return this.cframe.isObject();
};

PropertyFrame.prototype.isProperty = function () {
  return true;
};

PropertyFrame.prototype.property = function () {
  return this.predicate;
};

PropertyFrame.prototype.extract = function () {
  const extracts = [];
  const hasVal = (val) => {
    if (val['@value']) {
      for (var i = 0; i < extracts.length; i++) {
        if (extracts[i]['@value'] && extracts[i]['@value'] === val['@value']
                && extracts[i]['@type'] && extracts[i]['@type'] === val['@type']) return true;
      }
      return false;
    }
    if (val['@id']) {
      for (var i = 0; i < extracts.length; i++) {
        if (extracts[i]['@id'] && extracts[i]['@id'] === val['@id']) return true;
      }
      return false;
    }
  };

  for (let i = 0; i < this.values.length; i++) {
    const val = this.values[i].extract();
    if (val !== '' && val !== false && typeof val !== 'undefined' && !hasVal(val)) extracts.push(val);
  }
  return extracts;
};

PropertyFrame.prototype.subject = function () {
  return (this.parent ? this.parent.subject() : false);
};
PropertyFrame.prototype.subjectClass = function () {
  return (this.parent ? this.parent.subjectClass() : false);
};
PropertyFrame.prototype.depth = function () {
  return (this.parent ? this.parent.depth() : false);
};
PropertyFrame.prototype.updated = function () {
  return (this.parent ? this.parent.childUpdated() : false);
};
PropertyFrame.prototype.range = function () {
  return (this.cframe ? this.cframe.range : '');
};
PropertyFrame.prototype.getLabel = function () {
  return (
  // this.cframe ? this.cframe.getLabel() : '');
    this.cframe ? this.cframe.getLabel() : this.predicate.getLabel());
};
PropertyFrame.prototype.getComment = function () {
  return (this.cframe ? this.cframe.getComment() : false);
};
PropertyFrame.prototype.hasCardinalityRestriction = function () {
  return (this.cframe ? this.cframe.hasRestriction() : false);
};
PropertyFrame.prototype.getRestriction = function () {
  return (this.cframe ? this.cframe.restriction : false);
};
PropertyFrame.prototype.isClassChoice = function () {
  return (this.cframe ? this.cframe.isClassChoice() : false);
};

PropertyFrame.prototype.deletePropertyValue = function (value, index) {
  this.parent.removePropertyValue(this.property(), value, index);
};

PropertyFrame.prototype.removeValue = function (value, index) {
  const nvals = [];
  for (let i = 0; i < this.values.length; i++) {
    if (this.values[i].index !== value.index) {
      nvals.push(this.values[i]);
    }
  }
  this.values = nvals;
  /* let nvals = [] //trial
    for(var i = 0; i<this.values.length; i++){
        if(this.values[i].get() != value){
            nvals.push(this.values[i])
        }
    }
    this.values = nvals */
};

PropertyFrame.prototype.get = function () {
  const gets = [];
  for (let i = 0; i < this.values.length; i++) {
    if (this.values[i]) {
      const x = this.values[i].get();
      if (x) gets.push(x);
    }
  }
  return gets;
};

PropertyFrame.prototype.set = function (val) {
  for (let i = 0; i < this.values.length; i++) {
    if (this.values[i]) {
      this.values[i].set(val);
    }
  }
};

PropertyFrame.prototype.clear = function () {
  for (let i = 0; i < this.values.length; i++) {
    this.values[i].clear();
  }
};

PropertyFrame.prototype.clone = function () {
  const cvalues = [];
  const cloned = new PropertyFrame(this.predicate, this.cframe, this.parent);
  for (let i = 0; i < this.values.length; i++) {
    cvalues.push(this.values[i].clone());
  }
  cloned.values = cvalues;
  return cloned;
  //
};

PropertyFrame.prototype.getAsFrames = function () {
  let fs = [];
  for (let i = 0; i < this.values.length; i++) {
    if (this.values[i]) {
      if (this.isData()) {
        fs.push(this.values[i].getAsFrame());
      } else {
        fs = fs.concat(this.values[i].getAsFrames());
      }
    }
  }
  return fs;
};

PropertyFrame.prototype.createEmpty = function () {
  if (this.cframe.isData()) {
    const df = this.cframe.copy(this.subject());
    df.set('');
    df.status = 'new';
    return df;
  }
  if (this.cframe.isObject()) {
    if (!this.cframe.isClassChoice()) {
      const df = this.cframe.createEmpty(FrameHelper.genBNID(`${FrameHelper.urlFragment(this.cframe.range)}_`));
      df.status = 'new';
      return df;
    }

    const df = new ClassFrame(this.cframe);
    df.status = 'new';
    return df;
  }
};

PropertyFrame.prototype.mfilter = function (rules, onmatch) {
  const hits = new FrameRule().testRules(rules, this, onmatch);
  for (let i = 0; i < this.values.length; i++) {
    this.values[i].mfilter(rules, onmatch);
  }
  return this;
};

/*
 * Shorthand functions to make it easier to access the underlying data
 */

PropertyFrame.prototype.first = function () {
  if (this.values && this.values[0]) {
    return this.values[0].get();
  }
};

PropertyFrame.prototype.renderValues = function () {
  const sortedVals = this.sortValues();
  const vals = [];
  for (let i = 0; i < sortedVals.length; i++) {
    if (sortedVals[i] && sortedVals[i].render) {
      const rend = sortedVals[i].render(sortedVals[i]);
      if (rend) vals.push(rend);
    }
  }
  return vals;
};

PropertyFrame.prototype.sortValues = function () {
  if (this.compare) {
    return this.values.sort((a, b) => this.compare(a, b, this));
  }
  return this.values;
};

PropertyFrame.prototype.cardControlAllows = function (action) {
  if (this.cframe.hasRestriction()) {
    const rest = this.cframe.restriction;
    const currentnum = this.values.length;
    if (action === 'add' || action === 'clone') {
      if (rest.max && currentnum >= rest.max) {
        return false;
      }
    }
    if (action === 'delete' && (rest.min)) {
      return false;
    }
  }
  return true;
};

PropertyFrame.prototype.isUpdated = function () {
  return true;
  // eslint-disable-next-line no-unreachable
  if (this.values.length !== this.originalValues.length) return true;
  for (let i = 0; i < this.values.length; i++) {
    if (this.cframe && this.cframe.isData()) {
      if (this.values[i].value() !== this.originalValues[i]) {
        return true;
      }
    } else {
      if (this.values[i].subject() !== this.originalValues[i]) {
        return true;
      }
      if (this.values[i].isUpdated()) {
        return true;
      }
    }
  }
  return false;
};

PropertyFrame.prototype.saveQuery = function () {
  const q = WOQL.query();
  for (let i = 0; i < this.values.length; i++) {
    q.and(this.values[i].saveQuery());
  }
  this.parent.pathToDoc(q);
  return q;
};

PropertyFrame.prototype.deleteQuery = function () {
  const q = WOQL.query();
  for (let i = 0; i < this.values.length; i++) {
    q.and(this.values[i].deleteQuery());
  }
  return q;
};

function DataFrame(jsonld, parent, index) {
  this.err = false;
  this.index = index;
  if (parent) {
    this.loadParent(parent);
  }
  if (jsonld) {
    this.rangeValue = jsonld;
    if (jsonld['@type']) this.range = jsonld['@type'];
    if (jsonld['@language']) this.language = jsonld['@language'];
    if (!this.type) this.type = (jsonld['@value'] ? 'datatypeProperty' : 'objectProperty');
  }
  return this;
}

DataFrame.prototype.loadParent = function (parent, index) {
  this.parent = parent;
  this.type = parent.type;
  // the id of the object that owns this dataframe
  this.domainValue = parent.subject();
  this.subjid = (parent.subject() || false);
  this.domain = parent.cframe ? parent.cframe.domain : parent.subjectClass();
  this.predicate = parent.cframe ? parent.cframe.predicate : parent.property();
  this.frame = parent.cframe ? parent.cframe.frame : false;
  this.label = parent.getLabel();
  this.comment = parent.getComment();
  this.range = ((parent && parent.cframe) ? parent.cframe.range : false);
  const restriction = (parent.cframe ? parent.cframe.restriction : false);
  this.restriction = false;
  if (restriction && typeof restriction === 'object') {
    this.restriction = new Restriction(restriction);
  }
};

DataFrame.prototype.copy = function (newid) {
  const copy = new DataFrame();
  copy.parent = this.parent;
  copy.range = this.range;
  copy.rangeValue = this.rangeValue;
  copy.index = this.index;
  copy.type = this.type;
  copy.domain = this.domain;
  copy.domainValue = newid || this.domainValue;
  copy.predicate = this.predicate;
  copy.frame = this.frame;
  copy.label = this.label;
  copy.comment = this.comment;
  if (this.restriction) copy.restriction = this.restriction;
  if (this.language) copy.language = this.language;
  return copy;
};

DataFrame.prototype.mfilter = function (rules, onmatch) {
  const hits = new FrameRule().testRules(rules, this, onmatch);
  return this;
};

DataFrame.prototype.reset = function () {
  this.set(this.originalValue);
  // this.redraw();
};

DataFrame.prototype.clone = function () {
  const newb = this.parent.addPropertyValue(this.get());
};

DataFrame.prototype.depth = function () { return (this.parent ? this.parent.depth() : false); };
DataFrame.prototype.property = function () { return (this.parent ? this.parent.property() : false); };
DataFrame.prototype.subject = function () { return (this.parent ? this.parent.subject() : false); };
DataFrame.prototype.subjectClass = function () { return (this.parent ? this.parent.subjectClass() : false); };
DataFrame.prototype.type = function () { return (this.range ? this.range : false); };

DataFrame.prototype.isValidType = function (dt) {
  const vtypes = ['datatypeProperty', 'objectProperty', 'restriction '];
  if (vtypes.indexOf(dt) === -1) return false;
  return true;
};

DataFrame.prototype.getAsFrame = function () {
  const ff = { type: this.type, property: this.property() };
  if (this.range) ff.range = this.range;
  if (this.rangeValue) ff.rangeValue = this.rangeValue;
  if (this.domain) ff.domain = this.domain;
  if (this.domainValue) ff.domainValue = this.domainValue;
  if (this.frame) ff.frame = this.frame;
  if (this.label) ff.label = this.label;
  if (this.comment) ff.comment = this.comment;
  return ff;
};

DataFrame.prototype.hasRestriction = function () {
  if (this.restriction) {
    return this.restriction.hasCardRestriction();
  }
  return false;
};

DataFrame.prototype.getLabel = function () {
  let lab = '';
  if (FrameHelper.shorten(this.predicate) === 'rdfs:label') return 'Name';
  if (FrameHelper.shorten(this.predicate) === 'rdfs:comment') return 'Description';
  if (this.label && typeof this.label === 'object') lab = this.label['@value'];
  if (this.label && typeof this.label === 'string') lab = this.label;
  // always return something
  if (!lab && this.predicate) {
    lab = FrameHelper.labelFromURL(this.predicate);
  }
  if (!lab) lab = FrameHelper.labelFromURL(this.cls);
  return lab;
};

DataFrame.prototype.getType = function () {
  if (this.range) return this.range;
  if (this.rangeValue && this.rangeValue['@type']) return this.rangeValue['@type'];
  return false;
};

ObjectFrame.prototype.getLabel = DataFrame.prototype.getLabel;

DataFrame.prototype.getComment = function () {
  let comment = '';
  if (this.comment && typeof this.comment === 'object') comment = this.comment['@value'];
  if (this.comment && typeof this.comment === 'string') comment = this.comment;
  return comment;
};

ObjectFrame.prototype.getComment = DataFrame.prototype.getComment;

DataFrame.prototype.error = function (msg) {
  if (msg) this.err = msg;
  if (!this.errors) this.errors = [];
  this.errors.push({ type: 'Internal Data Frame Error', msg });
  return this.err;
};

DataFrame.prototype.isValid = function () {
  if (!(this.type && this.isValidType(this.type))) {
    this.error(`Missing or Illegal Frame Type ${this.type}`);
    return false;
  }
  if (!(this.predicate)) {
    this.error('Missing Frame Property');
    return false;
  }
  if (!(this.domain)) {
    this.error('Missing Frame Domain');
    return false;
  }
  if (!(this.range)) {
    this.error('Missing Frame Range');
    return false;
  }
  if (this.isObjectProperty() && !(this.frame && typeof this.frame === 'object')) {
    this.error('Missing Object Frame');
    return false;
  }
  return true;
};

DataFrame.prototype.isObjectProperty = function () {
  return this.type === 'objectProperty';
};

DataFrame.prototype.isData = function () {
  return true;
};

DataFrame.prototype.isDatatypeProperty = function () {
  return this.type === 'datatypeProperty';
};

DataFrame.prototype.isLogic = function () {
  if (this.type === 'and' || this.type === 'or' || this.type === 'xor') {
    return true;
  }
  return false;
};

DataFrame.prototype.isRestriction = function () {
  return this.type === 'restriction';
};

DataFrame.prototype.ftype = function () {
  if (this.isDocument()) return 'document';
  if (this.isDatatypeProperty()) return 'data';
  if (this.isChoice()) return 'oneOf';
  if (this.isObject()) return 'object';
  if (this.isLogic()) return 'logic';
  if (this.isClassChoice()) return 'class_choice';
  return undefined;
};

DataFrame.prototype.isClassChoice = function () {
  return (this.frame && this.frame.type === 'class_choice');
};

DataFrame.prototype.isString = function () {
  if (this.range === FrameHelper.getStdURL('xsd', 'string')) {
    return true;
  }
  return false;
};

DataFrame.prototype.getChoiceOptions = function () {
  const opts = [];
  for (let i = 0; i < this.frame.elements.length; i += 1) {
    const option = {};
    if (this.frame.elements[i].label) {
      option.label = this.frame.elements[i].label['@value'];
    } else {
      option.label = FrameHelper.labelFromURL(this.frame.elements[i].class);
    }
    option.value = this.frame.elements[i].class;
    opts.push(option);
  }
  return opts;
};

DataFrame.prototype.lang = function () {
  return this.language || 'en';
};

DataFrame.prototype.isChoice = function () {
  return (this.frame && this.frame.type === 'oneOf');
};

DataFrame.prototype.isDocument = function () {
  return (this.frame && this.frame.type === 'document');
};

DataFrame.prototype.isObject = function () {
  return (this.isObjectProperty() && this.frame && !(this.isChoice() || this.isDocument()));
};

DataFrame.prototype.isProperty = function () {
  return false;
};

DataFrame.prototype.getTypeShorthand = function () {
  if (this.isDocument()) return 'document';
  if (this.isChoice()) return 'choice';
  const sh = FrameHelper.getShorthand(this.getType());
  return (sh || this.getType());
};

DataFrame.prototype.get = function () {
  if (this.contents) {
    return this.contents;
  }
  if (this.isDatatypeProperty() && this.rangeValue && typeof this.rangeValue['@value'] !== 'undefined') {
    return this.rangeValue['@value'];
  }
  if (this.isChoice() || this.isDocument()) {
    return (this.rangeValue && this.rangeValue['@id'] ? this.rangeValue['@id'] : '');
  }
  return '';
};

DataFrame.prototype.set = function (value, normalizer) {
  if (normalizer) value = normalizer(value, this);
  this.contents = value;
  if (this.isChoice() || this.isDocument()) {
    this.frame.domainValue = value;
  }
  if (this.isDatatypeProperty()) {
    if (!this.rangeValue) this.rangeValue = { '@type': this.range };
    this.rangeValue['@value'] = value;
  }
};

DataFrame.prototype.clear = function () {
  if (this.isDocument() || this.isChoice() || this.isDatatypeProperty()) {
    this.set('');
  }
};

DataFrame.prototype.cardControlAllows = function (action) {
  if (this.parent.cframe.hasRestriction()) {
    const rest = this.parent.cframe.restriction;
    const currentnum = this.parent.values.length;
    if (action === 'add' || action === 'clone') {
      if (rest.max && currentnum >= rest.max) {
        return false;
      }
    }
    if (action === 'delete' && (rest.min && currentnum <= rest.min)) {
      return false;
    }
  }
  return true;
};

DataFrame.prototype.extract = function () {
  const val = this.get();
  if (val !== '' && val !== false) {
    const objlit = {};
    if (!this.isDocument()) {
      objlit['@type'] = this.getType();
    }
    if (this.isChoice() || this.isDocument()) {
      objlit['@id'] = val;
    } else {
      objlit['@value'] = val;
    }
    if (this.language) {
      objlit['@language'] = this.language;
    }
    return objlit;
  }
  return val;
};

DataFrame.prototype.saveQuery = function (newval, ntype, nlang) {
  let upd;
  if (newval === '') return false;
  if (this.isDocument() || this.isChoice()) {
    upd = WOQL.iri(newval);
  } else {
    upd = { '@value': newval };
    upd['@type'] = ntype || this.range;
    if (nlang || this.language) upd['@language'] = nlang || this.language;
  }
  let q;
  if (this.get() !== '') {
    q = WOQL.update_triple(this.parent.subject(), this.predicate, upd, this.extract());
  } else {
    q = WOQL.add_triple(this.parent.subject(), this.predicate, upd);
  }

  if (this.parent.parent) {
    this.parent.parent.pathToDoc(q);
  }
  return q;
};

DataFrame.prototype.deleteQuery = function () {
  const q = WOQL.delete_triple(this.subject(), this.predicate, this.extract());
  return q;
};

/*
 * Class frames represent the archetypal version of a property frame as returned by the class frame api
 */
function ClassFrame(frame, parent, label) {
  this.err = false;
  this.parent = parent;
  // the id of the object that owns this dataframe
  this.subjid = (parent ? parent.subjid : false);
  if (frame) {
    if (frame.label) {
      const dl = label || '';
      if (frame.label['@value']) this.label = frame.label['@value'];
      else if (frame.label) this.label = frame.label;
      else this.label = dl;
    }
    this.load(frame);
  }
}

ClassFrame.prototype = DataFrame.prototype;

ClassFrame.prototype.load = function (frame) {
  if (typeof frame !== 'object') {
    this.error('No frame passed to load');
    return;
  }
  this.domainValue = frame.domainValue;
  this.subjid = (frame.domainValue ? frame.domainValue : false);
  this.type = frame.type;
  this.domain = frame.domain;
  this.predicate = frame.property;
  this.frame = frame.frame;
  this.comment = frame.comment ? frame.comment['@value'] : '';
  this.range = frame.range;

  // all the meta-data carried in frames:
  this.rangeValue = frame.rangeValue;
};

ClassFrame.prototype.loadFromJSONLD = function (jsonld, prop) {
  if (jsonld[prop]) {
    this.predicate = FrameHelper.unshorten(prop);
    this.type = (jsonld[prop]['@value'] ? 'datatypeProperty' : 'objectProperty');
    this.range = FrameHelper.unshorten(jsonld[prop]['@type']);
    this.rangeValue = jsonld[prop]['@id'] ? jsonld[prop]['@id'] : jsonld[prop];
  }
  this.domain = FrameHelper.unshorten(jsonld['@type']);
  this.domainValue = FrameHelper.unshorten(jsonld['@id']);
  this.label = FrameHelper.labelFromURL(this.predicate);
  this.comment = '';// this.getComment()
};

ClassFrame.prototype.isClassChoice = function () {
  return (this.frame && this.frame.type === 'class_choice');
};

ClassFrame.prototype.loadFromObjectFrame = function (par, child) {
  // all the meta-data carried in frames:
  this.type = 'objectProperty';
  this.predicate = par.property;
  this.range = par.range;
  this.rangeValue = child.subjid;
  this.domain = par.cls;
  this.domainValue = par.subjid;
  this.label = par.getLabel();
  this.comment = par.getComment();
  this.restriction = par.restriction;
};

ClassFrame.prototype.createEmptyChoice = function (cls, newid) {
  const cf = this.getChosenClassFrames(cls);
  const objframe = new ObjectFrame(cls);
  if (newid) objframe.subjid = newid;
  objframe.loadClassFrames(cf);
  const fframe = objframe.fillFromSchema();
  fframe.status = 'new';
  return fframe;
};

ClassFrame.prototype.getChosenClassFrames = function (chosen) {
  let nc = [];
  for (let i = 0; i < this.frame.operands.length; i += 1) {
    for (let j = 0; j < this.frame.operands[i].length; j += 1) {
      if (chosen === this.frame.operands[i][j].domain) {
        nc = nc.concat(this.frame.operands[i][j]);
      }
    }
  }
  return nc;
};

ClassFrame.prototype.createEmpty = function (newid) {
  let objframe;
  if (this.isObject()) {
    if (this.isClassChoice()) {
      // objframe=new ObjectFrame(this.predicate, {}, this)
      objframe = new ObjectFrame(this.predicate);
    } else {
      objframe = new ObjectFrame(this.range);
    }
    if (newid) objframe.subjid = newid;
    objframe.loadClassFrames(this.frame);
    const fframe = objframe.fillFromSchema();
    fframe.status = 'new';
    return fframe;
  }
  if (this.isData()) {
    const dataframe = this.copy(newid);
    dataframe.set('');
    dataframe.status = 'new';
    return dataframe;
  }
  return undefined;
};

ClassFrame.prototype.cloneDataFrame = function (newid, other) {
  return other;
};

ClassFrame.prototype.clone = function (newid, other) {
  if (this.isObject()) {
    console.log('cannot clone class frame');
  } else if (this.isData()) {
    return this.cloneDataFrame(newid, other);
  }
  return undefined;
};

ClassFrame.prototype.getClassChoices = function () {
  const choices = [];
  // if (this.frame.operands) {
  /* for (let i = 0; i < this.frame.operands.length; i += 1) {
    for (let j = 0; j < this.frame.operands[i].length; j += 1) {
      const domcls = this.frame.operands[i][j].domain;
      if (domcls && choices.indexOf(domcls) === -1) {
        choices.push(domcls);
      }
    }
  } */
  // }
  return choices;
};

ClassFrame.prototype.getChosenClassFrame = function (chosen, parent) {
  for (let i = 0; i < this.frame.operands.length; i += 1) {
    const operand = this.frame.operands[i];
    if (operand.class && chosen === operand.class) {
      const cf = new ClassFrame(operand, parent, this.label);
      return cf;
    }
  }
  return false;
};

ClassFrame.prototype.getChosenFrame = function (dataframe) {
  return dataframe;
};

ClassFrame.prototype.isData = function () {
  return (this.isDocument() || this.isChoice() || this.isDatatypeProperty());
};

function Restriction(restriction) {
  this.min = 0;
  this.max = 0;
  if (restriction) this.loadRestriction(restriction);
}

Restriction.prototype.hasCardRestriction = function () {
  if (this.min === 0 && this.max === 0) return false;
  return true;
};

Restriction.prototype.loadRestriction = function (restriction) {
  if (typeof restriction.cardinality !== 'undefined') {
    this.max = restriction.cardinality;
    this.min = restriction.cardinality;
  } else if (typeof restriction.maxCardinality !== 'undefined') {
    this.max = restriction.maxCardinality;
  } else if (typeof restriction.minCardinality !== 'undefined') {
    this.min = restriction.minCardinality;
  } else if (typeof restriction.type !== 'undefined' && restriction.type === 'and' && typeof restriction.operands === 'object') {
    for (let i = 0; i < restriction.operands.length; i += 1) {
      const nrest = new Restriction(restriction.operands[i]);
      if (this.max === 0 && nrest.max > 0) this.max = nrest.max;
      else if (this.max > 0 && nrest.max > 0 && nrest.max < this.max) this.max = nrest.max;
      if (this.min === 0 && nrest.min > 0) this.min = nrest.min;
      else if (this.min > 0 && nrest.min > 0 && nrest.min > this.min) this.min = nrest.min;
    }
  }
};

module.exports = ObjectFrame;


/***/ }),

/***/ 4338:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const Config = __nccwpck_require__(9066);
const WOQLStream = __nccwpck_require__(3130);

function WOQLStreamConfig() {
  Config.ViewConfig.call(this);
  this.type = 'stream';
}

Object.setPrototypeOf(WOQLStreamConfig.prototype, Config.ViewConfig.prototype);

WOQLStreamConfig.prototype.create = function (client) {
  const wqt = new WOQLStream(client, this);
  return wqt;
};

WOQLStreamConfig.prototype.row = function () {
  // eslint-disable-next-line no-use-before-define
  const wqt = new WOQLStreamRule().scope('row');
  this.rules.push(wqt);
  return wqt;
};

WOQLStreamConfig.prototype.template = function (template) {
  if (!template) return this.mtemplate;
  this.mtemplate = template;
  return this;
};

WOQLStreamConfig.prototype.prettyPrint = function () {
  let str = 'view = View.stream();\n';
  if (typeof this.template() !== 'undefined') {
    str += `view.template(${JSON.stringify(this.template())})\n`;
  }
  // eslint-disable-next-line no-plusplus
  for (let i = 0; i < this.rules.length; i++) {
    str += `view.${this.rules[i].prettyPrint()}\n`;
  }
  return str;
};

WOQLStreamConfig.prototype.loadJSON = function (config, rules) {
  const jr = [];
  // eslint-disable-next-line no-plusplus
  for (let i = 0; i < rules.length; i++) {
    // eslint-disable-next-line no-use-before-define
    const nr = new WOQLStreamRule();
    nr.json(rules[i]);
    jr.push(nr);
  }
  this.rules = jr;
  if (config.template) {
    this.mtemplate = config.template;
  }
};

WOQLStreamConfig.prototype.json = function () {
  const jr = [];
  // eslint-disable-next-line no-plusplus
  for (let i = 0; i < this.rules.length; i++) {
    jr.push(this.rules[i].json());
  }
  const conf = {};
  if (this.mtemplate) {
    conf.template = this.mtemplate;
  }
  const mj = { stream: conf, rules: jr };
  return mj;
};

function WOQLStreamRule() {
  Config.WOQLViewRule.call(this);
}

Object.setPrototypeOf(WOQLStreamRule.prototype, Config.WOQLViewRule.prototype);

WOQLStreamRule.prototype.template = function (template) {
  if (!template) return this.rule.template;
  this.rule.template = template;
  return this;
};

module.exports = WOQLStreamConfig;


/***/ }),

/***/ 7350:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* eslint-disable no-use-before-define */
/* eslint-disable no-plusplus */
const Config = __nccwpck_require__(9066);
const WOQLTable = __nccwpck_require__(1480);
const UTILS = __nccwpck_require__(4948);

function WOQLTableConfig() {
  Config.ViewConfig.call(this);
  this.type = 'table';
}

Object.setPrototypeOf(WOQLTableConfig.prototype, Config.ViewConfig.prototype);

WOQLTableConfig.prototype.create = function (client) {
  const wqt = new WOQLTable(client, this);
  return wqt;
};

WOQLTableConfig.prototype.json = function () {
  const jr = [];
  for (let i = 0; i < this.rules.length; i++) {
    jr.push(this.rules[i].json());
  }
  const conf = {};
  if (typeof this.column_order() !== 'undefined') {
    conf.column_order = this.column_order();
  }
  if (typeof this.pagesize() !== 'undefined') {
    conf.pagesize = this.pagesize();
  }
  if (typeof this.renderer() !== 'undefined') {
    conf.renderer = this.renderer();
  }
  if (typeof this.filter() !== 'undefined') {
    conf.filter = this.filter();
  }
  if (typeof this.filterable() !== 'undefined') {
    conf.filterable = this.filterable();
  }
  if (typeof this.pager() !== 'undefined') {
    conf.pager = this.pager();
  }
  if (typeof this.bindings() !== 'undefined') {
    conf.bindings = this.bindings();
  }
  if (typeof this.page() !== 'undefined') {
    conf.page = this.page();
  }
  if (typeof this.changesize() !== 'undefined') {
    conf.changesize = this.changesize();
  }
  const mj = { table: conf, rules: jr };
  return mj;
};

WOQLTableConfig.prototype.loadJSON = function (config, rules) {
  const jr = [];
  if (Array.isArray(rules)) {
    for (let i = 0; i < rules.length; i++) {
      // eslint-disable-next-line no-use-before-define
      const nr = new WOQLTableRule();
      nr.json(rules[i]);
      jr.push(nr);
    }
  }
  this.rules = jr;
  if (!config) return this;
  if (typeof config.column_order !== 'undefined') {
    this.column_order(...config.column_order);
  }
  if (typeof config.pagesize !== 'undefined') {
    this.pagesize(config.pagesize);
  }
  if (typeof config.renderer !== 'undefined') {
    this.renderer(config.renderer);
  }
  if (typeof config.filter !== 'undefined') {
    this.filter(config.filter);
  }
  if (typeof config.filterable !== 'undefined') {
    this.filterable(config.filterable);
  }
  if (typeof config.bindings !== 'undefined') {
    this.bindings(config.bindings);
  }
  if (typeof config.pager !== 'undefined') {
    this.pager(config.pager);
  }
  if (typeof config.page !== 'undefined') {
    this.page(config.page);
  }
  if (typeof config.changesize !== 'undefined') {
    this.changesize(config.changesize);
  }
  return this;
};

WOQLTableConfig.prototype.prettyPrint = function () {
  let str = 'view = View.table();\n';
  if (typeof this.column_order() !== 'undefined') {
    str += `view.column_order('${this.column_order()}')\n`;
  }
  if (typeof this.pagesize() !== 'undefined') {
    str += `view.pagesize(${this.pagesize()})\n`;
  }
  if (typeof this.renderer() !== 'undefined') {
    str += `view.renderer('${this.renderer()}')\n`;
  }
  if (typeof this.pager() !== 'undefined') {
    str += `view.pager(${this.pager()})\n`;
  }
  if (typeof this.page() !== 'undefined') {
    str += `view.page(${this.page()})\n`;
  }
  if (typeof this.changesize() !== 'undefined') {
    str += `view.changesize(${this.changesize()})\n`;
  }

  for (let i = 0; i < this.rules.length; i++) {
    const x = this.rules[i].prettyPrint();
    if (x) str += `view.${x}\n`;
  }
  return str;
};

/**
 * @param {boolean} canfilter
 * @returns  WOQLTableConfig
 */

WOQLTableConfig.prototype.filterable = function (canfilter) {
  if (!canfilter && canfilter !== false) return this.tfilterable;
  this.tfilterable = canfilter;
  return this;
};

/*
* default is string
* filter type number | list | date
*/
WOQLTableConfig.prototype.filter = function (filter) {
  if (!filter) return this.tfilter;
  this.tfilter = filter;
  return this;
};

WOQLTableConfig.prototype.renderer = function (rend) {
  if (!rend) return this.trenderer;
  this.trenderer = rend;
  return this;
};

WOQLTableConfig.prototype.header = function (theader) {
  if (typeof theader === 'undefined') return this.theader;
  this.theader = theader;
  return this;
};

/**
 * @param  {...any} val
 * @returns {object}
 */
WOQLTableConfig.prototype.column_order = function (...val) {
  if (typeof val === 'undefined' || val.length === 0) {
    return this.order;
  }
  this.order = UTILS.removeNamespacesFromVariables(val);
  return this;
};

WOQLTableConfig.prototype.pager = function (val) {
  if (typeof val === 'undefined') {
    return this.show_pager;
  }
  this.show_pager = val;
  return this;
};

WOQLTableConfig.prototype.changesize = function (val) {
  if (typeof val === 'undefined') return this.change_pagesize;
  this.change_pagesize = val;
  return this;
};

WOQLTableConfig.prototype.pagesize = function (val) {
  if (typeof val === 'undefined') {
    return this.show_pagesize;
  }
  this.show_pagesize = val;
  return this;
};

WOQLTableConfig.prototype.page = function (val) {
  if (typeof val === 'undefined') {
    return this.show_pagenumber;
  }
  this.show_pagenumber = val;
  return this;
};

WOQLTableConfig.prototype.column = function (...cols) {
  const nr = new WOQLTableRule().scope('column');
  nr.setVariables(cols);
  this.rules.push(nr);
  return nr;
};

WOQLTableConfig.prototype.row = function () {
  const nr = new WOQLTableRule().scope('row');
  this.rules.push(nr);
  return nr;
};

/*
 * Table
 */

function WOQLTableRule() {
  Config.WOQLViewRule.call(this);
}

Object.setPrototypeOf(WOQLTableRule.prototype, Config.WOQLViewRule.prototype);

WOQLTableRule.prototype.header = function (hdr) {
  if (typeof hdr === 'undefined') {
    return this.rule.header;
  }
  this.rule.header = hdr;
  return this;
};

WOQLTableRule.prototype.filter = function (hdr) {
  if (typeof hdr === 'undefined') {
    return this.rule.filter;
  }
  this.rule.filter = hdr;
  return this;
};

WOQLTableRule.prototype.filterable = function (hdr) {
  if (typeof hdr === 'undefined') {
    return this.rule.filterable;
  }
  this.rule.filterable = hdr;
  return this;
};

WOQLTableRule.prototype.width = function (wid) {
  if (typeof wid === 'undefined') {
    return this.rule.width;
  }
  this.rule.width = wid;
  return this;
};

WOQLTableRule.prototype.maxWidth = function (wid) {
  if (typeof wid === 'undefined') {
    return this.rule.maxWidth;
  }
  this.rule.maxWidth = wid;
  return this;
};

WOQLTableRule.prototype.minWidth = function (wid) {
  if (typeof wid === 'undefined') {
    return this.rule.minWidth;
  }
  this.rule.minWidth = wid;
  return this;
};

WOQLTableRule.prototype.unsortable = function (unsortable) {
  if (typeof unsortable === 'undefined') {
    return this.rule.unsortable;
  }
  this.rule.unsortable = unsortable;
  return this;
};

WOQLTableRule.prototype.uncompressed = function (uncompressed) {
  if (typeof uncompressed === 'undefined') {
    return this.rule.uncompressed;
  }
  this.rule.uncompressed = uncompressed;
  return this;
};

WOQLTableRule.prototype.prettyPrint = function () {
  let str = Config.WOQLViewRule.prototype.prettyPrint.apply(this);
  if (typeof this.header() !== 'undefined') {
    str += `.header(${this.header()})`;
  }
  if (this.sortable()) {
    str += '.sortable(true)';
  }
  if (typeof this.width() !== 'undefined') {
    str += `.width(${this.width()})`;
  }
  if (typeof this.maxWidth() !== 'undefined') {
    str += `.maxWidth(${this.maxWidth()})`;
  }
  if (typeof this.minWidth() !== 'undefined') {
    str += `.minWidth(${this.minWidth()})`;
  }
  return str;
};

module.exports = WOQLTableConfig;


/***/ }),

/***/ 786:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const UTILS = __nccwpck_require__(4948);

/**
 * @file Terminus Rules
 * @license Apache Version 2
 * Abstract object to support applying matching rules to result sets and documents
 * sub-classes are FrameRule and WOQLRule - this just has common functions
 */
function TerminusRule() {}

/**
 * @param {Boolean} tf - the rule will match all literals or all non-literals
 */
TerminusRule.prototype.literal = function (tf) {
  if (typeof tf === 'undefined') {
    return this.pattern.literal;
  }
  this.pattern.literal = tf;
  return this;
};

/**
 * @param {[TYPE_URLS]} list - parameters are types identified by prefixed URLS (xsd:string...)
 */
TerminusRule.prototype.type = function (...list) {
  if (typeof list === 'undefined' || list.length === 0) {
    return this.pattern.type;
  }
  this.pattern.type = list;
  return this;
};

/**
 * Specifies the scope of a rule - row / cell / object / property / * .. what part
 * of the result does the rule apply to
 */
TerminusRule.prototype.scope = function (scope) {
  if (typeof scope === 'undefined') {
    return this.pattern.scope;
  }
  this.pattern.scope = scope;
  return this;
};

/**
 * Specifies that the rule matches a specific value
 */
TerminusRule.prototype.value = function (...val) {
  if (typeof val === 'undefined') {
    return this.pattern.value;
  }
  this.pattern.value = val;
  return this;
};

/**
 * Produces a canonical json format to represent the rule
 */
TerminusRule.prototype.json = function (mjson) {
  if (!mjson) {
    const njson = {};
    if (this.pattern) njson.pattern = this.pattern.json();
    if (this.rule) njson.rule = this.rule;
    return njson;
  }

  if (mjson.pattern) this.pattern.setPattern(mjson.pattern);
  if (mjson.rule) this.rule = mjson.rule;

  return this;
};

/**
 * Contained Pattern Object to encapsulate pattern matching
 * @param {Object} pattern
 */
// eslint-disable-next-line no-unused-vars
function TerminusPattern(pattern) {}

TerminusPattern.prototype.setPattern = function (pattern) {
  if (typeof pattern.literal !== 'undefined') this.literal = pattern.literal;
  if (pattern.type) this.type = pattern.type;
  if (pattern.scope) this.scope = pattern.scope;
  if (pattern.value) this.value = pattern.value;
};

TerminusPattern.prototype.json = function () {
  const json = {};
  if (typeof this.literal !== 'undefined') json.literal = this.literal;
  if (this.type) json.type = this.type;
  if (this.scope) json.scope = this.scope;
  if (this.value) json.value = this.value;
  return json;
};

/**
 * Tests whether the passed values matches the basic pattern
 */
TerminusPattern.prototype.testBasics = function (scope, value) {
  if (this.scope && scope && this.scope !== scope) return false;
  if (this.type) {
    const dt = value['@type'];
    if (!dt || !this.testValue(dt, this.type)) return false;
  }
  if (typeof this.literal !== 'undefined') {
    if (!(this.literal === !(typeof value['@type'] === 'undefined'))) return false;
  }
  if (typeof this.value !== 'undefined') {
    if (!this.testValue(value, this.value)) return false;
  }
  return true;// passed all tests
};

TerminusPattern.prototype.testValue = function (value, constraint) {
  if (!value) return null;
  const vundertest = (value['@value'] ? value['@value'] : value);
  if (typeof constraint === 'function') return constraint(vundertest);
  // eslint-disable-next-line no-param-reassign
  if (constraint && !Array.isArray(constraint)) constraint = [constraint];
  // eslint-disable-next-line no-plusplus
  for (let i = 0; i < constraint.length; i++) {
    const nc = constraint[i];
    if (typeof vundertest === 'string') {
      if (this.stringMatch(nc, vundertest)) return true;
    } else if (typeof vundertest === 'number') {
      if (this.numberMatch(nc, vundertest)) return true;
    }
  }
  return false;
};

/**
 * Unpacks an array into a list of arguments
 * @param {Boolean} nonstring - if set, the values will be double-quoted only when
 * they are strings, otherwise, all will be quoted as strings
 */
TerminusPattern.prototype.unpack = function (arr, nonstring) {
  let str = '';
  if (nonstring) {
    // eslint-disable-next-line no-plusplus
    for (let i = 0; i < arr.length; i++) {
      if (typeof arr[i] === 'string') {
        str += `"${arr[i]}"`;
      } else {
        str += arr[i];
      }
      if (i < (arr.length - 1)) str += ', ';
    }
  } else {
    str = `"${arr.join('","')}"`;
  }
  return str;
};

TerminusPattern.prototype.IDsMatch = function (ida, idb) {
  return UTILS.compareIDs(ida, idb);
};

TerminusPattern.prototype.classIDsMatch = function (ida, idb) {
  return this.IDsMatch(ida, idb);
};

TerminusPattern.prototype.propertyIDsMatch = function (ida, idb) {
  const match = this.IDsMatch(ida, idb);
  return match;
};

TerminusPattern.prototype.rangeIDsMatch = function (ida, idb) {
  return this.IDsMatch(ida, idb);
};

TerminusPattern.prototype.valuesMatch = function (vala, valb) {
  return vala === valb;
};
TerminusPattern.prototype.numberMatch = function (vala, valb) {
  if (typeof vala === 'string') {
    try {
      // eslint-disable-next-line no-eval
      return eval(valb + vala);
    } catch (e) {
      return false;
    }
  }
  return vala === valb;
};

TerminusPattern.prototype.stringMatch = function (vala, valb) {
  if (vala.substring(0, 1) === '/') {
    const pat = new RegExp(vala.substring(1));
    return pat.test(valb);
  }

  return vala === valb;
};

module.exports = { TerminusRule, TerminusPattern };


/***/ }),

/***/ 9066:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/// /@ts-check
const { WOQLRule } = __nccwpck_require__(8495);

/**
 * Generic functions / configs that are available to all config types
 * @module ViewConfig
 * @constructor
 */
function ViewConfig() {
  this.rules = [];
}

ViewConfig.prototype.render = function (func) {
  if (func) this.view_render = func;
  return this.view_render;
};

ViewConfig.prototype.renderer = function (val) {
  if (val) this.view_renderer = val;
  return this.view_renderer;
};

ViewConfig.prototype.getRulesJSON = function () {
  const jr = [];
  // eslint-disable-next-line no-plusplus
  for (let i = 0; i < this.rules.length; i++) {
    jr.push(this.rules[i].json());
  }
  return jr;
};

ViewConfig.prototype.getBasicJSON = function () {
  const jr = {};
  if (this.view_render) jr.render = this.view_render;
  if (this.view_renderer) jr.renderer = this.view_renderer;
  if (this.vbindings) jr.bindings = this.vbindings;
  return jr;
};

ViewConfig.prototype.loadBasicJSON = function (json) {
  if (json.render) this.view_render = json.view_render;
  if (json.renderer) this.view_renderer = json.view_renderer;
  if (json.bindings) this.vbindings = json.bindings;
};

ViewConfig.prototype.getBasicprettyPrint = function () {
  let str = '';
  if (typeof this.render() !== 'undefined') {
    str += `view.render(${this.render()})\n`;
  }
  if (typeof this.renderer() !== 'undefined') {
    str += `view.renderer('${this.renderer()}')\n`;
  }
  if (typeof this.bindings() !== 'undefined') {
    str += `view.bindings('${this.bindings()}')\n`;
  }
  return str;
};

ViewConfig.prototype.bindings = function (bindings) {
  if (typeof bindings !== 'undefined') {
    this.vbindings = bindings;
  }
  return this.vbindings;
};

/**
 * @module WOQLViewRule
 * @constructor
 */
function WOQLViewRule() {
  WOQLRule.call(this);
  this.rule = {};
}

Object.setPrototypeOf(WOQLViewRule.prototype, WOQLRule.prototype);

WOQLViewRule.prototype.prettyPrint = function (type) {
  let str = '';
  if (this.pattern) {
    str = this.pattern.prettyPrint(type);
  }
  if (typeof this.color() !== 'undefined') {
    str += `.color([${this.color().join(',')}])`;
  }
  if (typeof this.hidden() !== 'undefined') {
    str += `.hidden(${this.hidden()})`;
  }
  if (typeof this.size() !== 'undefined') {
    str += `.size('${this.size()}')`;
  }
  if (typeof this.icon() !== 'undefined') {
    str += `.icon(${JSON.stringify(this.icon())})`;
  }
  if (typeof this.text() !== 'undefined') {
    str += `.text(${JSON.stringify(this.text())})`;
  }
  if (typeof this.border() !== 'undefined') {
    str += `.border(${JSON.stringify(this.border())})`;
  }
  if (typeof this.args() !== 'undefined') {
    str += `.args(${JSON.stringify(this.args())})`;
  }
  if (typeof this.renderer() !== 'undefined') {
    str += `.renderer('${this.renderer()}')`;
  }
  if (typeof this.render() !== 'undefined') {
    str += `.render(${this.render()})`;
  }
  if (typeof this.click() !== 'undefined') {
    str += `.click(${this.click()})`;
  }
  if (typeof this.hover() !== 'undefined') {
    str += `.hover(${this.hover()})`;
  }
  return str;
};

WOQLViewRule.prototype.json = function (mjson) {
  if (!mjson) {
    const json = {};
    if (this.pattern) json.pattern = this.pattern.json();
    json.rule = this.rule;
    return json;
  }
  this.rule = mjson.rule || {};
  if (mjson.pattern) this.pattern.setPattern(mjson.pattern);
  return this;
};

WOQLViewRule.prototype.size = function (size) {
  if (typeof size === 'undefined') {
    return this.rule.size;
  }
  this.rule.size = size;
  return this;
};

WOQLViewRule.prototype.color = function (color) {
  if (typeof color === 'undefined') {
    return this.rule.color;
  }
  this.rule.color = color;
  return this;
};

WOQLViewRule.prototype.icon = function (json) {
  if (json) {
    this.rule.icon = json;
    return this;
  }
  return this.rule.icon;
};

WOQLViewRule.prototype.text = function (json) {
  if (json) {
    this.rule.text = json;
    return this;
  }
  return this.rule.text;
};

WOQLViewRule.prototype.border = function (json) {
  if (json) {
    this.rule.border = json;
    return this;
  }
  return this.rule.border;
};

WOQLViewRule.prototype.renderer = function (rend) {
  if (typeof rend === 'undefined') {
    return this.rule.renderer;
  }
  this.rule.renderer = rend;
  return this;
};

WOQLViewRule.prototype.render = function (func) {
  if (typeof func === 'undefined') {
    return this.rule.render;
  }
  this.rule.render = func;
  return this;
};

WOQLViewRule.prototype.click = function (onClick) {
  if (onClick) {
    this.rule.click = onClick;
    return this;
  }
  return this.rule.click;
};

WOQLViewRule.prototype.hover = function (onHover) {
  if (onHover) {
    this.rule.hover = onHover;
    return this;
  }
  return this.rule.hover;
};

WOQLViewRule.prototype.hidden = function (hidden) {
  if (typeof hidden === 'undefined') {
    return this.rule.hidden;
  }
  this.rule.hidden = hidden;
  return this;
};

WOQLViewRule.prototype.args = function (args) {
  if (typeof args === 'undefined') {
    return this.rule.args;
  }
  this.rule.args = args;
  return this;
};

module.exports = { WOQLViewRule, ViewConfig };


/***/ }),

/***/ 3132:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __nccwpck_require__) => {

const WOQLChartConfig = __nccwpck_require__(2998);

function WOQLChart(client, config) {
  this.client = client;
  this.config = (config || new WOQLChartConfig());
  return this;
}

WOQLChart.prototype.options = function (config) {
  this.config = config;
  return this;
};

WOQLChart.prototype.setResult = function (res) {
  this.result = res;
  return this;
};


/***/ }),

/***/ 9494:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* eslint-disable consistent-return */
/* eslint-disable no-plusplus */
/* eslint-disable camelcase */
/* eslint-disable no-undef */
const WOQLChooserConfig = __nccwpck_require__(321);
const UTILS = __nccwpck_require__(4948);
const { WOQLRule } = __nccwpck_require__(8495);

/**
 * Very simple implementation of a WOQL backed chooser
 * Makes a drop down from a WOQL query - configuration tells it which columns to use...
 * @param {WOQLClient} client
 * @param {WOQLChooserConfig} config
 * @returns {WOQLChooser}
 */
function WOQLChooser(client, config) {
  this.client = client;
  this.config = (config || new WOQLChooserConfig());
  this.selected = false;
  this.cursor = 0;
  return this;
}

WOQLChooser.prototype.options = function (config) {
  this.config = config;
  return this;
};

WOQLChooser.prototype.set = function (id) {
  if (this.selected !== id) {
    this.selected = id;
    const ch = this.config.change;
    if (ch) ch(id);
  }
};

/*
 * Sets up the required variables from the result / config
 */
WOQLChooser.prototype.setResult = function (result) {
  this.result = result;
  this.choices = [];
  let rows = 0;
  const variables = result.getVariableList();
  if (!this.config.values() && variables.length) {
    this.config.values(variables[0]);
  }
  // sort it
  if (this.config.sort()) {
    this.result.sort(this.config.sort(), this.config.direction());
  }
  // eslint-disable-next-line no-cond-assign
  while (row = this.result.next()) {
    if (row && this.includeRow(row, this.result.cursor)) {
      this.choices.push(this.rowToChoice(row, rows++));
    }
  }
  return this;
};

WOQLChooser.prototype.includeRow = function (row, index) {
  const matched_rules = new WOQLRule().matchRow(this.config.rules, row, index, 'hidden');
  for (let i = 0; i < matched_rules.length; i++) {
    if (matched_rules[i].rule.hidden) return false;
  }
  return true;
};

WOQLChooser.prototype.rowToChoice = function (row, rownum) {
  const choice = {
    id: this.getRowID(row),
  };
  choice.label = this.getLabelFromBinding(row, rownum);
  choice.title = this.getTitleFromBinding(row, rownum);
  choice.selected = this.getSelectedFromBinding(row, rownum);
  return choice;
};

WOQLChooser.prototype.getRowID = function (row) {
  const rval = row[this.config.values()];
  if (rval['@value']) return rval['@value'];
  return rval;
};

WOQLChooser.prototype.getLabelFromBinding = function (row, rownum) {
  const sp = this.getSpecialRenderer(row, rownum, 'label');
  if (sp) return this.renderSpecial(sp, row, rownum);
  if (this.config.labels()) {
    if (row[this.config.labels()]) {
      let lab = row[this.config.labels()];
      if (lab['@value']) lab = lab['@value'];
      if (lab !== 'system:unknown') return lab;
    }
  }
  return UTILS.labelFromURL(this.getRowID(row));
};

WOQLChooser.prototype.getTitleFromBinding = function (row, rownum) {
  const sp = this.getSpecialRenderer(row, rownum, 'title');
  if (sp) return this.renderSpecial(sp, row, rownum);
  if (this.config.titles()) {
    if (row[this.config.titles()]) {
      let lab = row[this.config.titles()];
      if (lab['@value']) lab = lab['@value'];
      if (lab !== 'system:unknown') return lab;
    }
  }
  return false;
};

WOQLChooser.prototype.getSelectedFromBinding = function (row, rownum) {
  const matched_rules = new WOQLRule().matchRow(this.config.rules, row, rownum, 'selected');
  if (matched_rules && matched_rules.length) {
    return matched_rules[matched_rules.length - 1].rule.selected;
  }
  return false;
};

WOQLChooser.prototype.render = function () {
  if (this.renderer) return this.renderer.render(this);
};

WOQLChooser.prototype.setRenderer = function (rend) {
  this.renderer = rend;
  return this;
};

WOQLChooser.prototype.getSpecialRenderer = function (row, index, type) {
  const matched_rules = new WOQLRule().matchRow(this.config.rules, row, index, type);
  for (let i = 0; i < matched_rules.length; i++) {
    if (matched_rules[i].rule[type]) return matched_rules[i].rule[type];
  }
  return false;
};

WOQLChooser.prototype.renderSpecial = function (rule, row) {
  if (rule && typeof rule === 'function') {
    return rule(row);
  }
  if (rule && typeof rule === 'string') {
    return rule;
  }
};

WOQLChooser.prototype.count = function () {
  return this.result.count();
};

WOQLChooser.prototype.first = function () {
  this.cursor = 0;
  return this.choices[this.cursor];
};

WOQLChooser.prototype.next = function () {
  const res = this.choices[this.cursor];
  this.cursor++;
  return res;
};

WOQLChooser.prototype.prev = function () {
  if (this.cursor > 0) {
    this.cursor--;
    return this.choices[this.cursor];
  }
};

module.exports = WOQLChooser;


/***/ }),

/***/ 5441:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* eslint-disable guard-for-in */
/* eslint-disable no-continue */
/* eslint-disable no-redeclare */
/* eslint-disable block-scoped-var */
/* eslint-disable no-var */
/* eslint-disable vars-on-top */
/* eslint-disable camelcase */
/* eslint-disable no-param-reassign */
/* eslint-disable no-restricted-syntax */
/* eslint-disable no-plusplus */
const WOQLGraphConfig = __nccwpck_require__(120);
const UTILS = __nccwpck_require__(4948);
const { WOQLRule } = __nccwpck_require__(8495);

function WOQLGraph(client, config) {
  this.client = client;
  this.config = (config || new WOQLGraphConfig());
  this.nodes = [];
  this.edges = [];
}

/* "nodes": [
    {
      "id": 1,
      "name": "A"
    },
    {
      "id": 2,
      "name": "B"
    },
    {
      "id": 3,
      "name": "C"
    }
]

"link" :[
  {
      "source": 1,
      "target": 2
    }
] */

WOQLGraph.prototype.options = function (config) {
  this.config = config;
  return this;
};

WOQLGraph.prototype.setResult = function (result) {
  this.result = result;
  this.calculateVariableTypes(result);
};

WOQLGraph.prototype.calculateVariableTypes = function () {
  // var bindings = this.result.getBindings();
  const bindings = this.result;
  if (bindings && bindings.length) {
    for (let i = 0; i < bindings.length; i++) {
      this.extractFromBinding(bindings[i], i);
    }
  }
  this.edges = this.combineEdges(this.edges);
  this.nodes = this.combineNodes(this.nodes);
};

WOQLGraph.prototype.extractFromBinding = function (row, rownum) {
  /*
  * check if I have to add the row
  */
  if (this.includeRow(row, rownum)) {
    // get all the nodes (ids - non literals) //
    // see which nodes are excluded ...
    const nodes = [];
    // eslint-disable-next-line no-unused-vars
    const lits = [];
    for (const k in row) {
      if (typeof row[k] === 'string') {
        if (row[k] && row[k] !== 'system:unknown' && this.includeNode(k, row)) {
          nodes.push(k);
        }
      } else if (row[k]['@value'] && this.includeLiteralNode(k, row)) {
        nodes.push(k);
      }
    }
    if (nodes.length === 0) return;
    this.createEdgesFromIDs(nodes, row);
    for (let i = 0; i < nodes.length; i++) {
      let ndid = row[nodes[i]];
      ndid = (ndid['@value'] ? ndid['@value'] : ndid);
      this.addAdornedNode(ndid, nodes[i], row);
    }
  }
};

WOQLGraph.prototype.addAdornedEdge = function (source, target, ks, kt, row) {
  source = (source['@value'] ? source['@value'] : source);
  target = (target['@value'] ? target['@value'] : target);
  const edge = {
    type: 'link', target, source, text: target,
  };
  const matched_rules = new WOQLRule().matchEdge(this.config.rules, row, ks, kt);
  let hid = false;
  for (let i = 0; i < matched_rules.length; i++) {
    const { rule } = matched_rules[i];
    if (typeof rule.hidden !== 'undefined') {
      hid = rule.hidden;
    }
    if (rule.size) {
      edge.size = UTILS.getConfigValue(rule.size, row);
    }
    if (rule.text) {
      edge.text = UTILS.getConfigValue(rule.text, row);
    }
    if (rule.color) {
      edge.color = UTILS.getConfigValue(rule.color, row);
    }
    if (rule.icon) {
      edge.icon = UTILS.getConfigValue(rule.icon, row);
    }
    if (rule.distance) {
      edge.distance = UTILS.getConfigValue(rule.distance, row);
    }
    if (rule.arrow) {
      edge.arrow = UTILS.getConfigValue(rule.arrow, row);
    }
    if (rule.symmetric) {
      edge.symmetric = UTILS.getConfigValue(rule.symmetric, row);
    }
    if (rule.weight) {
      edge.weight = UTILS.getConfigValue(rule.weight, row);
    }
  }
  if (!hid) this.edges.push(edge);
};

/*
* the rules' order are important
*/

WOQLGraph.prototype.addAdornedNode = function (nid, k, row) {
  const node = { type: 'node', id: nid, nodetype: k };
  const matched_rules = new WOQLRule().matchNode(this.config.rules, row, k, nid);
  for (let i = 0; i < matched_rules.length; i++) {
    const { rule } = matched_rules[i];
    if (rule.size) {
      node.radius = UTILS.getConfigValue(rule.size, row);
    }
    if (rule.color) {
      node.color = UTILS.getConfigValue(rule.color, row);
    }
    if (rule.charge) {
      node.charge = UTILS.getConfigValue(rule.charge, row);
    }
    if (rule.collisionRadius) {
      node.collisionRadius = UTILS.getConfigValue(rule.collisionRadius, row);
    }
    if (rule.icon) {
      node.icon = UTILS.getConfigValue(rule.icon, row);
    }
    if (rule.text) {
      node.text = UTILS.getConfigValue(rule.text, row);
    }
    if (rule.border) {
      node.border = UTILS.getConfigValue(rule.border, row);
    }
  }
  if (!node.text) {
    if (typeof row[k] === 'string') node.text = row[k];
    else if (row[k]['@value']) node.text = row[k]['@value'];
  }
  this.nodes.push(node);
};

WOQLGraph.prototype.getLiteralOwner = function (nodes, v, row) {
  const cs = this.config.source();
  if (cs && row[cs]) {
    return cs;
  }
  const edges = this.config.edges();
  if (edges) {
    for (let i = 0; i < edges.length; i++) {
      if (edges[i][1] === v) {
        return edges[i][0];
      }
    }
    return false;
  }
  return nodes[0];
};

WOQLGraph.prototype.createEdgesFromIDs = function (nodes, row) {
  if (nodes.length < 2) return;
  const cs = this.config.source();
  const es = this.config.edges();
  if (!cs && es && es.length) {
    for (var i = 0; i < es.length; i++) {
      if (nodes.indexOf(es[i][0]) !== -1 && nodes.indexOf(es[i][1]) !== -1) {
        this.addAdornedEdge(row[es[i][0]], row[es[i][1]], es[i][0], es[i][1], row);
      }
    }
    return;
  }
  const s = (cs && nodes.indexOf(cs) !== -1) ? cs : nodes[0];
  for (var i = 0; i < nodes.length; i++) {
    if (nodes[i] === s) continue;
    this.addAdornedEdge(row[s], row[nodes[i]], s, nodes[i], row);
  }
};

WOQLGraph.prototype.getEdges = function () {
  return this.edges;
};

WOQLGraph.prototype.combineNodes = function (nodes) {
  const nnodes = {};
  for (let i = 0; i < nodes.length; i++) {
    const n = nodes[i];
    if (this.nodes_referenced_by_edges.indexOf(n.id) === -1) continue;
    if (typeof nnodes[n.id] === 'undefined') {
      nnodes[n.id] = n;
    } else {
      for (const k in n) {
        if (typeof nnodes[n.id][k] === 'undefined') {
          nnodes[n.id][k] = n[k];
        }
      }
    }
  }
  return Object.values(nnodes);
};

WOQLGraph.prototype.combineEdges = function (edges) {
  this.nodes_referenced_by_edges = [];
  const nedges = {};
  for (let i = 0; i < edges.length; i++) {
    const e = edges[i];
    if (typeof nedges[e.source] === 'undefined') {
      nedges[e.source] = {};
    }
    if (typeof nedges[e.source][e.target] === 'undefined') {
      nedges[e.source][e.target] = e;
    } else {
      for (var k in e) {
        if (typeof nedges[e.source][e.target][k] === 'undefined') nedges[e.source][e.target][k] = e[k];
      }
    }
    if (this.nodes_referenced_by_edges.indexOf(e.source) === -1) {
      this.nodes_referenced_by_edges.push(e.source);
    }
    if (this.nodes_referenced_by_edges.indexOf(e.target) === -1) {
      this.nodes_referenced_by_edges.push(e.target);
    }
  }
  const fedges = [];
  for (var k in nedges) {
    for (const k2 in nedges[k]) {
      fedges.push(nedges[k][k2]);
    }
  }
  return fedges;
};

WOQLGraph.prototype.getNodes = function () {
  return this.nodes;
};

WOQLGraph.prototype.includeNode = function (v, row) {
  const matched_rules = new WOQLRule().matchNode(this.config.rules, row, v, false, 'hidden');
  for (let i = 0; i < matched_rules.length; i++) {
    if (matched_rules[i].rule.hidden) return false;
  }
  return true;
};

/*
* check if I have to visualise literals node
*/
WOQLGraph.prototype.includeLiteralNode = function (variableName, row) {
  if (this.config.literals() === false) return false;
  const matched_rules = new WOQLRule().matchNode(this.config.rules, row, variableName, false, 'hidden');
  for (let i = 0; i < matched_rules.length; i++) {
    if (matched_rules[i].rule.hidden) return false;
  }
  return true;
};

WOQLGraph.prototype.includeRow = function (row, num) {
  const matched_rules = new WOQLRule().matchRow(this.config.rules, row, num, 'hidden');
  for (let i = 0; i < matched_rules.length; i++) {
    if (matched_rules[i].rule.hidden) return false;
  }
  return true;
};

module.exports = WOQLGraph;


/***/ }),

/***/ 8755:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __nccwpck_require__) => {

/* eslint-disable consistent-return */
/* eslint-disable no-param-reassign */
/* eslint-disable no-restricted-syntax */
/* eslint-disable no-unused-vars */
const WOQLQuery = __nccwpck_require__(3552);
const UTILS = __nccwpck_require__(4948);

/**
 * Functions to manipulate and check the paging related properties of a query
 */

WOQLQuery.prototype.getLimit = function () {
  return this.getPagingProperty('limit');
};

WOQLQuery.prototype.setLimit = function (l) {
  return this.setPagingProperty('limit', l);
};

WOQLQuery.prototype.isPaged = function (q) {
  q = (q || this.query);
  for (const prop of Object.keys(q)) {
    if (prop === 'limit') return true;
    if (this.paging_transitive_properties.indexOf(prop) !== -1) {
      return this.isPaged(q[prop][q[prop].length - 1]);
    }
  }
  return false;
};

WOQLQuery.prototype.getPage = function () {
  if (this.isPaged()) {
    const psize = this.getLimit();
    if (this.hasStart()) {
      const s = this.getStart();
      // eslint-disable-next-line radix
      return (parseInt(s / psize) + 1);
    }
    return 1;
  }
  return false;
};

WOQLQuery.prototype.setPage = function (pagenum) {
  const pstart = (this.getLimit() * (pagenum - 1));
  if (this.hasStart()) {
    this.setStart(pstart);
  } else {
    this.addStart(pstart);
  }
  return this;
};

WOQLQuery.prototype.nextPage = function () {
  return this.setPage(this.getPage() + 1);
};

WOQLQuery.prototype.firstPage = function () {
  return this.setPage(1);
};

WOQLQuery.prototype.previousPage = function () {
  const npage = this.getPage() - 1;
  if (npage > 0) this.setPage(npage);
  return this;
};

WOQLQuery.prototype.setPageSize = function (size) {
  this.setPagingProperty('limit', size);
  if (this.hasStart()) {
    this.setStart(0);
  } else {
    this.addStart(0);
  }
  return this;
};

WOQLQuery.prototype.hasSelect = function () {
  return (!!this.getPagingProperty('select'));
};

WOQLQuery.prototype.getSelectVariables = function (q) {
  q = (q || this.query);
  for (const prop of Object.keys(q)) {
    if (prop === 'select') {
      const vars = q[prop].slice(0, q[prop].length - 1);
      return vars;
    }
    if (this.paging_transitive_properties.indexOf(prop) !== -1) {
      const val = this.getSelectVariables(q[prop][q[prop].length - 1]);
      if (typeof val !== 'undefined') {
        return val;
      }
    }
  }
};

WOQLQuery.prototype.hasStart = function () {
  return (typeof this.getPagingProperty('start') !== 'undefined');
};

WOQLQuery.prototype.getStart = function () {
  return this.getPagingProperty('start');
};

WOQLQuery.prototype.setStart = function (start) {
  return this.setPagingProperty('start', start);
};

WOQLQuery.prototype.addStart = function (s) {
  if (this.hasStart()) this.setStart(s);
  else {
    const nq = { start: [s, this.query] };
    this.query = nq;
  }
  return this;
};

/**
 * Returns the value of one of the 'paging' related properties (limit, start,...)
 */
WOQLQuery.prototype.getPagingProperty = function (pageprop, q) {
  q = (q || this.query);
  for (const prop of Object.keys(q)) {
    if (prop === pageprop) return q[prop][0];
    if (this.paging_transitive_properties.indexOf(prop) !== -1) {
      const val = this.getPagingProperty(pageprop, q[prop][q[prop].length - 1]);
      if (typeof val !== 'undefined') {
        return val;
      }
    }
  }
};

/**
 * Sets the value of one of the paging_transitive_properties properties
 */
WOQLQuery.prototype.setPagingProperty = function (pageprop, val, q) {
  q = (q || this.query);
  for (const prop of Object.keys(q)) {
    if (prop === pageprop) {
      q[prop][0] = val;
    } else if (this.paging_transitive_properties.indexOf(prop) !== -1) {
      this.setPagingProperty(pageprop, val, q[prop][q[prop].length - 1]);
    }
  }
  return this;
};


/***/ }),

/***/ 5156:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* eslint-disable camelcase */
/* eslint-disable consistent-return */
/* eslint-disable no-restricted-syntax */
/* eslint-disable no-plusplus */
/* eslint-disable no-param-reassign */
/* eslint-disable no-unused-vars */
/// /@ts-check
const UTILS = __nccwpck_require__(4948);
const WOQL = __nccwpck_require__(5054);
const WOQLQ = __nccwpck_require__(8755);
/**
 * @module WOQLResult
 * @license Apache Version 2
 * Object representing the result of a WOQL Query
 * @param {object} results result JSON object as returned by WOQL query
 * @param {WOQLQuery} query the query object that generated the result
 * @param {object} [config] optional result configuration options object
 * [config.no_compress] by default all URLs are compressed where possible (v:X rather than http://.../variable/x) set to true to return non-compressed values
 * [config.context] specify the JSON-LD context to use for compressing results - by default
 * the query context will be used
 */
function WOQLResult(results, query, config) {
  this.bindings = results ? results.bindings : [];
  this.insert_count = results ? results.inserts : 0;
  this.delete_count = results ? results.deletes : 0;
  this.transaction_retry_count = results ? results.transaction_retry_count : 0;
  /**
     * @type {array | boolean}
     */
  this.variable_names = results ? results['api:variable_names'] : false;
  // console.log(results, this.variable_names)
  this.query = query || WOQL.query();
  this.cursor = 0;
  // if (!(config && config.no_compress)) {
  //    const context = results && results.prefixes ? results.prefixes : false
  //    this.compress(context)
  // }
}

WOQLResult.prototype.formatter = function (context) {
  context = context || this.query.getContext();
  const formatted = [];
  if (this.bindings && this.bindings.length > 0) {
    this.bindings.forEach((row) => {
      const rowObj = {};
      Object.keys(row).forEach((propName) => {
        const propValue = row[propName];

        if (typeof propValue === 'string') {
          if (propValue !== 'system:unknown') {
            rowObj[propName] = UTILS.shorten(propValue, context);
          } else {
            rowObj[propName] = '';
          }
        } else {
          rowObj[propName] = propValue['@value'];
        }
      });
      formatted.push(rowObj);
    });
  }
  return formatted;
};

/**
 * @param {object} [context] optional context to use for compression -
 * if ommitted query context is used
 * @returns {WOQLResult}
 */
WOQLResult.prototype.compress = function (context) {
  context = context || this.query.getContext();
  if (context) {
    for (let i = 0; i < this.bindings.length; i++) {
      for (const prop of Object.keys(this.bindings[i])) {
        const nprop = UTILS.shorten(prop, context);
        let nval = this.bindings[i][prop];
        if (typeof this.bindings[i][prop] === 'string') {
          nval = UTILS.shorten(this.bindings[i][prop], context);
        } else if (Array.isArray(this.bindings[i][prop])) {
          nval = [];
          for (let j = 0; j < this.bindings[i][prop].length; j++) {
            let oval = this.bindings[i][prop][j];
            if (typeof oval === 'string') oval = UTILS.shorten(oval, context);
            else if (Array.isArray(oval)) {
              const noval = [];
              for (let k = 0; k < oval.length; k++) {
                let kval = oval[k];
                if (typeof kval === 'string') kval = UTILS.shorten(kval, context);
                noval.push(kval);
              }
              oval = noval;
            }
            nval.push(oval);
          }
        }
        delete this.bindings[i][prop];
        this.bindings[i][nprop] = nval;
      }
    }
  }
  // console.log(this.bindings)
  return this;
};

/**
 * Returns true if there are any results
 * @returns {boolean}
 */
WOQLResult.prototype.hasBindings = function () {
  if (this.bindings && this.count()) return true;
  return false;
};

/**
 * Returns true if there are any results
 * @returns {boolean}
 */
WOQLResult.prototype.hasUpdates = function () {
  if (this.inserts() > 0 || this.deletes() > 0) return true;
  return false;
};

/**
 * Returns original array of bindings returned by API
 * @returns {array} the data result
 */
WOQLResult.prototype.getBindings = function () {
  return this.bindings;
};
/**
 * Returns original array of bindings returned by API
 * @returns {array} the data result
 */
WOQLResult.prototype.rows = function () {
  return this.bindings;
};

/**
 * Returns list of variables returned in bindings from API
 * @returns {array|boolean}
 */
WOQLResult.prototype.getVariableList = function () {
  if (this.variable_names) {
    return this.variable_names;
  }
  if (this.bindings && this.bindings[0]) {
    return Object.keys(this.bindings[0]);
  }
  return [];
};

/**
 * Number of rows in bound results
 * @returns {number}
 */
WOQLResult.prototype.count = function () {
  return this.bindings.length;
};

/**
 * Number of reported inserts
 * @returns {number}
 */
WOQLResult.prototype.inserts = function () {
  return this.insert_count;
};

/**
 * Number of reported inserts
 * @returns {number}
 */
WOQLResult.prototype.deletes = function () {
  return this.delete_count;
};

/**
 * Get the first object record from the result set
 * @returns {object}
 */
WOQLResult.prototype.first = function () {
  this.cursor = 0;
  return this.bindings[0];
};

/**
 * Get the last object record from the result set
 * @returns {object}
 */

WOQLResult.prototype.last = function () {
  this.cursor = this.bindings.length - 1;
  return this.bindings[this.bindings.length - 1];
};

/**
 * @returns {object}
 */

WOQLResult.prototype.next = function () {
  if (this.cursor >= this.bindings.length) return false;
  const res = this.bindings[this.cursor];
  this.cursor++;
  return res;
};

/**
 * @returns {object}
 */

// eslint-disable-next-line consistent-return
WOQLResult.prototype.prev = function () {
  if (this.cursor > 0) {
    this.cursor--;
    return this.bindings[this.cursor];
  }
};

/**
 * Normally sorting of results is the job of the query - this is just in case you
 * want to resort results according to some key (variable)
 * @param {string} key
 * @param {string} asc_or_desc
 * @returns {WOQLResult}
 */
// eslint-disable-next-line camelcase
WOQLResult.prototype.sort = function (key, asc_or_desc) {
  this.bindings.sort((a, b) => this.compareValues(a[key], b[key], asc_or_desc));
  // eslint-disable-next-line no-unused-expressions
  this;
};

/**
 * Compares results a, b according to "asc" or "desc" order
 * @param {object} a
 * @param {object} b
 * @param {string} [asc_or_desc]
 * @returns {number}
 */
WOQLResult.prototype.compareValues = function (a, b, asc_or_desc = 'asc') {
  if (!a || !b) return 0;
  if (typeof a['@value'] !== 'undefined' && typeof b['@value'] !== 'undefined') {
    a = a['@value'];
    b = b['@value'];
  }
  if (a > b) {
    return asc_or_desc && asc_or_desc === 'asc' ? 1 : -1;
  }
  if (b > a) {
    return asc_or_desc && asc_or_desc === 'asc' ? -1 : 1;
  }
};

module.exports = WOQLResult;


/***/ }),

/***/ 8495:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* eslint-disable guard-for-in */
/* eslint-disable no-restricted-syntax */
/* eslint-disable valid-typeof */
/* eslint-disable no-continue */
/* eslint-disable no-plusplus */
/* eslint-disable no-use-before-define */
const TerminusRule = __nccwpck_require__(786);
const UTILS = __nccwpck_require__(4948);

/**
 * @file WOQL Rules
 * @license Apache Version 2
 * WOQL Rules support pattern matching on results of WOQL Queries
 */

function WOQLRule() {
  TerminusRule.TerminusRule.call(this);
  this.pattern = new WOQLPattern();
}
Object.setPrototypeOf(WOQLRule.prototype, TerminusRule.TerminusRule.prototype);

/**
 * Specifies that the rule only applies to specific variables returned by the WOQL query
 * @param {[String]} - array of strings, each representing a variable name, variable prefixes
 * ("v:") are added automatically if absent
 */
WOQLRule.prototype.setVariables = function (vars) {
  if (vars && vars.length) {
    this.pattern.variables = UTILS.removeNamespacesFromVariables(vars);
    this.current_variable = this.pattern.variables[this.pattern.variables.length - 1];
  }
  return this;
};

/**
 * Shorthand to the above using spread operator
 */
WOQLRule.prototype.vars = function (...varlist) {
  return this.setVariables(varlist);
};

/**
 * Specifies that the rule applies to a specific variable, variable prefix ("v:")
 * is added automatically if absent
 */
WOQLRule.prototype.v = function (v) {
  if (v) {
    this.current_variable = UTILS.removeNamespaceFromVariable(v);
    return this;
  }
  return this.current_variable;
};

/**
 * Specifies that the rule applies to a specific edge, a source -> target pair of variables
 */
WOQLRule.prototype.edge = function (source, target) {
  this.scope('edge');
  if (source) {
    const vs = UTILS.removeNamespaceFromVariable(source);
    this.setVariables([vs]);
    this.pattern.source = vs;
  }
  if (target) {
    const vs = UTILS.removeNamespaceFromVariable(target);
    if (!source) this.setVariables([vs]);
    this.pattern.target = vs;
  }
  return this;
};

/**
 * Specifies that the rule applies to a specific edge, a source -> target pair of variables
 */
WOQLRule.prototype.rownum = function (rownum) {
  if (typeof rownum === 'undefined') return this.pattern.rownum;
  this.pattern.rownum = rownum;
  return this;
};

/**
 * Specifies that the value of a variable must be one of the values contained in the list
 * @param {[String|Number]} list - parameters are any atomic value (string | number) -
 * the rule will match only cells that have one of these values
 */
WOQLRule.prototype.in = function (...list) {
  if (this.current_variable) {
    if (!this.pattern.constraints) this.pattern.constraints = {};
    if (!this.pattern.constraints[this.current_variable]) {
      this.pattern.constraints[this.current_variable] = [];
    }
    this.pattern.constraints[this.current_variable].push(list);
  }
  return this;
};

/**
 * Specifies a filter function to apply to each element - only those values that
 * return true when this filter is invoked will be matched
 * @param {function} tester - test function that will be used to filter values
 */
WOQLRule.prototype.filter = function (tester) {
  if (this.current_variable) {
    if (!this.pattern.constraints) this.pattern.constraints = {};
    if (!this.pattern.constraints[this.current_variable]) {
      this.pattern.constraints[this.current_variable] = [];
    }
    this.pattern.constraints[this.current_variable].push(tester);
  }
  return this;
};

WOQLRule.prototype.matchRow = function (rules, row, rownum, action) {
  const matches = [];
  for (let i = 0; i < rules.length; i++) {
    if (action && this.rule && typeof this.rule[action] === 'undefined') continue;
    if (rules[i].pattern.matchRow(row, rownum)) {
      matches.push(rules[i]);
    }
  }
  return matches;
};

WOQLRule.prototype.matchCell = function (rules, row, key, rownum, action) {
  const matches = [];
  for (let i = 0; i < rules.length; i++) {
    if (action && this.rule && typeof this.rule[action] === 'undefined') continue;
    if (rules[i].pattern.matchCell(row, key, rownum)) {
      matches.push(rules[i]);
    }
  }
  return matches;
};

/**
 *
 * @param {array} rules
 * @param {string} key - column name
 * @param {string} ruleName - the rule name like header, width etc...
 * @returns {array}
 */
WOQLRule.prototype.matchColumn = function (rules, key, ruleName) {
  const matches = [];
  for (let i = 0; i < rules.length; i++) {
    if (ruleName && this.rule && typeof this.rule[ruleName] === undefined) continue;
    const ruleRow = rules[i];
    /*
        * if it is not the rule that I'm looking for
        */
    if (ruleName && ruleRow.rule[ruleName] === undefined) {
      continue;
    }
    if (ruleRow.pattern.matchColumn(key)) {
      matches.push(ruleRow);
    }
  }
  return matches;
};

WOQLRule.prototype.matchNode = function (rules, row, key, nid, action) {
  const matches = [];
  for (let i = 0; i < rules.length; i++) {
    if (action && this.rule && typeof this.rule[action] === 'undefined') continue;
    if (rules[i].pattern.matchNode(row, key, nid)) {
      matches.push(rules[i]);
    }
  }
  return matches;
};

WOQLRule.prototype.matchPair = function (rules, row, keya, keyb, action) {
  const matches = [];
  for (let i = 0; i < rules.length; i++) {
    if (action && this.rule && typeof this.rule[action] === 'undefined') continue;
    if (rules[i].pattern.matchPair(row, keya, keyb)) {
      matches.push(rules[i]);
    }
  }
  return matches;
};

// alias
WOQLRule.prototype.matchEdge = WOQLRule.prototype.matchPair;

/**
 * Object to encapsulate the matching of woql result patterns - inherits from TerminusRule
 * @param {Object} pattern
 */
function WOQLPattern(pattern) {
  TerminusRule.TerminusPattern.call(this, pattern);
}
Object.setPrototypeOf(WOQLPattern.prototype, TerminusRule.TerminusPattern.prototype);

WOQLPattern.prototype.prettyPrint = function () {
  // starts with obj. ...
  let str = `${this.scope}('`;
  if (this.variables) {
    str += this.variables.join("', '");
  }
  str += "')";
  if (typeof this.literal !== 'undefined') {
    str += `.literal(${this.literal})`;
  }
  if (typeof this.type !== 'undefined') {
    str += `.type(${this.unpack(this.type)})`;
  }
  if (typeof this.value !== 'undefined') {
    str += `.value(${this.unpack(this.value, true)})`;
  }
  for (const v in this.constraints) {
    str += `.v('${v}')`;
    for (let i = 0; i < this.constraints[v].length; i++) {
      if (typeof this.constraints[v][i] === 'function') {
        str += `.filter(${this.constraints[v][i]})`;
      } else {
        // eslint-disable-next-line no-undef
        str += `.in(${json.unpack(this.constraints[v][i])})`;
      }
    }
  }
  return str;
};

/**
 * @param {String|Object} data
 * @param {String|[String, String]} [key] - a variable or an array of two variables
 * (in the case of edge scope) which constitutes the key being tested
 * @param {String} [scope] - the scope in which the test is being carried out (row, column, cell)
 */

WOQLPattern.prototype.matchRow = function (row, rownum) {
  if (typeof this.rownum !== 'undefined' && typeof rownum !== 'undefined') {
    if (!this.numberMatch(this.rownum, rownum)) return false;
  }
  if (this.scope && this.scope !== 'row') return false;
  if (!this.testVariableConstraints(row)) return false;
  return true;
};

WOQLPattern.prototype.matchCell = function (row, key, rownum) {
  if (typeof this.rownum !== 'undefined' && typeof rownum !== 'undefined') {
    if (!this.numberMatch(this.rownum, rownum)) return false;
  }
  if (!this.testBasics('column', row[key])) return false;
  if (this.variables && this.variables.length && this.variables.indexOf(key) === -1) return false;
  if (!this.testVariableConstraints(row)) return false;
  return true;
};

WOQLPattern.prototype.matchNode = function (row, key) {
  if (!this.testBasics('node', row[key])) return false;
  if (this.variables && this.variables.length && this.variables.indexOf(key) === -1) return false;
  if (!this.testVariableConstraints(row)) return false;
  return true;
};

WOQLPattern.prototype.matchColumn = function (key) {
  if (this.scope && this.scope !== 'column') return false;
  if (this.variables && this.variables.length && this.variables.indexOf(key) === -1) return false;
  return true;
};

WOQLPattern.prototype.matchPair = function (row, keya, keyb) {
  if (this.scope && this.scope !== 'edge') return false;
  if (this.source && this.source !== keya) return false;
  if (this.target && this.target !== keyb) return false;
  if (!this.testVariableConstraints(row)) return false;
  return true;
};

WOQLPattern.prototype.testVariableConstraints = function (row) {
  for (const k in this.constraints) {
    if (!this.testVariableConstraint(k, row[k])) return false;
  }
  return true;
};

WOQLPattern.prototype.testVariableConstraint = function (name, val) {
  if (!this.constraints[name]) return true;
  for (let i = 0; i < this.constraints[name].length; i++) {
    if (!this.testValue(val, this.constraints[name][i])) {
      return false;
    }
  }
  return true;
};

WOQLPattern.prototype.setPattern = function (pattern) {
  for (const key in pattern) {
    this[key] = pattern[key];
  }
};

WOQLPattern.prototype.json = function () {
  const json = {};
  if (this.scope) {
    json.scope = this.scope;
  }
  if (this.value) {
    json.value = this.value;
  }
  if (this.rownum) json.rownum = this.rownum;
  if (this.variables) json.variables = this.variables;
  if (this.literal) json.literal = this.literal;
  if (this.type) json.type = this.type;
  if (this.constraints) json.constraints = this.constraints;
  if (this.source) json.source = this.source;
  if (this.target) json.target = this.target;
  return json;
};

module.exports = { WOQLRule, WOQLPattern };


/***/ }),

/***/ 3130:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const WOQLStreamConfig = __nccwpck_require__(4338);

/**
 * @param {WOQLClient} client
 * @param {WOQLStreamConfig} config
 * @returns {WOQLStream}
 */
function WOQLStream(client, config) {
  this.client = client;
  this.config = (config || new WOQLStreamConfig());
  return this;
}

WOQLStream.prototype.options = function (config) {
  this.config = config;
  return this;
};

WOQLStream.prototype.setResult = function (wqrs) {
  this.result = wqrs;
};

module.exports = WOQLStream;


/***/ }),

/***/ 1480:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* eslint-disable no-use-before-define */
/* eslint-disable camelcase */
/* eslint-disable no-undef */
/* eslint-disable no-param-reassign */
/* eslint-disable no-redeclare */
/* eslint-disable block-scoped-var */
/* eslint-disable no-var */
/* eslint-disable vars-on-top */
/* eslint-disable no-unused-vars */
const WOQLTableConfig = __nccwpck_require__(7350);
const UTILS = __nccwpck_require__(4948);
const { WOQLRule } = __nccwpck_require__(8495);
const WOQLResult = __nccwpck_require__(5156);
const WOQLClient = __nccwpck_require__(5489);

/**
 * @module WOQLTable
 * @license Apache Version 2
 * @param {WOQLClient} [client] we need an client if we do a server side pagination,sorting etc...
 * @param {WOQLTableConfig} [config]
 * @returns {WOQLTable}
 */

function WOQLTable(client, config) {
  this.client = client;
  this.config = config || new WOQLTableConfig();
  return this;
}

/**
 * set the WOQLTableConfig for this table
 * @param {WOQLTableConfig} config
 * @returns {WOQLTable}
 */

WOQLTable.prototype.options = function (config) {
  this.config = config;
  return this;
};

/**
 * Set the query result using the WOQLResult object
 * @param {WOQLResult} result - the WOQLResult object
 * @returns {WOQLTable}
 */

WOQLTable.prototype.setResult = function (result) {
  this.result = result;
  return this;
};

/**
 * @returns {number} the total result
 */
WOQLTable.prototype.count = function () {
  return this.result.count();
};

/**
 * Get the first object record from the result set
 * @returns {object}
 */
WOQLTable.prototype.first = function () {
  return this.result.first();
};

/**
 * Get the preview object record from the result set
 * @returns {object}
 */

WOQLTable.prototype.prev = function () {
  return this.result.prev();
};

/**
 * Get the next object record from the result set
 * @returns {object}
 */

WOQLTable.prototype.next = function () {
  return this.result.next();
};

/**
 * @returns {boolean}
 */

WOQLTable.prototype.canAdvancePage = function () {
  return this.result.count() === this.result.query.getLimit();
};

WOQLTable.prototype.canChangePage = function () {
  return this.canAdvancePage() || this.canRetreatPage();
};

WOQLTable.prototype.canRetreatPage = function () {
  return this.result.query.getPage() > 1;
};

WOQLTable.prototype.getPageSize = function () {
  return this.result.query.getLimit();
};

WOQLTable.prototype.setPage = function (l) {
  return this.result.query.setPage(l);
};

WOQLTable.prototype.getPage = function () {
  return this.result.query.getPage();
};

WOQLTable.prototype.setPageSize = function (l) {
  return this.update(this.result.query.setPageSize(l));
};

WOQLTable.prototype.nextPage = function () {
  return this.update(this.result.query.nextPage());
};

WOQLTable.prototype.firstPage = function () {
  return this.update(this.result.query.firstPage());
};

WOQLTable.prototype.previousPage = function () {
  return this.update(this.result.query.previousPage());
};

WOQLTable.prototype.getColumnsToRender = function () {
  if (this.hasColumnOrder()) {
    var cols = this.getColumnOrder();
  } else {
    var cols = this.result.getVariableList();
  }
  const self = this;
  return cols ? cols.filter((col) => !self.hidden(col)) : [];
};

WOQLTable.prototype.getColumnHeaderContents = function (colid) {
  colid = UTILS.removeNamespaceFromVariable(colid);
  const rules = new WOQLRule().matchColumn(this.config.rules, colid, 'header');
  // hr is an array header in not always the last item
  if (rules.length) {
    const header = rules[rules.length - 1].rule ? rules[rules.length - 1].rule.header : null;
    if (typeof header === 'string') {
      return header;
    } if (typeof header === 'function') {
      return header(colid);
    } return header;
  }
  if (colid[0] === '_') return ' ';
  return UTILS.labelFromVariable(colid);
  // return document.createTextNode(clab);
};

WOQLTable.prototype.hidden = function (col) {
  colid = UTILS.removeNamespaceFromVariable(col);
  const matched_rules = new WOQLRule().matchColumn(this.config.rules, colid, 'hidden');
  if (matched_rules.length) {
    return matched_rules[matched_rules.length - 1].rule.hidden;
  }
  return false;
};

/**
 * Called when you want to change the query associated with the table.
 */
WOQLTable.prototype.update = function (nquery) {
  return nquery.execute(this.client).then((results) => {
    const nresult = new WOQLResult(results, nquery);
    this.setResult(nresult);
    if (this.notify) this.notify(nresult);
    return nresult;
  });
};

WOQLTable.prototype.hasDefinedEvent = function (row, key, scope, action, rownum) {
  if (scope === 'row') {
    var matched_rules = new WOQLRule().matchRow(this.config.rules, row, rownum, action);
  } else {
    var matched_rules = new WOQLRule().matchCell(this.config.rules, row, key, rownum, action);
  }
  if (matched_rules && matched_rules.length) return true;
  return false;
};

// eslint-disable-next-line consistent-return
WOQLTable.prototype.getDefinedEvent = function (row, key, scope, action, rownum) {
  if (scope === 'row') {
    var matched_rules = new WOQLRule().matchRow(this.config.rules, row, rownum, action);
  } else {
    var matched_rules = new WOQLRule().matchCell(this.config.rules, row, key, rownum, action);
  }
  // I get more than one rule it is not always the last
  if (Array.isArray(matched_rules) && matched_rules.length > 0) {
    // if I have only one rule
    if (matched_rules.length === 1) return matched_rules[0].rule[action];
    // eslint-disable-next-line max-len
    const findRule = matched_rules.find((item) => item.rule[action] !== undefined || item.rule[action] === false);
    return findRule && findRule.rule ? findRule.rule[action] : undefined;
  }
  return undefined;
};

WOQLTable.prototype.getRowClick = function (row) {
  const re = this.getDefinedEvent(row, false, 'row', 'click');
  return re;
};

WOQLTable.prototype.uncompressed = function (row, col) {
  const re = this.getDefinedEvent(row, col, 'row', 'uncompressed');
  return re;
};

WOQLTable.prototype.getCellClick = function (row, col) {
  const cc = this.getDefinedEvent(row, col, 'column', 'click');
  return cc;
};

WOQLTable.prototype.getRowHover = function (row) {
  return this.getDefinedEvent(row, false, 'row', 'hover');
};

WOQLTable.prototype.getCellHover = function (row, key) {
  return this.getDefinedEvent(row, key, 'column', 'hover');
};

WOQLTable.prototype.getColumnOrder = function () {
  return this.config.column_order();
};

WOQLTable.prototype.bindings = function () {
  return this.config.bindings();
};

WOQLTable.prototype.getColumnFilter = function (colid) {
  const filter = new WOQLRule().matchColumn(this.config.rules, colid, 'filter');
  // console.log('getColumnFilter', filter);
  if (Array.isArray(filter) && filter.length > 0 && filter[0].rule) {
    return filter[0].rule.filter;
  }
  return null;
};

WOQLTable.prototype.getColumnDimensions = function (key) {
  const cstyle = {};
  const w = new WOQLRule().matchColumn(this.config.rules, key, 'width');
  if (w && w.length && w[w.length - 1].rule.width) {
    cstyle.width = w[w.length - 1].rule.width;
  }
  const max = new WOQLRule().matchColumn(this.config.rules, key, 'maxWidth');
  if (max && max.length) cstyle.maxWidth = max[max.length - 1].rule.maxWidth;
  const min = new WOQLRule().matchColumn(this.config.rules, key, 'minWidth');
  if (min && min.length) cstyle.minWidth = min[min.length - 1].rule.minWidth;
  return cstyle;
};

WOQLTable.prototype.hasColumnOrder = WOQLTable.prototype.getColumnOrder;
WOQLTable.prototype.hasCellClick = WOQLTable.prototype.getCellClick;
WOQLTable.prototype.hasRowClick = WOQLTable.prototype.getRowClick;
WOQLTable.prototype.hasCellHover = WOQLTable.prototype.getCellHover;
WOQLTable.prototype.hasRowHover = WOQLTable.prototype.getRowHover;

WOQLTable.prototype.getRenderer = function (key, row, rownum) {
  return this.getDefinedEvent(row, key, 'column', 'renderer', rownum);
  // let args =  this.getDefinedEvent(row, key, "column", "args", rownum);
  // eslint-disable-next-line no-unreachable
  if (!renderer) {
    const r = this.getRendererForDatatype(row[key]);
    renderer = r.name;
    if (!args) args = r.args;
  }
  if (renderer) {
    return this.datatypes.createRenderer(renderer, args);
  }
};

WOQLTable.prototype.isSortableColumn = function (key) {
  if (this.getDefinedEvent(false, key, 'column', 'unsortable')) return false;
  return true;
};

WOQLTable.prototype.isFilterableColumn = function (key) {
  if (this.getDefinedEvent(false, key, 'column', 'filterable') === false) return false;
  return true;
};

WOQLTable.prototype.renderValue = function (renderer, val, key, row) {
  if (val && val['@type']) {
    renderer.type = val['@type'];
    var dv = new DataValue(val['@value'], val['@type'], key, row);
  } else if (val && val['@language']) {
    renderer.type = 'xsd:string';
    var dv = new DataValue(val['@value'], renderer.type, key, row);
  } else if (val && typeof val === 'string') {
    renderer.type = 'id';
    var dv = new DataValue(val, 'id', key, row);
  }
  if (dv) return renderer.renderValue(dv);
  return '';
};

function DataValue(val, type) {
  this.datavalue = val === 'system:unknown' ? '' : val;
  this.datatype = type;
}

DataValue.prototype.value = function (nvalue) {
  if (nvalue) {
    this.datavalue = nvalue;
    return this;
  }
  return this.datavalue;
};

WOQLTable.prototype.getRendererForDatatype = function (val) {
  if (val && val['@type']) {
    return this.datatypes.getRenderer(val['@type'], val['@value']);
  } if (val && val['@language']) {
    return this.datatypes.getRenderer('xsd:string', val['@value']);
  } if (val && typeof val === 'string') {
    return this.datatypes.getRenderer('id', val);
  }
  return false;
};

WOQLTable.prototype.getSpecificRender = function (key, row) {
  const rend = this.getDefinedEvent(row, key, 'column', 'render');
  return rend;
};

module.exports = WOQLTable;


/***/ }),

/***/ 5174:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const WOQLTableConfig = __nccwpck_require__(7350);
const WOQLChooserConfig = __nccwpck_require__(321);
const WOQLGraphConfig = __nccwpck_require__(120);
const WOQLChartConfig = __nccwpck_require__(2998);
const WOQLStreamConfig = __nccwpck_require__(4338);
const FrameConfig = __nccwpck_require__(1815);
const { WOQLRule } = __nccwpck_require__(8495);
const { FrameRule } = __nccwpck_require__(7700);

/**
 * We bundle the useful functions in a View object and just export that for ease of consumption
 * @constructor
 * View
 */
const View = {};

View.table = function () { return new WOQLTableConfig(); };
View.chart = function () { return new WOQLChartConfig(); };
View.graph = function () { return new WOQLGraphConfig(); };
View.chooser = function () { return new WOQLChooserConfig(); };
View.stream = function () { return new WOQLStreamConfig(); };
View.document = function () { return new FrameConfig(); };
View.loadConfig = function (config) {
  let view;
  if (config.table) {
    view = new WOQLTableConfig();
    view.loadJSON(config.table, config.rules);
  } else if (config.chooser) {
    view = new WOQLChooserConfig();
    view.loadJSON(config.chooser, config.rules);
  } else if (config.graph) {
    view = new WOQLGraphConfig();
    view.loadJSON(config.graph, config.rules);
  } else if (config.chart) {
    view = new WOQLChartConfig();
    view.loadJSON(config.chart, config.rules);
  } else if (config.stream) {
    view = new WOQLStreamConfig();
    view.loadJSON(config.stream, config.rules);
  } else if (config.frame) {
    view = new FrameConfig();
    view.loadJSON(config.frame, config.rules);
  }
  return view;
};

/**
 * Shorthand functions for accessing the pattern matching capabilities
 */
View.rule = function (type) {
  if (type && type === 'frame') return new FrameRule();
  return new WOQLRule();
};

View.pattern = function (type) {
  if (type && type === 'woql') return new WOQLRule().pattern;
  return new FrameRule().pattern;
};

/**
 * Called to match an entire row of results is matched by a set of rules
 * returns array of rules that matched
 */
View.matchRow = function (rules, row, rownum, action) {
  return new WOQLRule().matchRow(rules, row, rownum, action);
};

/**
 * Called to test whether an entire column of results is matched by a set of rules
 * returns array of rules that matched
 */
View.matchColumn = function (rules, key, action) {
  return new WOQLRule().matchColumn(rules, key, action);
};

/**
 * Called to test whether a specific cell is matched by a set of rules
 * returns array of rules that matched
 */
View.matchCell = function (rules, row, key, rownum, action) {
  return new WOQLRule().matchCell(rules, row, key, rownum, action);
};

/**
 * Called to test whether a specific node is matched by a set of rules
 * returns array of rules that matched
 */
View.matchNode = function (rules, row, key, nid, action) {
  return new WOQLRule().matchNode(rules, row, key, nid, action);
};

/**
 * Called to test whether a specific edge (source -> target) is matched by a set of rules
 * returns array of rules that matched
 */
View.matchEdge = function (rules, row, keya, keyb, action) {
  return new WOQLRule().matchPair(rules, row, keya, keyb, action);
};

/**
 * Called to test whether a specific frame is matched by a set of rules
 */
View.matchFrame = function (rules, frame, onmatch) {
  return new FrameRule().testRules(rules, frame, onmatch);
};

module.exports = View;


/***/ }),

/***/ 5054:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* eslint-disable camelcase */
/* eslint-disable no-underscore-dangle */
/// /@ts-check
// I HAVE TO REVIEW THE Inheritance and the prototype chain
const WOQLQuery = __nccwpck_require__(9269);
const WOQLLibrary = __nccwpck_require__(6435);
const { Vars, Var, Doc } = __nccwpck_require__(7205);
// eslint-disable-next-line no-unused-vars
const typedef = __nccwpck_require__(1072);
// eslint-disable-next-line no-unused-vars
const WOQLClient = __nccwpck_require__(5489);

/**
 * @license Apache Version 2
 * @module WOQL
 * @constructor WOQL
 * @description The WOQL object is a wrapper around the WOQLQuery object
 * Syntactic sugar to allow writing WOQL.triple()... instead of new WOQLQuery().triple()
 * Every function matches one of the public api functions of the woql query object
 */
const WOQL = {};

/**
 * WOQL primitives are WOQL.js functions which directly map onto words in
 * the underlying JSON-LD language. All other WOQL.js functions are compound functions
 * which translate into multiple WOQL primitives, or are helper functions which reduce
 * the need to write verbose JSON-LD directly.
 */

/**
 * WOQL Literals, Prefixes & IRI Constant
 */

/*
 * We expose all the real woql predicates via the WOQL object,
 * for ease of typing all return a WOQL query object
 */

/**
 * Query running against any specific commit Id
 * @param {string}  refPath  - path to specific reference Id or commit Id
 * @param {WOQLQuery} [subquery] - subquery for the specific commit point
 * @returns {WOQLQuery}
 * @example
 * let [a, b, c] = vars("a", "b", "c")
 * WOQL.using("userName/dbName/local/commit|branch/commitID").triple(a, b, c)
 */
WOQL.using = function (refPath, subquery) {
  return new WOQLQuery().using(refPath, subquery);
};

/**
 * Adds a text comment to a query - can also be used to wrap any part of a query to turn it off
 * @param {string} comment - text comment
 * @param {WOQLQuery} [subquery]  - query that is "commented out"
 * @returns {WOQLQuery}
 */
WOQL.comment = function (comment, subquery) {
  return new WOQLQuery().comment(comment, subquery);
};

/**
 * @example
 * let [a, b, c] = vars("a", "b", "c")
 * WOQL.select(a, triple(a, b, c))
 * Filters the query so that only the variables included in [V1...Vn] are returned in the bindings
 * @param {...string|...Var} varNames - only these variables are returned
 * @returns {WOQLQuery}
 */
WOQL.select = function (...varNames) {
  return new WOQLQuery().select(...varNames);
};

/**
 * Filter the query to return only results that are distinct in the given variables
 * @param {...string|...Var} varNames - these variables are guaranteed to be unique as a tuple
 * @returns {WOQLQuery}
 */
WOQL.distinct = function (...varNames) {
  return new WOQLQuery().distinct(...varNames);
};

/**
 * Logical conjunction of the contained queries - all queries must match or the entire clause fails
 * @param {...WOQLQuery} subqueries - A list of one or more woql queries to execute as a conjunction
 * @returns {WOQLQuery} - A WOQLQuery object containing the conjunction of queries
 * @example
 * //find triples that are of type scm:Journey, and have
 * //a start_station Start, and that start_station is labeled Start_Label
 * let [Journey, Start, Start_Label] = vars("Journey", "Start", "Start_Label")
 * WOQL.and(
 *      WOQL.triple(Journey, "rdf:type", "@schema:Journey"),
 *      WOQL.triple(Journey, "start_station", Start),
 *      WOQL.triple(Start, "label", Start_Label))
 *
 */

WOQL.and = function (...subqueries) {
  return new WOQLQuery().and(...subqueries);
};

/**
 * Use {@link #read_document|read_document} instead.
 * @deprecated
 */

WOQL.read_object = function (IRI, output, formatObj) {
  return new WOQLQuery().read_document(IRI, output, formatObj);
};

/**
 * Read a node identified by an IRI as a JSON-LD document
 * @param {string} IRI -  The document id  or a variable to read
 * @param {string} output - Variable which will be bound to the document.
 * @return {object} WOQLQuery
 * @example
 * let [person] = vars("Person")
 * const query = WOQL.read_document(
 *      "Person/0b4feda109d9d13c9da809090b342ad9e4d8185545ce05f7cd20b97fe458f547",
 *     person
 * );
 * const res =  await client.query(query);
 */

WOQL.read_document = function (IRI, output) {
  return new WOQLQuery().read_document(IRI, output);
};

/**
 * Insert a document in the graph.
 * @param {object} docjson -  The document to insert. Must either have an '@id' or
 * have a class specified key.
 * @param {string} [IRI] - An optional identifier specifying the document location.
 * @return {object} WOQLQuery
 * @example
 * const res = await client.query(
 *    WOQL.insert_document(WOQL.doc({ "@type" : "Person", "label": "John" }))
 * )
 */

WOQL.insert_document = function (docjson, IRI) {
  return new WOQLQuery().insert_document(docjson, IRI);
};

/**
 * Update a document identified by an IRI
 * @param {object} docjson -  The document to update. Must either have an '@id' or
 * have a class specified key.
 * @param {string} [IRI] - An optional identifier specifying the document location.
 * @return {object} WOQLQuery
 */

WOQL.update_document = function (docjson, IRI) {
  return new WOQLQuery().update_document(docjson, IRI);
};

/**
 * Delete a document from the graph.
 * @param {string} IRI -  The document id  or a variable
 * @return {object} WOQLQuery
 */

WOQL.delete_document = function (IRI) {
  return new WOQLQuery().delete_document(IRI);
};

/**
 * Creates a logical OR of the arguments
 * @param {...WOQLQuery} subqueries - A list of one or more woql queries
 * to execute as alternatives
 * @returns {WOQLQuery} - A WOQLQuery object containing the logical Or of the subqueries
 * @example
 * let [Subject] = vars("Subject")
 * or(
 *   triple(Subject, 'label', "A"),
 *   triple(Subject, "label", "a")
 *  )
 */
WOQL.or = function (...subqueries) {
  return new WOQLQuery().or(...subqueries);
};

/**
 * Specifies the database URL that will be the default database for the enclosed query
 * @param {typedef.GraphRef} graphRef- A valid graph resource identifier string
 * @param {WOQLQuery} [query] - The query
 * @returns {WOQLQuery} A WOQLQuery object containing the from expression
 */

WOQL.from = function (graphRef, query) {
  return new WOQLQuery().from(graphRef, query);
};

/**
 * Specifies the graph resource to write the contained query into
 * @param {typedef.GraphRef} graphRef- A valid graph resource identifier string
 * @param {WOQLQuery} [subquery] - The query which will be written into the graph
 * @returns {WOQLQuery} A WOQLQuery which will be written into the graph in question
 * @example
 * //Subq is an argument or a chained query
 * using("admin/minecraft").into("instance/main").add_triple("a", "rdf:type", "@schema:X")
 * //writes a single tripe (doc:a, rdf:type, scm:X) into the main instance graph
 *
 */
WOQL.into = function (graphRef, subquery) {
  return new WOQLQuery().into(graphRef, subquery);
};

/**
 * Creates a triple pattern matching rule for the triple [S, P, O] (Subject, Predicate, Object)
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string|Var} object - The IRI of a node or a variable, or a literal
 * @returns {WOQLQuery}
 */
WOQL.triple = function (subject, predicate, object) {
  return new WOQLQuery().triple(subject, predicate, object);
};

/**
 * Creates a triple pattern matching rule for the triple [S, P, O] (Subject, Predicate,
 * Object) added in the current layer
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string|Var} object - The IRI of a node or a variable, or a literal
 * @returns {WOQLQuery}
 */
WOQL.added_triple = function (subject, predicate, object) {
  return new WOQLQuery().added_triple(subject, predicate, object);
};

/**
 * Creates a triple pattern matching rule for the triple [S, P, O] (Subject, Predicate,
 * Object) added in the current commit
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string|Var} object - The IRI of a node or a variable, or a literal
 * @returns {WOQLQuery}
 */
WOQL.removed_triple = function (subject, predicate, object) {
  return new WOQLQuery().removed_triple(subject, predicate, object);
};

/**
 * Creates a pattern matching rule for the quad [S, P, O, G] (Subject, Predicate, Object, Graph)
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string|Var} object - The IRI of a node or a variable, or a literal
 * @param {typedef.GraphRef} graphRef - A valid graph resource identifier string
 * @returns {WOQLQuery}
 */
WOQL.quad = function (subject, predicate, object, graphRef) {
  return new WOQLQuery().quad(subject, predicate, object, graphRef);
};

/**
 * Creates a pattern matching rule for the quad [S, P, O, G] (Subject, Predicate,
 * Object, Graph) removed from the current commit
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string|Var} object - The IRI of a node or a variable, or a literal
 * @param {typedef.GraphRef} graphRef- A valid graph resource identifier string
 * @returns {WOQLQuery}
 */
WOQL.added_quad = function (subject, predicate, object, graphRef) {
  return new WOQLQuery().added_quad(subject, predicate, object, graphRef);
};

/**
 * Creates a pattern matching rule for the quad [S, P, O, G] (Subject, Predicate,
 * Object, Graph) removed from the current commit
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string|Var} object - The IRI of a node or a variable, or a literal
 * @param {typedef.GraphRef} graphRef- A valid graph resource identifier string
 * @returns {WOQLQuery}
 */
WOQL.removed_quad = function (subject, predicate, object, graphRef) {
  return new WOQLQuery().removed_quad(subject, predicate, object, graphRef);
};

/**
 * Returns true if ClassA subsumes ClassB, according to the current DB schema
 * @param {string} classA - ClassA
 * @param {string} classB - ClassB
 * @returns {boolean} WOQLQuery
 */
WOQL.sub = function (classA, classB) {
  return new WOQLQuery().sub(classA, classB);
};

WOQL.subsumption = function (classA, classB) {
  return new WOQLQuery().sub(classA, classB);
};

/**
 * Matches if a is equal to b
 * @param {string|Var} varName - literal, variable or id
 * @param {string|Var} varValue - literal, variable or id
 * @returns {WOQLQuery}
 *
 *
 */
WOQL.eq = function (varName, varValue) {
  return new WOQLQuery().eq(varName, varValue);
};

WOQL.equals = function (varName, varValue) {
  return new WOQLQuery().eq(varName, varValue);
};

/**
 * Substring
 * @param {string|Var} string - String or variable
 * @param {number|Var} before - integer or variable (characters from start to begin)
 * @param {number|Var} [length] - integer or variable (length of substring)
 * @param {number|Var} [after] - integer or variable (number of characters after substring)
 * @param {string|Var} [substring] - String or variable
 * @returns {WOQLQuery}
 */

WOQL.substr = function (string, before, length, after, substring) {
  return new WOQLQuery().substr(string, before, length, after, substring);
};
WOQL.substring = function (string, before, length, after, substring) {
  return new WOQLQuery().substr(string, before, length, after, substring);
};

/**
 * Use the document inteface to import documents
 * @deprecated
 * Retrieves the exernal resource defined by QueryResource and copies values
 * from it into variables defined in AsVars
 * @param {Vars | array<Var>} asvars - an array of AsVar variable mappings (see as for format below)
 * @param {WOQLQuery} queryResource - an external resource (remote, file, post) to query
 * @returns {WOQLQuery} A WOQLQuery which contains the get expression
 * @example
 * let [a, b] = vars("a", "b")
 * get(as("a", a).as("b", b)).remote("http://my.url.com/x.csv")
 * //copies the values from column headed "a" into a variable a and from column
 * //"b" into a variable b from remote CSV
 */
WOQL.get = function (asvars, queryResource) {
  return new WOQLQuery().get(asvars, queryResource);
};

/**
 * Use the document inteface to import documents
 * @deprecated
 * @put Outputs the results of a query to a file
 * @param {Vars | array<Var>} varsToExp - an array of AsVar variable
 * mappings (see as for format below)
 * @param {WOQLQuery} query - The query which will be executed to produce the results
 * @param {string} fileResource - an file resource local to the server
 * @returns {WOQLQuery} A WOQLQuery which contains the put expression
 */
WOQL.put = function (varsToExp, query, fileResource) {
  return new WOQLQuery().put(varsToExp, query, fileResource);
};

/**
 * Imports the value identified by Source to a Target variable
 * @param {string | number | Var} source - Source
 * @param {string | Var} target - Target
 * @param {string} [type] - type to cast value to string|number etc...
 * @returns {WOQLQuery}
 * @example
 * let [First_Var, Second_Var] = vars('First_Var', 'Second_Var')
 * WOQL.as("first var", First_Var, "string").as("second var", Second_Var)
 * WOQL.as(["first var", First_Var, "string"], ["second var", Second_Var])
 */

WOQL.as = function (source, target, type) {
  return new WOQLQuery().as(source, target, type);
};

/**
 * Identifies a remote resource by URL and specifies the format of the resource through the options
 * @param {object} remoteObj - The URL at which the remote resource can be accessed
 * @param {typedef.DataFormatObj} [formatObj] - The format of the resource data {}
 * @returns {WOQLQuery} A WOQLQuery which contains the remote resource identifier
 * @example
 * remote({url:"http://url.of.resource"}, {type: "csv"})
 */
//
WOQL.remote = function (remoteObj, formatObj) {
  return new WOQLQuery().remote(remoteObj, formatObj);
};

/**
 * Identifies a resource as a local path on the client, to be sent to the server through a
 * HTTP POST request, with the format defined through the options
 * @param {string} url - The Path on the server at which the file resource can be accessed
 * @param {typedef.DataFormatObj} [formatObj] - imput options, optional
 * @param {string} [source] - It defines the source of the file, it can be 'url','post'
 * @returns {WOQLQuery} A WOQLQuery which contains the Post resource identifier
 * @example
 * post("/.../.../", {type:'csv'})
 */
WOQL.post = function (url, formatObj, source) {
  return new WOQLQuery().post(url, formatObj, source);
};

/**
 * Deletes a single triple from the default graph of the database
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string|Var} object - The IRI of a node or a variable, or a literal
 * @returns {WOQLQuery} - A WOQLQuery which contains the Triple Deletion statement
 * @example
 * delete_triple("john", "age", 42)
 */
WOQL.delete_triple = function (subject, predicate, object) {
  return new WOQLQuery().delete_triple(subject, predicate, object);
};

/**
 * Deletes a single triple from the graph [Subject, Predicate, Object, Graph]
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string|Var} object - The IRI of a node or a variable, or a literal
 * @param {typedef.GraphRef} graphRef - A valid graph resource identifier string
 * @returns {WOQLQuery} - A WOQLQuery which contains the Delete Quad Statement
 * @example remove the class Person from the schema graph
 * WOQL.delete_quad("Person", "rdf:type", "sys:Class", "schema")
 */
WOQL.delete_quad = function (subject, predicate, object, graphRef) {
  return new WOQLQuery().delete_quad(subject, predicate, object, graphRef);
};

/**
 * Adds triples according to the the pattern [subject,predicate,object]
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string|Var} object - The IRI of a node or a variable, or a literal
 * @returns {WOQLQuery}
 */
WOQL.add_triple = function (subject, predicate, object) {
  return new WOQLQuery().add_triple(subject, predicate, object);
};

/**
 * Adds quads according to the pattern [S,P,O,G]
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string|Var} object - The IRI of a node or a variable, or a literal
 * @param {typedef.GraphRef} graphRef- A valid graph resource identifier string
 * @returns {WOQLQuery}
 */
WOQL.add_quad = function (subject, predicate, object, graphRef) {
  return new WOQLQuery().add_quad(subject, predicate, object, graphRef);
};

/**
 *
 * When the subquery is met, the update query is executed
 * @param {WOQLQuery} subquery - the condition query
 * @param {WOQLQuery} [updateQuery]
 * @returns {WOQLQuery} -  A WOQLQuery which contains the when expression
 * @example
 * when(true()).triple("a", "b", "c")
 */

// Functions which take a query as an argument advance the cursor to make the chaining
// of queries fall into the corrent place in the encompassing json.
/* WOQL.when = function(subquery, updateQuery) {
    return new WOQLQuery().when(subquery, updateQuery)
} */

/**
 *
 * Remove whitespace from both sides of a string:
 * @param {string|Var} inputStr - A string or variable containing
 * the untrimmed version of the string
 * @param {string|Var} resultVarName - A string or variable
 * containing the trimmed version of the string
 * @returns {WOQLQuery} A WOQLQuery which contains the Trim pattern matching expression
 * @example
 * let [trimmed] = vars("trimmed")
 * trim("hello   ", trimmed)
 * //trimmed contains "hello"
 */
WOQL.trim = function (inputStr, resultVarName) {
  return new WOQLQuery().trim(inputStr, resultVarName);
};

/**
 *
 * Evaluates the passed arithmetic expression and generates or matches the result value
 * @param {object| WOQLQuery | string} arithExp - A WOQL query containing a valid WOQL Arithmetic
 * Expression, which is evaluated by the function
 * @param {string|number|Var} resultVarName - Either a variable, in which the result of the
 * expression will be stored, or a numeric literal which will be used as a test of result of
 * the evaluated expression
 * @returns {WOQLQuery} A WOQLQuery which contains the Arithmetic function
 * @example
 * let [result] = vars("result")
 * evaluate(plus(2, minus(3, 1)), result)
 */
WOQL.evaluate = function (arithExp, resultVarName) {
  return new WOQLQuery().eval(arithExp, resultVarName);
};

/**
 * Evaluates the passed arithmetic expression and generates or matches the result value
 * @param {object| WOQLQuery | string} arithExp - query or JSON-LD representing the query
 * @param {string|Var} resultVarName - output variable
 * @returns {WOQLQuery} WOQLQuery
 */

WOQL.eval = function (arithExp, resultVarName) {
  return new WOQLQuery().eval(arithExp, resultVarName);
};

/**
 *
 * Adds the numbers together
 * @param {...(string|number|Var)} args - a variable or numeric containing the values to add
 * @returns {WOQLQuery} A WOQLQuery which contains the addition expression
 * @example
 * let [result] = vars("result")
 * evaluate(plus(2, plus(3, 1)), result)
 */
WOQL.plus = function (...args) {
  return new WOQLQuery().plus(...args);
};

/**
 *
 * Subtracts Numbers N1..Nn
 * @param {...(string|number|Var)} args - variable or numeric containing the value that will be
 * subtracted from
 * @returns {WOQLQuery} A WOQLQuery which contains the subtraction expression
 * @example
 * let [result] = vars("result")
 * evaluate(minus(2.1, plus(0.2, 1)), result)
 */
WOQL.minus = function (...args) {
  return new WOQLQuery().minus(...args);
};

/**
 *
 * Multiplies numbers N1...Nn together
 * @param {...(string|number|Var)} args - a variable or numeric containing the value
 * @returns {WOQLQuery} A WOQLQuery which contains the multiplication expression
 * @example
 * let [result] = vars("result")
 * evaluate(times(10, minus(2.1, plus(0.2, 1))), result)
 *  //result contains 9.000000000000002y
 */
WOQL.times = function (...args) {
  return new WOQLQuery().times(...args);
};

/**
 *
 * Divides numbers N1...Nn by each other left, to right precedence
 * @param {...(string|number|Var )} args - numbers to tbe divided
 * @returns {WOQLQuery} A WOQLQuery which contains the division expression
 * let [result] = vars("result")
 * evaluate(divide(times(10, minus(2.1, plus(0.2, 1))), 10), result)
 *  //result contains 0.9000000000000001
 */
WOQL.divide = function (...args) {
  return new WOQLQuery().divide(...args);
};

/**
 *
 * Division - integer division - args are divided left to right
 * @param {...(string|number|Var)} args - numbers for division
 * @returns {WOQLQuery} A WOQLQuery which contains the division expression
 * @example
 * let [result] = vars("result")
 * evaluate(div(10, 3), result)
 * //result contains 3
 */
WOQL.div = function (...args) {
  return new WOQLQuery().div(...args);
};

/*
 * @param {integer or double} a - base number
 * @param {integer or double} b - power of
 * @returns {object} WOQLQuery */

/**
 *
 * Exponent - raises varNum01 to the power of varNum02
 * @param {string|number|Var} varNum -  a variable or numeric containing the number to be
 * raised to the power of the second number
 * @param {number} expNum -  a variable or numeric containing the exponent
 * @returns {WOQLQuery} A WOQLQuery which contains the exponent expression
 * @example
 * let [result] = vars("result")
 * evaluate(exp(3, 2), result)
 * //result contains 9
 */
WOQL.exp = function (varNum, expNum) {
  return new WOQLQuery().exp(varNum, expNum);
};

/**
 *
 * Generates the nearest lower integer to the passed number
 * @param {string|number|Var} varNum - Variable or numeric containing the number to be floored
 * @returns {WOQLQuery} A WOQLQuery which contains the floor expression
 * @example
 * let [result] = vars("result")
 * evaluate(divide(floor(times(10, minus(2.1, plus(0.2, 1)))), 10), result)
 * //result contains 0.9 - floating point error removed
 */
WOQL.floor = function (varNum) {
  return new WOQLQuery().floor(varNum);
};

/**
 *
 * Tests whether a given instance IRI has type Class, according to the current state of the DB
 * @param {string|Var} instanceIRI - A string IRI or a variable that identify the class instance
 * @param {string|Var} classId - A Class IRI or a variable
 * @returns {WOQLQuery} A WOQLQuery object containing the type test
 * @example
 * let [subject] = vars("subject")
 * isa(subject, "Person")
 */
WOQL.isa = function (instanceIRI, classId) {
  return new WOQLQuery().isa(instanceIRI, classId);
};

/**
 *
 * Generates a string Leverstein distance measure between stringA and stringB
 * @param {string|Var} stringA - string literal or variable representing a string to be compared
 * @param {string|Var } stringB - string literal or variable
 * representing the other string to be compared
 * @param {number|string|Var} distance - variable representing the distance between the variables
 * @returns {WOQLQuery} A WOQLQuery which contains the Like pattern matching expression
 * @example
 * let [dist] = vars('dist')
 * like("hello", "hallo", dist)
 * //dist contains 0.7265420560747664
 */
WOQL.like = function (stringA, stringB, distance) {
  return new WOQLQuery().like(stringA, stringB, distance);
};

/**
 *
 * Compares the value of v1 against v2 and returns true if v1 is less than v2
 * @param {string|number|Var} varNum01 - a variable or numeric containing
 * the number to be compared
 * @param {string|number|Var} varNum02 - a variable or numeric containing the second comporator
 * @returns {WOQLQuery} A WOQLQuery which contains the comparison expression
 * @example
 * let [result] = vars("result")
 * less(1, 1.1).eq(result, literal(true, "boolean"))
 * //result contains true
 */
WOQL.less = function (varNum01, varNum02) {
  return new WOQLQuery().less(varNum01, varNum02);
};

/**
 *
 * Compares the value of v1 against v2 and returns true if v1 is greater than v2
 * @param {string|number|Var} varNum01 - a variable or numeric containing the number to be compared
 * @param {string|number|Var} varNum02 - a variable or numeric containing the second comporator
 * @returns {WOQLQuery} A WOQLQuery which contains the comparison expression
 * @example
 * let [result] = vars("result")
 * greater(1.2, 1.1).eq(result, literal(true, "boolean"))
 * //result contains true
 */
WOQL.greater = function (varNum01, varNum02) {
  return new WOQLQuery().greater(varNum01, varNum02);
};

/**
 *
 * Specifies that the Subquery is optional - if it does not match the query will not fail
 * @param {WOQLQuery} [subquery] - A subquery which will be optionally matched
 * @returns {WOQLQuery} A WOQLQuery object containing the optional sub Query
 * @example
 * let [subject] = vars("subject")
 * opt(triple(subject, 'label', "A"))
 * //Subq is an argument or a chained query
 * opt().triple(subject, 'label', "A")
 */
WOQL.opt = function (subquery) {
  return new WOQLQuery().opt(subquery);
};

WOQL.optional = function (subquery) {
  return new WOQLQuery().opt(subquery);
};

/**
 *
 * Generate a new IRI from the prefix and a hash of the variables which will be unique for any
 * given combination of variables
 * @param {string} prefix - A prefix for the IRI - typically formed of the doc prefix and the
 * classtype of the entity (“doc:Person”)
 * @param {array|string|Var} inputVarList - An array of variables and / or strings from which the
 * unique hash will be generated
 * @param {string|Var} resultVarName - Variable in which the unique ID is stored
 * @returns {WOQLQuery} A WOQLQuery object containing the unique ID generating function
 * @example
 * let [newid] = vars("newid")
 * unique("doc:Person", ["John", "Smith"], newid)
 */
WOQL.unique = function (prefix, inputVarList, resultVarName) {
  return new WOQLQuery().unique(prefix, inputVarList, resultVarName);
};

/**
 *
 * Generate a new IRI from the prefix and concatention of the variables
 * @param {string} prefix - A prefix for the IRI - typically formed of the doc prefix and the
 * classtype of the entity (“doc:Person”)
 * @param {array|string|Var} inputVarList - An array of variables and / or strings from which the
 * unique hash will be generated
 * @param {string|Var} resultVarName - Variable in which the unique ID is stored
 * @returns {WOQLQuery} A WOQLQuery object containing the ID generating function
 * @example
 * let [newid] = vars("newid")
 * idgen("doc:Person", ["John", "Smith"], newid)
 */
WOQL.idgen = function (prefix, inputVarList, resultVarName) {
  return new WOQLQuery().idgen(prefix, inputVarList, resultVarName);
};
WOQL.idgenerator = function (prefix, inputVarList, resultVarName) {
  return new WOQLQuery().idgen(prefix, inputVarList, resultVarName);
};

/**
 *
 * Changes a string to upper-case
 * @param {string|Var} inputVarName - string or variable representing the uncapitalized string
 * @param {string|Var} resultVarName -  variable that stores the capitalized string output
 * @returns {WOQLQuery} A WOQLQuery which contains the Upper case pattern matching expression
 * @example
 * let [allcaps] = vars("allcaps")
 * upper("aBCe", allcaps)
 * //upper contains "ABCE"
 */
WOQL.upper = function (inputVarName, resultVarName) {
  return new WOQLQuery().upper(inputVarName, resultVarName);
};

/**
 *
 * Changes a string to lower-case
 * @param {string|Var} inputVarName -  string or variable representing the non-lowercased string
 * @param {string|Var} resultVarName - variable that stores the lowercased string output
 * @returns {WOQLQuery} A WOQLQuery which contains the Lower case pattern matching expression
 * @example
 * let [lower] = var("l")
 * lower("aBCe", lower)
 * //lower contains "abce"
 */
WOQL.lower = function (inputVarName, resultVarName) {
  return new WOQLQuery().lower(inputVarName, resultVarName);
};

/**
 *
 * Pads out the string input to be exactly len long by appending the pad character pad to
 * form output
 * @param {string|Var} inputVarName - The input string or variable in unpadded state
 * @param {string|Var} pad - The characters to use to pad the string or a variable representing them
 * @param {number | string | Var} len - The variable or integer value representing the length of
 * the output string
 * @param {string|Var} resultVarName - stores output
 * @returns {WOQLQuery} A WOQLQuery which contains the Pad pattern matching expression
 * @example
 * let [fixed] = vars("fixed length")
 * pad("joe", " ", 8, fixed)
 * //fixed contains "joe     "
 */
WOQL.pad = function (inputVarName, pad, len, resultVarName) {
  return new WOQLQuery().pad(inputVarName, pad, len, resultVarName);
};

/**
 * Splits a string (Input) into a list strings (Output) by removing separator
 * @param {string|Var} inputVarName - A string or variable representing the unsplit string
 * @param {string|Var} separator - A string or variable containing a sequence of charatcters
 * to use as a separator
 * @param {string|Var} resultVarName - variable that stores output list
 * @returns {WOQLQuery} A WOQLQuery which contains the Split pattern matching expression
 * @example
 * let [words] = vars("words")
 * split("joe has a hat", " ", words)
 */
WOQL.split = function (inputVarName, separator, resultVarName) {
  return new WOQLQuery().split(inputVarName, separator, resultVarName);
};

/**
 * Matches if List includes Element
 * @param {string|object|Var} element - Either a variable, IRI or any simple datatype
 * @param {string|array|Var} list - List ([string, literal] or string*) Either a variable
 * representing a list or a list of variables or literals
 * @returns {WOQLQuery} A WOQLQuery which contains the List inclusion pattern matching expression
 * @example
 * let [name] = vars("name")
 * member(name, ["john", "joe", "frank"])
 */
WOQL.member = function (element, list) {
  return new WOQLQuery().member(element, list);
};

/**
 *
 * takes a variable number of string arguments and concatenates them into a single string
 * @param {array|string|Var} varList -  a variable representing a list or a list of variables or
 * strings - variables can be embedded in the string if they do not contain spaces
 * @param {string|Var}  resultVarName - A variable or string containing the output string
 * @returns {WOQLQuery} A WOQLQuery which contains the Concatenation pattern matching expression
 * @example
 * let [first_name, last_name, full_name] = vars("first_name", "last_name", "full_name")
 * concat([first_name, " ", last_name], full_name)
 */
WOQL.concat = function (varList, resultVarName) {
  return new WOQLQuery().concat(varList, resultVarName);
};

/**
 *
 * Joins a list variable together (Input) into a string variable (Output) by glueing the strings
 * together with Glue
 * @param {string|array|Var} varList - a variable representing a list or a list of strings
 * and / or variables
 * @param {string|Var} glue - A variable (v:glue) or (glue) string representing the characters
 * to put in between the joined strings in input
 * @param {string|Var} resultVarName - A variable or string containing the output string
 * @returns {WOQLQuery} A WOQLQuery which contains the Join pattern matching expression
 * @example
 * let [sentence] = vars("sentence")
 * join(["joe", "has", "a", "hat", " ", sentence)
 */
WOQL.join = function (varList, glue, resultVarName) {
  return new WOQLQuery().join(varList, glue, resultVarName);
};

/**
 * computes the sum of the List of values passed. In contrast to other arithmetic functions,
 * sum self-evaluates - it does not have to be passed to evaluate()
 * @param {WOQLQuery} subquery -  a subquery or ([string or numeric]) - a list variable, or a
 * list of variables or numeric literals
 * @param {string|Var} total - the variable name with the sum result of the values in List
 * @returns {WOQLQuery} - A WOQLQuery which contains the Sum expression
 * @example
 * let [total] = vars("total")
 * sum([2, 3, 4, 5], total)
 */
WOQL.sum = function (subquery, total) {
  return new WOQLQuery().sum(subquery, total);
};

/**
 *
 * Specifies an offset position in the results to start listing results from
 * @param {number|string|Var} start - A variable that refers to an interger or an integer literal
 * @param {WOQLQuery} [subquery] - WOQL Query object, you can pass a subquery as an argument
 * or a chained query
 * @returns {WOQLQuery} A WOQLQuery whose results will be returned starting from
 * the specified offset
 * @example
 * let [a, b, c] = vars("a", "b", "c")
 * start(100).triple(a, b, c)
 */
WOQL.start = function (start, subquery) {
  return new WOQLQuery().start(start, subquery);
};

/**
 *
 * Specifies a maximum number of results that will be returned from the subquery
 * @param {number|string} limit - A variable that refers to an non-negative integer or a
 * non-negative integer
 * @param {WOQLQuery} [subquery] - A subquery whose results will be limited
 * @returns {WOQLQuery} A WOQLQuery whose results will be returned starting from
 * the specified offset
 * @example
 * let [a, b, c] = vars("a", "b", "c")
 * limit(100).triple(a, b, c)
 * //subquery is an argument or a chained query
 * limit(100,triple(a, b, c))
 */
WOQL.limit = function (limit, subquery) {
  return new WOQLQuery().limit(limit, subquery);
};

/**
 *
 * Matches the regular expression defined in Patern against the Test string, to produce
 * the matched patterns in Matches
 * @param {string} pattern - string or variable using normal PCRE regular expression syntax with
 * the exception that special characters have to be escaped twice (to enable transport in JSONLD)
 * @param {string|Var} inputVarName - string or variable containing the string to be tested for
 * patterns with the regex
 * @param {string|array|object|Var} resultVarList - variable representing the list of matches
 * or a list of strings or variables
 * @returns {WOQLQuery} A WOQLQuery which contains the Regular Expression pattern
 * matching expression
 * @example
 * let [All, Sub] = vars("All", "Sub")
 * WOQL.re("h(.).*", "hello", [All, Sub])
 * //e contains 'e', llo contains 'llo'
 * //p is a regex pattern (.*) using normal regular expression syntax, the only unusual
 * thing is that special characters have to be escaped twice, s is the string to be matched
 * and m is a list of matches:
 */
WOQL.re = function (pattern, inputVarName, resultVarList) {
  return new WOQLQuery().re(pattern, inputVarName, resultVarList);
};
WOQL.regexp = function (pattern, inputVarName, resultVarList) {
  return new WOQLQuery().re(pattern, inputVarName, resultVarList);
};

/**
 *
 * Calculates the length of the list in va and stores it in vb
 * @param {string|array} inputVarList - Either a variable representing a list or a list of
 * variables or literals
 * @param {string|Var} resultVarName -  A variable in which the length of the list is stored or
 * the length of the list as a non-negative integer
 * @returns {WOQLQuery} A WOQLQuery which contains the Length pattern matching expression
 * @example
 * let [count] = vars("count")
 * length(["john", "joe", "frank"], count)
 */
WOQL.length = function (inputVarList, resultVarName) {
  return new WOQLQuery().length(inputVarList, resultVarName);
};

/**
 *
 * Logical negation of the contained subquery - if the subquery matches, the query
 * will fail to match
 * @param {string | WOQLQuery} [subquery] -  A subquery which will be negated
 * @returns {WOQLQuery} A WOQLQuery object containing the negated sub Query
 * @example
 * let [subject, label] = vars("subject", "label")
 * not().triple(subject, 'label', label)
 */
WOQL.not = function (subquery) {
  return new WOQLQuery().not(subquery);
};

/**
 * Results in one solution of the subqueries
 * @param {string| WOQLQuery } [subquery] - WOQL Query objects
 * @returns {WOQLQuery} A WOQLQuery object containing the once sub Query
 */
WOQL.once = function (subquery) {
  return new WOQLQuery().once(subquery);
};

/**
 * Runs the query without backtracking on side-effects
 * @param {string| WOQLQuery } [subquery] - WOQL Query objects
 * @returns {WOQLQuery} A WOQLQuery object containing the immediately sub Query
 */
WOQL.immediately = function (subquery) {
  return new WOQLQuery().immediately(subquery);
};

/**
 * Creates a count of the results of the query
 * @param {string|number|Var} countVarName - variable or integer count
 * @param {WOQLQuery} [subquery]
 * @returns {WOQLQuery} A WOQLQuery object containing the count sub Query
 * @example
 * let [count, Person] = vars("count", "Person")
 * WOQL.count(count).triple(Person, "rdf:type", "@schema:Person")
 */
WOQL.count = function (countVarName, subquery) {
  return new WOQLQuery().count(countVarName, subquery);
};

/**
 *
 * Casts the value of Input to a new value of type Type and stores the result in CastVar
 * @param {string|number|object|Var} varName - Either a single variable or a
 * literal of any basic type
 * @param {string|Var} varType - Either a variable or a basic datatype (xsd / xdd)
 * @param {string|Var} resultVarName - save the return variable
 * @returns {WOQLQuery} A WOQLQuery which contains the casting expression
 * @example
 * let [time] = vars("time")
 * cast("22/3/98", "xsd:dateTime", time)
 */
WOQL.typecast = function (varName, varType, resultVarName) {
  return new WOQLQuery().typecast(varName, varType, resultVarName);
};
WOQL.cast = function (varName, varType, resultVarName) {
  return new WOQLQuery().typecast(varName, varType, resultVarName);
};

/**
 * Orders the results of the contained subquery by a precedence list of variables
 * @param  {...string|...Var|...array} varNames - A sequence of variables,
 * by which to order the results,
 * each optionally followed by either “asc” or “desc” to represent order as a list, by default
 * it will sort the variable in ascending order
 * @returns  {WOQLQuery} A WOQLQuery which contains the ordering expression
 * @example
 * let [A, B, C] = vars("A", "B", "C")
 * WOQL.order_by(A, [B, "asc"], [C, "desc"]).triple(A, B, C);
 */
WOQL.order_by = function (...varNames) {
  return new WOQLQuery().order_by(...varNames);
};

/**
 *
 * Groups the results of the contained subquery on the basis of identical values for Groupvars,
 * extracts the patterns defined in PatternVars and stores the results in GroupedVar
 * @param {array|string|Var} varList - Either a single variable or an array of variables
 * @param {array|string|Var} patternVars - Either a single variable or an array of variables
 * @param {string|Var} resultVarName - output variable name
 * @param {WOQLQuery} [subquery] - The query whose results will be grouped
 * @returns {WOQLQuery} A WOQLQuery which contains the grouping expression
 * @example
 * //subquery is an argument or a chained query
 * let [age, last_name, first_name, age_group, person] = vars("age", "last name", "first name",
 * "age group", "person")
 * group_by(age, [last_name, first_name], age_group)
 *   .triple(person, "first_name", first_name)
 *   .triple(person, "last_name", last_name)
 *   .triple(person, "age", age)
 */
WOQL.group_by = function (varList, patternVars, resultVarName, subquery) {
  return new WOQLQuery().group_by(varList, patternVars, resultVarName, subquery);
};

/**
 *
 * A function that always matches, always returns true
 * @returns {WOQLQuery} A WOQLQuery object containing the true value that will match any pattern
 * @example
 * when(true()).triple("a", "b", "c")
 */
WOQL.true = function () {
  return new WOQLQuery().true();
};

/**
 *
 * Performs a path regular expression match on the graph
 * @param {string|Var} subject -  An IRI or variable that refers to an IRI representing the subject,
 * i.e. the starting point of the path
 * @param {string} pattern -(string) - A path regular expression describing a pattern through
 * multiple edges of the graph (see: https://terminusdb.com/docs/path-query-reference-guide)
 * @param {string|Var} object - An IRI or variable that refers to an IRI representing the object,
 * i.e. ending point of the path
 * @param {string|Var} [resultVarName] - A variable in which the actual paths
 * traversed will be stored
 * @returns {WOQLQuery} - A WOQLQuery which contains the path regular expression matching expression
 * @example
 * let [person, grand_uncle, lineage] = vars("person", "grand uncle", "lineage")
 * path(person, "((father|mother) {2,2}), brother)", grand_uncle, lineage)
 */
WOQL.path = function (subject, pattern, object, resultVarName) {
  return new WOQLQuery().path(subject, pattern, object, resultVarName);
};

/**
 *
 * Calculates the size in bytes of the contents of the resource identified in ResourceID
 * @param {string|Var} resourceId - A valid resource identifier string (can refer to any graph /
 * branch / commit / db)
 * @param {string|Var} resultVarName - The variable name
 * @example
 * let [varSize] = vars("varSize")
 * size("admin/minecraft/local/branch/main/instance/main", varSize)
 * //returns the number of bytes in the main instance graph on the main branch
 */
WOQL.size = function (resourceId, resultVarName) {
  return new WOQLQuery().size(resourceId, resultVarName);
};

/**
 *
 * Calculates the number of triples of the contents of the resource identified in ResourceID
 * @param {string|Var} resourceId - A valid resource identifier string (can refer to any graph /
 * branch / commit / db)
 * @param {string|number|Var} tripleCount - An integer literal with the size in bytes or a
 * variable containing that integer
 * @returns {WOQLQuery} A WOQLQuery which contains the size expression
 * @example
 * let [count] = vars("count")
 * triple_count("admin/minecraft/local/_commits", count)
 * //returns the number of bytes in the local commit graph
 */
WOQL.triple_count = function (resourceId, tripleCount) {
  return new WOQLQuery().triple_count(resourceId, tripleCount);
};

/**
 *
 * Returns true if 'elementId' is of type 'elementType', according to the current DB schema
 * @param {string|Var} elementId - the id of a schema graph element
 * @param {string|Var} elementType - the element type
 * @returns {WOQLQuery} A WOQLQuery object containing the type_of pattern matching rule
 *
 */
WOQL.type_of = function (elementId, elementType) {
  return new WOQLQuery().type_of(elementId, elementType);
};

/**
 *
 * Generates a query that by default matches all triples in a graph identified by "graph"
 * or in all the current terminusDB's graph
 * @param {string | boolean} [graph] - false or the resource identifier of a graph possible
 * value are schema/{main - myschema - *} | instance/{main - myschema - *}  |
 * inference/{main - myschema - *}
 * @param {string|Var} [subject] - The IRI of a triple’s subject or a variable,
 * default value "v:Subject"
 * @param {string|Var} [predicate] - The IRI of a property or a variable,
 *  default value "v:Predicate"
 * @param {string|Var} [object] - The IRI of a node or a variable, or a literal,
 * default value "v:Object"
 * @returns {WOQLQuery} A WOQLQuery which contains the pattern matching expression
 * @example
 * star("schema/main")
 * //will return every triple in schema/main graph
 */
WOQL.star = function (graph, subject, predicate, object) {
  return new WOQLQuery().star(graph, subject, predicate, object);
};

/**
 *
 * Generates a query that by default matches all triples in a graph - identical to
 * star() except for order of arguments
 * @param {string|Var} [subject] - The IRI of a triple’s subject or a variable
 * @param {string|Var} [predicate] - The IRI of a property or a variable
 * @param {string|Var} [object] - The IRI of a node or a variable, or a literal
 * @param {typedef.GraphRef} [graphRef] - the resource identifier of a graph possible
 * value are schema/{main - myschema - *} | instance/{main - myschema - *}  |
 * inference/{main - myschema - *}
 * @returns {WOQLQuery} - A WOQLQuery which contains the pattern matching expression
 * all("mydoc")
 * //will return every triple in the instance/main graph that has "doc:mydoc" as its subject
 */
WOQL.all = function (subject, predicate, object, graphRef) {
  return new WOQLQuery().all(subject, predicate, object, graphRef);
};

/**
 *
 * Specifies the identity of a node that can then be used in subsequent builder functions.
 * Note that node() requires subsequent chained functions to complete the triples / quads
 * that it produces - by itself it only generates the subject.
 * @param {string|Var} nodeid -  The IRI of a node or a variable containing an IRI which will
 * be the subject of the builder functions
 * @param {typedef.FuntionType} [chainType] - Optional type of builder function to build
 * (default is triple)
 * @returns {WOQLQuery} - A WOQLQuery which contains the partial Node pattern matching expression
 * @example
 * node("mydoc").label("my label")
 * //equivalent to triple("mydoc", "label", "my label")
 */
WOQL.node = function (nodeid, chainType) {
  return new WOQLQuery().node(nodeid, chainType);
};
// These ones are special ones for dealing with the schema only...

/**
 * Inserts a single triple into the database declaring the Node to have type Type,
 * optionally into the specified graph
 * @param {string|Var} classId - IRI string or variable containing
 * the IRI of the node to be inserted
 * @param {string|Var} classType  -  IRI string or variable containing the IRI of the
 * type of the node (class/document name)
 * @param {typedef.GraphRef} [graphRef] - Optional Graph resource identifier
 * @returns {WOQLQuery} A WOQLQuery which contains the insert expression
 * @example
 * insert("mydoc", "MyType")
 * //equivalent to add_triple("mydoc", "rdf:type", "@schema:MyType")
 */
WOQL.insert = function (classId, classType, graphRef) {
  return new WOQLQuery().insert(classId, classType, graphRef);
};

/**
 * Sets the graph resource ID that will be used for subsequent chained function calls
 * @param {typedef.GraphRef} [graphRef] Resource String identifying the graph which will
 * be used for subsequent chained schema calls
 * @returns {WOQLQuery} A WOQLQuery which contains the partial Graph pattern matching expression
 * @example
 * WOQL.graph("schema")
 * //equivalent to add_quad("MyClass", "label", "My Class Label", "schema/main")
 */

WOQL.graph = function (graphRef) {
  return new WOQLQuery().graph(graphRef);
};

// to be review
/**
 * Deletes all triples in the passed graph (defaults to instance/main)
 * @param {typedef.GraphRef} [graphRef] - Resource String identifying the graph from
 * which all triples will be removed
 * @returns {WOQLQuery} - A WOQLQuery which contains the deletion expression
 * @example
 * nuke("schema/main")
 * //will delete everything from the schema/main graph
 */
WOQL.nuke = function (graphRef) {
  return new WOQLQuery().nuke(graphRef);
};

/**
 * Generates an empty WOQLQuery object
 * @returns {WOQLQuery}
 * @example
 * let q = query()
 * //then q.triple(1, 1) ...
 */
WOQL.query = function () {
  return new WOQLQuery();
};

/**
 * Generates a WOQLQuery object from the passed WOQL JSON - if an argument is passed,
 * the query object is created from it, if none is passed, the current state is
 * returned as a JSON-LD
 * @param {object} [JSON_LD] - JSON-LD woql document encoding a query
 * @returns {WOQLQuery | object} either a JSON-LD or a WOQLQuery object
 *
 * json version of query for passing to api
 */
WOQL.json = function (JSON_LD) {
  return new WOQLQuery().json(JSON_LD);
};

/**
 * get the predefined library query [WOQLLibrary](/api/woqlLibrary.js?id=WOQLLibrary)
 * @returns {WOQLQuery} WOQLQuery object
 * @example
 * //get commits older than the specified commit id
 * const query = WOQL.lib().previousCommits('m8vpxewh2aovfauebfkbzwmj4qwr5lb')
 *
 * //return the commits of a specific branch starting from the head
 * //you can add the limit (how many results to return.) and the start point
 * //if a timestamp is given, gets the commits before the specified timestamp
 * //WOQL.lib().commits(branch='main',limit=0,start=0,timestamp=0)
 *
 * const query = WOQL.lib().commits('main',10,2,1630683082.9278786)
 *
 * //return the branches list with the timestamp and commits id
 * const query = WOQL.lib().branches()
 */
WOQL.lib = function () {
  return new WOQLLibrary();
};

/**
 * Generates explicitly a JSON-LD string literal from the input
 * @param {string | boolean | number} val - any primitive literal type
 * @returns {object} - A JSON-LD string literal
 * @example
 * string(1)
 * //returns { "@type": "xsd:string", "@value": "1" }
 */
WOQL.string = function (val) {
  return new WOQLQuery().string(val);
};

/**
 * Generates explicitly a JSON-LD string literal from the input
 * @param {string} val - any literal type
 * @param {string} type - an xsd or xdd type
 * @returns {object} - A JSON-LD literal
 * @example
 * literal(1, "nonNegativeInteger")
 * //returns { "@type": "xsd:nonNegativeInteger", "@value": 1 }
 */
WOQL.literal = function (val, type) {
  return new WOQLQuery().literal(val, type);
};

/**
 * Generates explicitly a JSON-LD literal date from the imput
 * @param {string} date - any date format string (YYYY-MM-DD)
 * @returns {object} - A JSON-LD literal date
 * @example
 * date("2022-10-02")
 * //returns { "@type": "xsd:date", "@value": "2022-10-02" }
 */
WOQL.date = function (date) {
  return new WOQLQuery().literal(date, 'xsd:date');
};

/**
 * Generates explicitly a JSON-LD literal datetime from the imput
 * @param {string} datetime - any datetime format string (YYYY-MM-DDThh-mm-ssZ)
 * @returns {object} - A JSON-LD literal datetime
 * @example
 * datetime("2022-10-19T14:17:12Z")
 * //returns { "@type": "xsd:dateTime", "@value": "2022-10-19T14:17:12Z" }
 */
WOQL.datetime = function (datetime) {
  return new WOQLQuery().literal(datetime, 'xsd:dateTime');
};

/**
 * Generates explicitly a JSON-LD literal boolean from the input
 * @param {boolean} bool - true | false
 * @returns {object} - A JSON-LD literal boolean
 * @example
 * boolean(true)
 * //returns { "@type": "xsd:boolean", "@value": true }
 */
WOQL.boolean = function (bool) {
  return new WOQLQuery().boolean(bool);
};

/**
 * Explicitly sets a value to be an IRI - avoiding automatic type marshalling
 * @param {string} val string which will be treated as an IRI
 * @returns {object} - A JSON-LD IRI value
 */
WOQL.iri = function (val) {
  return new WOQLQuery().iri(val);
};

/**
 * Generates javascript variables for use as WOQL variables within a query
 * @param  {...string} varNames
 * @returns {array<Var>} an array of javascript variables which can be dereferenced using the
 * array destructuring operation
 * @example
 * const [a, b, c] = WOQL.vars("a", "b", "c")
 * //a, b, c are javascript variables which can be used as WOQL variables in subsequent queries
 */

WOQL.vars = function (...varNames) {
  return varNames.map((item) => new Var(item));
};

/**
 * Produces an encoded form of a document that can be used by a WOQL operation
 * such as `WOQL.insert_document`.
 * @param  {object} object - Document to encode
 * @returns {object} The encoded document
 * @example
 * const doc = WOQL.doc({ "@type": "Person", name: "Newperson" })
 */

WOQL.doc = function (object) {
  return new Doc(object);
};

/**
 * Use instead to run your query woqlclient.query('myWOQLQuery')
 * @deprecated
 * Gets/Sets woqlClient
 * @param {WOQLClient}
 * @returns {WOQLClient}
 */
WOQL.client = function (client) {
  if (client) this._client = client;
  return this._client;
};

/**
 *
 * @param  {...string} varNames
 * @returns {object<Var>}
 * @example
 * const v = WOQL.Vars('var01', 'var02', 'var03');
 * triple(v.var01, v.var02, v.var03)
 */
WOQL.Vars = function (...varNames) {
  return new Vars(...varNames);
};

/**
 *
 * query module
 * allow you to use WOQL words as top level functions
 * @param {*} auto_eval
 */
WOQL.emerge = function (auto_eval) {
  const unemerged = ['emerge', 'true', 'eval'];
  function _emerge_str(k) {
    const str = `function ${k}(...args){
            return WOQL.${k}(...args)
        }`;
    return str;
  }
  const funcs = [_emerge_str('Vars')];
  // eslint-disable-next-line no-restricted-syntax
  for (const k in this) {
    if (typeof this[k] === 'function') {
      if (unemerged.indexOf(k) === -1) {
        funcs.push(_emerge_str(k));
      }
    }
  }
  const str = funcs.join(';\n');
  // eslint-disable-next-line no-eval
  if (auto_eval) eval(str);
  return str;
};

/**
 * Update a pattern matching rule for the triple (Subject, Predicate, oldObjValue) with the
 * new one (Subject, Predicate, newObjValue)
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string|Var} newObjValue - The value to update or a literal
 * @param {string|Var} oldObjValue - The old value of the object
 * @returns {WOQLQuery} A WOQLQuery which contains the a Update Triple Statement
 */

WOQL.update_triple = function (subject, predicate, newObjValue, oldObjValue) {
  return new WOQLQuery().update_triple(subject, predicate, newObjValue, oldObjValue);
};

/**
 * Update a pattern matching rule for the quad [S, P, O, G] (Subject, Predicate, Object, Graph)
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string|Var} newObject - The value to update or a literal
 * @param {typedef.GraphRef} graphRef - A valid graph resource identifier string
 * @returns {WOQLQuery} A WOQLQuery which contains the a Update Quad Statement
 */

WOQL.update_quad = function (subject, predicate, newObject, graphRef) {
  return new WOQLQuery().update_quad(subject, predicate, newObject, graphRef);
};

/**
 * Creates a pattern matching rule for a triple [Subject, Predicate, Object]
 * add extra information about the type of the value object
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string | number | boolean | Var} objValue - an specific value
 * @returns {WOQLQuery} A WOQLQuery which contains the a quad or a triple Statement
 */
WOQL.value = function (subject, predicate, objValue) {
  return new WOQLQuery().value(subject, predicate, objValue);
};

/**
 * Creates a pattern matching rule for a triple [Subject, Predicate, Object]
 * @param {string|Var} subject - The IRI of a triple’s subject or a variable
 * @param {string|Var} predicate - The IRI of a property or a variable
 * @param {string|Var} object - The IRI of a node or a variable, or a literal
 * @returns {WOQLQuery} A WOQLQuery which contains the a quad or a triple Statement
 */
WOQL.link = function (subject, predicate, object) {
  return new WOQLQuery().link(subject, predicate, object);
};

/**
 * Extract the value of a key in a bound document.
 * @param {string|Var} document - Document which is being accessed.
 * @param {string|Var} field - The field from which the document which is being accessed.
 * @param {string|Var} value - The value for the document and field.
 * @returns {WOQLQuery} A WOQLQuery which contains the a dot Statement
 */
WOQL.dot = function (document, field, value) {
  return new WOQLQuery().dot(document, field, value);
};

module.exports = WOQL;


/***/ }),

/***/ 5489:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* eslint-disable camelcase */
/* eslint-disable no-param-reassign */
/* eslint-disable no-underscore-dangle */
/* eslint-disable no-unused-vars */
/// /@ts-check
const FormData = __nccwpck_require__(8460);
const fs = __nccwpck_require__(7147);
const typedef = __nccwpck_require__(1072);
const CONST = __nccwpck_require__(229);
const DispatchRequest = __nccwpck_require__(3154);
const ErrorMessage = __nccwpck_require__(181);
const ConnectionConfig = __nccwpck_require__(1935);
const WOQL = __nccwpck_require__(5054);
const WOQLQuery = __nccwpck_require__(3552);

/**
 * @license Apache Version 2
 * @class
 * @classdesc The core functionality of the TerminusDB javascript client is
 * defined in the WOQLClient class - in the woqlClient.js file. This class provides
 * methods which allow you to directly get and set all of the configuration and API
 * endpoints of the client. The other parts of the WOQL core - connectionConfig.js
 * and connectionCapabilities.js - are used by the client to store internal state - they
 * should never have to be accessed directly. For situations where you want to communicate
 * with a TerminusDB server API, the WOQLClient class is all you will need.
 */
class WOQLClient {
  connectionConfig = null;

  databaseList = [];

  organizationList = [];

  /**
  * @constructor
  * @param {string} serverUrl - the terminusdb server url
  * @param {typedef.ParamsObj} [params] - an object with the connection parameters
  * @example
  * //to connect with your local terminusDB
  * const client = new TerminusClient.WOQLClient(SERVER_URL,{user:"admin",key:"myKey"})
  * async function getSchema() {
  *      client.db("test")
  *      client.checkout("dev")
  *      const schema = await client.getSchema()
  * }
  * //The client has an internal state which defines what
  * //organization / database / repository / branch / ref it is currently attached to
  *
  * //to connect with your TerminusDB Cloud Instance
  * const client = new TerminusClient.WOQLClient('SERVER_CLOUD_URL/mycloudTeam',
  *                      {user:"myemail@something.com", organization:'mycloudTeam'})
  *
  * client.setApiKey(MY_ACCESS_TOKEN)
  *
  * //to get the list of all organization's databases
  * async function callGetDatabases(){
  *      const dbList = await client.getDatabases()
  *      console.log(dbList)
  * }
  *
  * async function getSchema() {
  *      client.db("test")
  *      client.checkout("dev")
  *      const schema = await client.getSchema()
  * }
  */
  constructor(serverUrl, params) {
    this.connectionConfig = new ConnectionConfig(serverUrl, params);
  }
}

/**
 * set the api key to access the cloud resources
 * @param {string} accessToken
 */
WOQLClient.prototype.setApiKey = function (accessToken) {
  const currentAuth = this.connectionConfig.localAuth() || {};
  currentAuth.key = accessToken;
  currentAuth.type = 'apikey';
  this.connectionConfig.setLocalAuth(currentAuth);
};

/**
 * add extra headers to your request
 * @param {object} customHeaders
 * @returns {object}
 */

// eslint-disable-next-line consistent-return
WOQLClient.prototype.customHeaders = function (customHeaders) {
  if (customHeaders) this._customHeaders = customHeaders;
  else return this._customHeaders;
};

WOQLClient.prototype.CONST = CONST;

/**
 * creates a copy of the client with identical internal state and context
 * useful if we want to change context for a particular API call without changing
 * the current client context
 * @returns {WOQLClient}  new client object with identical state to original but
 * which can be manipulated independently
 * @example
 * let newClient = client.copy()
 */
WOQLClient.prototype.copy = function () {
  const other = new WOQLClient(this.server());
  // other.connection = this.connection //keep same connection meta data - shared by copy
  other.connectionConfig = this.connectionConfig.copy(); // new copy of current connection data
  other.databaseList = this.databaseList;
  return other;
};

/**
 * Gets the current connected server url
 * it can only be set creating a new WOQLCLient instance
 * @returns {string}
 */
WOQLClient.prototype.server = function () {
  return this.connectionConfig.serverURL();
};

/**
 * Retrieve the URL of the server’s API base that we are currently connected to
 * @returns {string} the URL of the TerminusDB server api endpoint we are connected
 * to (typically server() + “api/”)
 * @example
 * let api_url = client.api()
 */
WOQLClient.prototype.api = function () {
  return this.connectionConfig.apiURL();
};

/**
 * Gets/Sets the client’s internal organization context value, if you change the organization
 * name the databases list will be set to empty
 * @param {string | boolean} [orgId] the organization id to set the context to
 * @returns {string | boolean}
 * @example
 * client.organization("admin")
 */
WOQLClient.prototype.organization = function (orgId) {
  if (typeof orgId !== 'undefined') {
    this.connectionConfig.setOrganization(orgId);
    // we have to reset the databases list
    this.databases([]);
  }
  return this.connectionConfig.organization();
};

/**
 * Checks if a database exists
 *
 * Returns true if a DB exists and false if it doesn't. Other results
 * throw an exception.
 * @param {string} [orgName] the organization id to set the context to
 * @param {string} [dbName] the db name to set the context to
 * @returns {Promise}
 * @example
 * async function executeIfDatabaseExists(f){
 *      const hasDB = await client.hasDatabase("admin", "testdb")
 *      if (hasDB) {
 *          f()
 *      }
 * }
 */
WOQLClient.prototype.hasDatabase = async function (orgName, dbName) {
  const dbCheckUrl = `${this.connectionConfig.apiURL()}db/${orgName}/${dbName}`;
  return new Promise((resolve, reject) => {
    this.dispatch(CONST.HEAD, dbCheckUrl).then((req) => {
      resolve(true);
    }).catch((err) => {
      if (err.status === 404) {
        resolve(false);
      } else {
        reject(err);
      }
    });
  });
};

/**
 * Gets the organization's databases list.
 *
 * If no organization has been set up, the function throws an exception
 * @returns {Promise}
 * @example
 * async function callGetDatabases(){
 *      const dbList = await client.getDatabases()
 *      console.log(dbList)
 * }
 */
WOQLClient.prototype.getDatabases = async function () {
  // return response
  if (!this.connectionConfig.organization()) {
    throw new Error('You need to set the organization name');
  }
  // when we will have the end point to get the databases only for the current organization
  // we'll change this call
  await this.getUserOrganizations();
  const dbs = this.userOrganizations().find(
    (element) => element.name === this.connectionConfig.organization(),
  );
  const dbList = dbs && dbs.databases ? dbs.databases : [];
  this.databases(dbList);
  return dbList;
};

/**
 * Set/Get the organization's databases list (id, label, comment) that the current
 * user has access to on the server.
 * @param {array} [dbList] a list of databases the user has access to on the server, each having:
 * @returns {array} the organization's databases list
 * @example
 * //to get the list of all organization's databases
 * async function callGetDatabases(){
 *      await client.getDatabases()
 *      console.log(client.databases())
 * }
 *
 */
WOQLClient.prototype.databases = function (dbList) {
  if (dbList) this.databaseList = dbList;
  return this.databaseList || [];
};

/**
 * Gets the current user object as returned by the connect capabilities response
 * user has fields: [id, name, notes, author]
 * @returns {Object}
 */
WOQLClient.prototype.user = function () {
  // this is the locacal
  return this.connectionConfig.user();
};

/**
 * @desription Gets the user's organization id
 * @returns {string} the user organization name
 */
// this is something that need review
WOQLClient.prototype.userOrganization = function () {
  return this.user();
};

/**
 * Gets the database's details
 * @param {string} [dbName] - the datbase name
 * @returns {object} the database description object
 */
WOQLClient.prototype.databaseInfo = function (dbName) {
  // const dbIdVal = dbId || this.db();
  // const orgIdVal = orgId || this.organization()
  const database = this.databases().find((element) => element.name === dbName);
  return database || {};
};

/**
 * Sets / Gets the current database
 * @param {string} [dbId] - the database id to set the context to
 * @returns {string|boolean} - the current database or false
 * @example
 * client.db("mydb")
 */
WOQLClient.prototype.db = function (dbId) {
  if (typeof dbId !== 'undefined') {
    this.connectionConfig.setDB(dbId);
  }
  return this.connectionConfig.dbid;
};

/**
 *Sets the internal client context to allow it to talk to the server’s internal system database
 *
 */
WOQLClient.prototype.setSystemDb = function () {
  this.db(this.connectionConfig.system_db);
};

/**
 * Gets / Sets the client’s internal repository context value (defaults to ‘local’)
 * @param {typedef.RepoType | string} [repoId] - default value is local
 * @returns {string} the current repository id within the client context
 * @example
 * client.repo("origin")
 */
WOQLClient.prototype.repo = function (repoId) {
  if (typeof repoId !== 'undefined') {
    this.connectionConfig.setRepo(repoId);
  }
  return this.connectionConfig.repo();
};

/**
 * Gets/Sets the client’s internal branch context value (defaults to ‘main’)
 * @param {string} [branchId] - the branch id to set the context to
 * @returns {string} the current branch id within the client context
 */
WOQLClient.prototype.checkout = function (branchId) {
  if (typeof branchId !== 'undefined') {
    this.connectionConfig.setBranch(branchId);
  }
  return this.connectionConfig.branch();
};

/**
 *  Sets / gets the current ref pointer (pointer to a commit within a branch)
 * Reference ID or Commit ID are unique hashes that are created whenever a new commit is recorded
 * @param {string} [commitId] - the reference ID or commit ID
 * @returns {string|boolean}  the current commit id within the client context
 * @example
 * client.ref("mkz98k2h3j8cqjwi3wxxzuyn7cr6cw7")
 */
WOQLClient.prototype.ref = function (commitId) {
  if (typeof commitId !== 'undefined') {
    this.connectionConfig.setRef(commitId);
  }
  return this.connectionConfig.ref();
};

/**
 * Sets/Gets set the database basic connection credential
 * @param {typedef.CredentialObj} [newCredential]
 * @returns {typedef.CredentialObj | boolean}
 * @example
 * client.localAuth({user:"admin","key":"mykey","type":"basic"})
 */
WOQLClient.prototype.localAuth = function (newCredential) {
  if (typeof newCredential !== 'undefined') {
    this.connectionConfig.setLocalAuth(newCredential);
  }
  return this.connectionConfig.localAuth();
};
/**
 * Use {@link #localAuth} instead.
 * @deprecated
 */

WOQLClient.prototype.local_auth = WOQLClient.prototype.localAuth;

/**
 * Sets/Gets the jwt token for authentication
 * we need this to connect 2 terminusdb server to each other for push, pull, clone actions
 * @param {typedef.CredentialObj} [newCredential]
 * @returns {typedef.CredentialObj | boolean}
 * @example
 * client.remoteAuth({"key":"dhfmnmjglkrelgkptohkn","type":"jwt"})
 */
WOQLClient.prototype.remoteAuth = function (newCredential) {
  if (typeof newCredential !== 'undefined') {
    this.connectionConfig.setRemoteAuth(newCredential);
  }
  return this.connectionConfig.remoteAuth();
};

/**
 * Use {@link #remoteAuth} instead.
 * @deprecated
 */

WOQLClient.prototype.remote_auth = WOQLClient.prototype.remoteAuth;

/**
 * Gets the string that will be written into the commit log for the current user
 * @returns {string} the current user
 * @example
 * client.author()
 */
WOQLClient.prototype.author = function () {
  // we have to review this with is the author in local and remote
  // was a old functionality
  // if (ignoreJwt) {
  // this.connectionConfig.user(ignoreJwt)
  // }
  return this.connectionConfig.user();
};

/**
 * @param {typedef.ParamsObj} params - a object with connection params
 * @example sets several of the internal state values in a single call
 * (similar to connect, but only sets internal client state, does not communicate with server)
 * client.set({key: "mypass", branch: "dev", repo: "origin"})
 */
WOQLClient.prototype.set = function (params) {
  this.connectionConfig.update(params);
};

/**
 * Generates a resource string for the required context
 * of the current context for "commits" "meta" "branch" and "ref" special resources
 * @param {typedef.ResourceType} resourceType - the type of resource string that is required - one
 * of “db”, “meta”, “repo”, “commits”, “branch”, “ref”
 * @param {string} [resourceId] -  can be used to specify a specific branch / ref - if not supplied
 * the current context will be used
 * @returns {string} a resource string for the desired context
 * @example
 * const branch_resource = client.resource("branch")
 */
// eslint-disable-next-line consistent-return
WOQLClient.prototype.resource = function (resourceType, resourceId) {
  let base = `${this.organization()}/${this.db()}/`;
  if (resourceType === 'db') return base;
  if (resourceType === 'meta') return `${base}_meta`;
  base += `${this.repo()}`;
  if (resourceType === 'repo') return base;
  if (resourceType === 'commits') return `${base}/_commits`;
  const resourceIdValue = resourceId || (resourceType === 'ref' ? this.ref() : this.checkout());
  if (resourceType === 'branch') return `${base}/branch/${resourceIdValue}`;
  if (resourceType === 'ref') return `${base}/commit/${resourceIdValue}`;
};

/**
 * You can call this to get the server info or override the start params
 * configuration, this.connectionConfig.server will be used if present,
 * or the promise will be rejected.
 *
 * @deprecated
 *
 * @param {typedef.ParamsObj} [params] - TerminusDB Server connection parameters
 * @returns {Promise}  the connection capabilities response object or an error object
 * @example
 * client.connect()
 */
WOQLClient.prototype.connect = function (params) {
  if (params) this.connectionConfig.update(params);
  // unset the current server setting until successful connect
  return this.dispatch(CONST.GET, this.connectionConfig.apiURLInfo()).then((response) => response);
};

/**
 * Creates a new database in TerminusDB server
 * @param {string} dbId - The id of the new database to be created
 * @param {typedef.DbDetails} dbDetails - object containing details about the database to be created
 * @param {string} [orgId] - optional organization id - if absent default local organization
 * id is used
 * @returns {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * //remember set schema:true if you need to add a schema graph
 * client.createDatabase("mydb", {label: "My Database", comment: "Testing", schema: true})
 */
// maybe we can pass only the detailObj it is have inside the dbid and org
WOQLClient.prototype.createDatabase = function (dbId, dbDetails, orgId) {
  if (orgId) this.organization(orgId);
  // console.log("createDatabase", orgId)
  if (dbId) {
    this.db(dbId);
    // to be review
    // console.log('____remoteURL_BFF__', this.connectionConfig.dbURL())
    return this.dispatch(CONST.POST, this.connectionConfig.dbURL(), dbDetails);
  }
  const errmsg = `Create database parameter error - you must specify a valid database id  - ${dbId} is invalid`;
  return Promise.reject(
    new Error(ErrorMessage.getInvalidParameterMessage(CONST.CREATE_DATABASE, errmsg)),
  );
};

/**
 * Update a database in TerminusDB server
 * @param {typedef.DbDoc} dbDoc - object containing details about the database to be updated
 * @returns {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * client.updateDatabase({id: "mydb", label: "My Database", comment: "Testing"})
 */
WOQLClient.prototype.updateDatabase = function (dbDoc) {
  const dbid = dbDoc.id || this.db();
  this.organization(dbDoc.organization || this.organization());
  if (dbid) {
    this.db(dbid);
    return this.dispatch(CONST.PUT, this.connectionConfig.dbURL(), dbDoc);
  }
  const errmsg = `Update database error - you must specify a valid database id - ${dbid} is invalid`;
  return Promise.reject(
    new Error(ErrorMessage.getInvalidParameterMessage(CONST.UPDATE_DATABASE, errmsg)),
  );
};

/**
 * Deletes a database from a TerminusDB server
 * @param {string} dbId The id of the database to be deleted
 * @param {string} [orgId] the id of the organization to which the database belongs
 * (in desktop use, this will always be “admin”)
 * @param {boolean} [force]
 * @returns {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * client.deleteDatabase("mydb")
 */
WOQLClient.prototype.deleteDatabase = function (dbId, orgId, force) {
  const orgIdValue = orgId || this.organization();
  this.organization(orgIdValue);
  const payload = force ? { force: true } : null;
  if (dbId && this.db(dbId)) {
    return this.dispatch(CONST.DELETE, this.connectionConfig.dbURL(), payload);
  }
  const errmsg = `Delete database parameter error - you must specify a valid database id  - ${dbId} is invalid`;
  return Promise.reject(
    new Error(ErrorMessage.getInvalidParameterMessage(CONST.DELETE, errmsg)),
  );
};

/**
 * Retrieve the contents of a graph within a TerminusDB as triples, encoded in
 * the turtle (ttl) format
 * @param {typedef.GraphType} graphType -  type of graph to get triples from,
 * either “instance” or  “schema”
 * @returns {Promise}  A promise that returns the call response object (with
 * the contents being a string representing a set of triples in turtle (ttl) format),
 * or an Error if rejected.
 * @example
 * const turtle = await client.getTriples("schema", "alt")
 */
WOQLClient.prototype.getTriples = function (graphType) {
  if (graphType) {
    return this.dispatch(
      CONST.GET,
      this.connectionConfig.triplesURL(graphType),
    );
  }
  const errmsg = 'Get triples parameter error - you must specify a valid graph type (inference, instance, schema), and graph id';
  return Promise.reject(
    new Error(ErrorMessage.getInvalidParameterMessage(CONST.GET, errmsg)),
  );
};

/**
 * Replace the contents of the specified graph with the passed triples encoded
 * in the turtle (ttl) format
 * @param {string} graphType - type of graph  |instance|schema|inference|
 * @param {string} turtle - string encoding triples in turtle (ttl) format
 * @param {string} commitMsg - Textual message describing the reason for the update
 * @returns {Promise} A promise that returns the call response object, or an Error if rejected.
 * @example
 * client.updateTriples("schema", "alt", turtle_string, "dumping triples to graph alt")
 */
WOQLClient.prototype.updateTriples = function (graphType, turtle, commitMsg) {
  if (commitMsg && turtle && graphType) {
    const commit = this.generateCommitInfo(commitMsg);
    commit.turtle = turtle;
    return this.dispatch(
      CONST.UPDATE_TRIPLES,
      this.connectionConfig.triplesURL(graphType),
      commit,
    );
  }
  const errmsg = 'Update triples parameter error - you must specify a valid graph id, graph type, turtle contents and commit message';
  return Promise.reject(
    new Error(ErrorMessage.getInvalidParameterMessage(CONST.UPDATE_TRIPLES, errmsg)),
  );
};

/**
 * Appends the passed turtle to the contents of a graph
 * @param {string} graphType type of graph  |instance|schema|inference|
 * @param {string} turtle is a valid set of triples in turtle format (OWL)
 * @param {string} commitMsg Textual message describing the reason for the update
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 */
WOQLClient.prototype.insertTriples = function (graphType, turtle, commitMsg) {
  if (commitMsg && turtle && graphType) {
    const commit = this.generateCommitInfo(commitMsg);
    commit.turtle = turtle;
    return this.dispatch(
      CONST.INSERT_TRIPLES,
      this.connectionConfig.triplesURL(graphType),
      commit,
    );
  }
  const errmsg = 'Update triples parameter error - you must specify a valid graph id, graph type, turtle contents and commit message';
  return Promise.reject(
    new Error(ErrorMessage.getInvalidParameterMessage(CONST.INSERT_TRIPLES, errmsg)),
  );
};

/**
 *  Sends a message to the server
 * @param {string} message - textual string
 * @param {string} [pathname] - a server path to send the message to
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 */
WOQLClient.prototype.message = function (message, pathname) {
  let url = this.api();
  url += pathname ? this.api() + pathname : 'message';
  return this.dispatch(CONST.GET, url, message).then((response) => response);
};

/**
 * Sends an action to the server
 * @param {string} actionName - structure of the action
 * @param {object} [payload] - a request body call
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 */
WOQLClient.prototype.action = function (actionName, payload) {
  const url = `${this.api()}action/${actionName}`;
  return this.dispatch(CONST.ACTION, url, payload).then((response) => response);
};

/**
 * Gets TerminusDB Server Information
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 * @example
 * client.info()
 */
WOQLClient.prototype.info = function () {
  const url = `${this.api()}info`;
  return this.dispatch(CONST.GET, url).then((response) => response);
};

// Get Resource objects from WOQL query
function getResourceObjects(queryObject, result_array) {
  if (queryObject instanceof Array) {
    for (let i = 0; i < queryObject.length; i += 1) {
      getResourceObjects(queryObject[i], result_array);
    }
  } else {
    const keys = Object.keys(queryObject);

    for (let i = 0; i < keys.length; i += 1) {
      if (keys[i] === 'resource') {
        if (queryObject[keys[i]]['@type'] && queryObject[keys[i]]['@type'] === 'QueryResource') {
          result_array.push(queryObject[keys[i]]);
        }
      }
      if (queryObject[keys[i]] instanceof Object || queryObject[keys[i]] instanceof Array) {
        getResourceObjects(queryObject[keys[i]], result_array);
      }
    }
  }
}

/**
 * Executes a WOQL query on the specified database and returns the results
 * @param {WOQLQuery} woql - an instance of the WOQLQuery class
 * @param {string} [commitMsg] - a message describing the reason for the change that will
 * be written into the commit log (only relevant if the query contains an update)
 * @param {boolean} [allWitnesses]
 * @param {string} [lastDataVersion] the last data version tracking id.
 * @param {boolean} [getDataVersion] If true the function will return object having result
 * and dataVersion.
 * @returns {Promise}  A promise that returns the call response object or object having *result*
 * and *dataVersion* object if ***getDataVersion*** parameter is true, or an Error if rejected.
 * @example
 * const result = await client.query(WOQL.star())
 */
WOQLClient.prototype.query = function (woql, commitMsg, allWitnesses, lastDataVersion = '', getDataVersion = false) {
  allWitnesses = allWitnesses || false;

  commitMsg = commitMsg || 'Commit generated with javascript client without message';
  if (woql && woql.json && (!woql.containsUpdate() || commitMsg)) {
    const doql = woql.containsUpdate() ? this.generateCommitInfo(commitMsg) : {};
    doql.query = woql.json();

    let postBody;
    const resourceObjects = [];
    getResourceObjects(doql.query, resourceObjects);

    if (resourceObjects.length > 0) {
      const formData = new FormData();

      resourceObjects.forEach((resourceObject) => {
        const fileName = resourceObject.source.post.split('/').pop();

        formData.append('file', fs.createReadStream(resourceObject.source.post));
        resourceObject.source.post = fileName;
      });

      formData.append("payload", new Blob([JSON.stringify(doql)], { type: "application/json" }), "body.json");

      // formData.append('payload', Buffer.from(JSON.stringify(doql)), { filename: 'body.json', contentType: 'application/json' });
      this.customHeaders(formData.getHeaders ? formData.getHeaders() : { 'Content-Type': 'multipart/form-data' });

      postBody = formData;
    } else {
      postBody = doql;
    }

    if (allWitnesses) doql.all_witnesses = true;

    if (typeof lastDataVersion === 'string' && lastDataVersion !== '') {
      this.customHeaders({ 'TerminusDB-Data-Version': lastDataVersion });
    }

    // eslint-disable-next-line max-len
    return this.dispatch(CONST.WOQL_QUERY, this.connectionConfig.queryURL(), postBody, getDataVersion);
  }

  let errmsg = 'WOQL query parameter error';
  if (woql && woql.json && woql.containsUpdate() && !commitMsg) {
    errmsg += ' - you must include a textual commit message to perform this update';
  } else {
    errmsg += ' - you must specify a valid WOQL Query';
  }
  return Promise.reject(
    new Error(ErrorMessage.getInvalidParameterMessage(CONST.WOQL_QUERY, errmsg)),
  );
};

/**
 * Creates a new branch with a TerminusDB database, starting from the current context of
 * the client (branch / ref)
 * @param {string} newBranchId - local identifier of the new branch the ID of the new branch
 * to be created
 * @param {boolean} [isEmpty] - if isEmpty is true it will create a empty branch.
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 * @example
 * client.branch("dev")
 */
WOQLClient.prototype.branch = function (newBranchId, isEmpty) {
  if (newBranchId) {
    let source = this.ref()
      ? { origin: `${this.organization()}/${this.db()}/${this.repo()}/commit/${this.ref()}` }
      : {
        origin: `${this.organization()}/${this.db()}/${this.repo()}/branch/${this.checkout()}`,
      };

    if (isEmpty && isEmpty === true) {
      // @ts-ignore
      source = {};
    }
    return this.dispatch(CONST.BRANCH, this.connectionConfig.branchURL(newBranchId), source);
  }
  const errmsg = 'Branch parameter error - you must specify a valid new branch id';
  return Promise.reject(new Error(ErrorMessage.getInvalidParameterMessage(CONST.BRANCH, errmsg)));
};

/**
 * Squash branch commits
 * @param {string} branchId - local identifier of the new branch
 * @param {string} commitMsg - Textual message describing the reason for the update
 * @returns {Promise} A promise that returns the call response object, or an Error if rejected.
 */
WOQLClient.prototype.squashBranch = function (branchId, commitMsg) {
  if (commitMsg && branchId) {
    const commit = this.generateCommitInfo(commitMsg);
    return this.dispatch(
      CONST.SQUASH_BRANCH,
      this.connectionConfig.squashBranchURL(branchId),
      commit,
    );
  }
  const errmsg = 'Branch parameter error - you must specify a valid new branch id and a commit message';
  return Promise.reject(
    new Error(ErrorMessage.getInvalidParameterMessage(CONST.SQUASH_BRANCH, errmsg)),
  );
};

/**
 * Reset branch to a commit id, Reference ID or Commit ID are unique hashes that are
 * created whenever a new commit is recorded
 * @param {string} branchId - local identifier of the new branch
 * @param {string} commitId - Reference ID or Commit ID
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 */
WOQLClient.prototype.resetBranch = function (branchId, commitId) {
  if (commitId && branchId) {
    // eslint-disable-next-line camelcase
    return this.dispatch(
      CONST.RESET_BRANCH,
      this.connectionConfig.resetBranchUrl(branchId),
      { commit_descriptor: commitId },
    );
  }
  const errmsg = 'Branch parameter error - you must specify a valid new branch id and a commit message';
  return Promise.reject(
    new Error(ErrorMessage.getInvalidParameterMessage(CONST.RESET_BRANCH, errmsg)),
  );
};

/**
 * Optimize db branch
 * @param {string} branchId - local identifier of the new branch
 * @returns {Promise} A promise that returns the call response object, or an Error if rejected.
 */
WOQLClient.prototype.optimizeBranch = function (branchId) {
  if (branchId) {
    return this.dispatch(
      CONST.OPTIMIZE_SYSTEM,
      this.connectionConfig.optimizeBranchUrl(branchId),
      {},
    );
  }
  const errmsg = 'Branch parameter error - you must specify a valid branch id';
  return Promise.reject(new Error(ErrorMessage.getInvalidParameterMessage(CONST.BRANCH, errmsg)));
};

/**
 * Deletes a branch from database
 * @param {string} branchId - local identifier of the branch
 * @returns {Promise} A promise that returns the call response object, or an Error if rejected.
 */
WOQLClient.prototype.deleteBranch = function (branchId) {
  if (branchId) {
    return this.dispatch(CONST.DELETE, this.connectionConfig.branchURL(branchId));
  }
  const errmsg = 'Branch parameter error - you must specify a valid new branch id';
  return Promise.reject(new Error(ErrorMessage.getInvalidParameterMessage(CONST.BRANCH, errmsg)));
};

/**
 * Pull changes from a branch on a remote database to a branch on a local database
 * @param {typedef.RemoteRepoDetails} remoteSourceRepo - an object describing the source of the pull
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 * @example
 * client.pull({remote: "origin", remote_branch: "main", message: "Pulling from remote"})
 */
WOQLClient.prototype.pull = function (remoteSourceRepo) {
  const rc_args = this.prepareRevisionControlArgs(remoteSourceRepo);
  if (rc_args && rc_args.remote && rc_args.remote_branch) {
    return this.dispatch(CONST.PULL, this.connectionConfig.pullURL(), rc_args);
  }
  const errmsg = 'Pull parameter error - you must specify a valid remote source and branch to pull from';
  return Promise.reject(new Error(ErrorMessage.getInvalidParameterMessage(CONST.PULL, errmsg)));
};

/**
 * Fetch updates to a remote database to a remote repository with the local database
 * @param {string} remoteId - if of the remote to fetch (eg: 'origin')
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 */
WOQLClient.prototype.fetch = function (remoteId) {
  return this.dispatch(CONST.FETCH, this.connectionConfig.fetchURL(remoteId));
};

/**
 * Push changes from a branch on a local database to a branch on a remote database
 * @param {typedef.RemoteRepoDetails} remoteTargetRepo - an object describing the target of the push
 * {remote: "origin", "remote_branch": "main", "author": "admin", "message": "message"}
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 * @example
 * client.push({remote: "origin", remote_branch: "main", message: "Pulling from remote"})
 */
WOQLClient.prototype.push = function (remoteTargetRepo) {
  const rc_args = this.prepareRevisionControlArgs(remoteTargetRepo);
  if (rc_args && rc_args.remote && rc_args.remote_branch) {
    return this.dispatch(CONST.PUSH, this.connectionConfig.pushURL(), rc_args);
  }
  const errmsg = 'Push parameter error - you must specify a valid remote target';
  return Promise.reject(new Error(ErrorMessage.getInvalidParameterMessage(CONST.PUSH, errmsg)));
};

/**
 * Merges the passed branch into the current one using the rebase operation
 * @param {object} rebaseSource - json describing the source branch to be used as a base
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 * @example
 * //from the branch head
 * client.rebase({rebase_from: "admin/db_name/local/branch/branch_name", message:
 * "Merging from dev")
 * //or from a commit id
 * client.rebase({rebase_from: "admin/db_name/local/commit/9w8hk3y6rb8tjdy961de3i536ntkqd8",
 * message: "Merging from dev")
 */
WOQLClient.prototype.rebase = function (rebaseSource) {
  const rc_args = this.prepareRevisionControlArgs(rebaseSource);
  if (rc_args && rc_args.rebase_from) {
    return this.dispatch(CONST.REBASE, this.connectionConfig.rebaseURL(), rc_args);
  }
  const errmsg = 'Rebase parameter error - you must specify a valid rebase source to rebase from';
  return Promise.reject(
    new Error(ErrorMessage.getInvalidParameterMessage(CONST.REBASE, errmsg)),
  );
};

/**
 * Reset the current branch HEAD to the specified commit path
 * @param {string} commitPath - The commit path to set the current branch to
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 */
WOQLClient.prototype.reset = function (commitPath) {
  return this.dispatch(CONST.RESET, this.connectionConfig.resetURL(), {
    commit_descriptor: commitPath,
  });
};

/**
 * Clones a remote repo and creates a local copy
 * @param {typedef.CloneSourceDetails} cloneSource - object describing the source branch
 * to be used as a base
 * @param {string} newDbId - id of the new cloned database on the local server
 * @param {string} [orgId] - id of the local organization that the new cloned database
 * will be created in (in desktop mode this is always “admin”)
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 * @example
 * client.clonedb({remote_url: "https://my.terminusdb.com/myorg/mydb", label "Cloned DB", comment: "Cloned from mydb"}, newid: "mydb")
 */
WOQLClient.prototype.clonedb = function (cloneSource, newDbId, orgId) {
  orgId = orgId || this.user_organization();
  this.organization(orgId);
  const rc_args = this.prepareRevisionControlArgs(cloneSource);
  if (newDbId && rc_args && rc_args.remote_url) {
    return this.dispatch(CONST.CLONE, this.connectionConfig.cloneURL(newDbId), rc_args);
  }
  const errmsg = 'Clone parameter error - you must specify a valid id for the cloned database';
  return Promise.reject(new Error(ErrorMessage.getInvalidParameterMessage(CONST.BRANCH, errmsg)));
};

/**
 * Common request dispatch function
 * @property {string} action - the action name
 * @property {string} apiUrl - the server call endpoint
 * @property {object} [payload] - the post body
 * @property {boolean} [getDataVersion] - If true return response with data version
 * @property {boolean} [compress] - If true, compress the data if it is bigger than 1024 bytes
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 */
WOQLClient.prototype.dispatch = function (
  action,
  apiUrl,
  payload,
  getDataVersion,
  compress = false,
) {
  if (!apiUrl) {
    return Promise.reject(
      new Error(
        ErrorMessage.getInvalidParameterMessage(
          action,
          this.connectionConfig.connection_error,
        ),
      ),
    );
  }
  // I have to review this I don't want a call everytime
  /* if(this.connectionConfig.tokenParameter){
        const param = this.connectionConfig.tokenParameter
        axios.post(param.url,param.options).then(result=>result.data).then(data=>{
            if(data.access_token){
                console.log("ACCESS_TOKEN",data.access_token)
                this.localAuth({"key":data.access_token,"type":"jwt"})
            }
            return DispatchRequest(
                apiUrl,
                action,
                payload,
                this.localAuth(),
                this.remoteAuth(),
                this.customHeaders(),
            )
        })
    }else{ */
  return DispatchRequest(
    apiUrl,
    action,
    payload,
    this.localAuth(),
    this.remoteAuth(),
    this.customHeaders(),
    getDataVersion,
    compress,
  );
  // }
};

/**
 * Generates the json structure for commit messages
 * @param {string} msg - textual string describing reason for the change
 * @param {string} [author] - optional author id string - if absent current user id will be used
 * @returns {object}
 */
WOQLClient.prototype.generateCommitInfo = function (msg, author) {
  if (!author) {
    author = this.author();
  }
  const commitInfo = { commit_info: { author, message: msg } };
  return commitInfo;
};

/**
 * Generates the json structure for commit descriptor
 * @param {string} commitId - a valid commit id o
 */
WOQLClient.prototype.generateCommitDescriptor = function (commitId) {
  const cd = this.connectionConfig.commitDescriptorUrl(commitId);
  const ci = { commit_descriptor: cd };
  return ci;
};

/**
 * Adds an author string (from the user object returned by connect) to the commit message.
 * @param {object} [rc_args]
 * @returns {object | boolean}
 */
WOQLClient.prototype.prepareRevisionControlArgs = function (rc_args) {
  if (!rc_args || typeof rc_args !== 'object') return false;
  if (!rc_args.author) rc_args.author = this.author();
  return rc_args;
};

/**
 * to add a new document or a list of new documents into the instance or the schema graph.
 * @param {object} json
 * @param {typedef.DocParamsPost} [params] - the post parameters {@link #typedef.DocParamsPost}
 * @param {string} [dbId] - the dbid
 * @param {message} [string] - the insert commit message
 * @param {string} [lastDataVersion] the last data version tracking id.
 * @param {boolean} [getDataVersion] If true the function will return object having result
 * and dataVersion.
 * @returns {Promise}  A promise that returns the call response object or object having *result*
 * and *dataVersion* object if ***getDataVersion*** parameter is true, or an Error if rejected.
 * @example
 * const json = [{ "@type" : "Class",
 *              "@id" : "Coordinate",
 *              "@key" : { '@type' : 'Hash',
 *              '@fields' : ['x','y'] },
 *              "x" : "xsd:decimal",
 *              "y" : "xsd:decimal" },
 *              { "@type" : "Class",
 *              "@id" : "Country",
 *              "@key" : { '@type' : 'Lexical',
 *                          '@fields' : [name] },
 *              "name" : "xsd:string",
 *              "perimeter" : { "@type" : "List",
 *                              "@class" : "Coordinate" } }]
 * client.addDocument(json,{"graph_type":"schema"},"mydb","add new schema documents")
 *
 * //if we would like to override the entire schema
 * const json = [
 * {"@base": "terminusdb:///data/",
 *       "@schema": "terminusdb:///schema#",
 *       "@type": "@context"
 *   },
 *   {
 *       "@id": "Person",
 *        "@key": {
 *           "@type": "Random"
 *       },
 *       "@type": "Class",
 *       "name": {
 *           "@class": "xsd:string",
 *           "@type": "Optional"
 *       }
 *   }]
 *
 * // client.addDocument(json,{"graph_type":"schema","full_replace:true"},
      "mydb","update the all schema");
 *
 * // Here we will pass true to show how to get dataVersion
 *
 * const response = await client.addDocument(json, {"graph_type": "schema"},
 *   "mydb",
 *   "add new schema", '',
 *   true
 * )
 * console.log(response);
 *
 *  // This will output:
 *  // {
 *  //   result: [ ...... ],
 *  //   dataVersion: 'branch:5fs681tlycnn6jh0ceiqcq4qs89pdfs'
 *  // }
 *
 *  // Now we can use the data version we recieved as a response in previous
 *  // function call and used it is next function call as lastDataVersion
 *
 * const response1 = await client.addDocument(json, {"graph_type": "schema"},
 *   "mydb",
 *   "add new schema", response.dataVersion,
 * )
 */
WOQLClient.prototype.addDocument = function (json, params, dbId, message = 'add a new document', lastDataVersion = '', getDataVersion = false, compress = false) {
  if (dbId) {
    this.db(dbId);
  }

  if (typeof lastDataVersion === 'string' && lastDataVersion !== '') {
    this.customHeaders({ 'TerminusDB-Data-Version': lastDataVersion });
  }
  const docParams = params || {};
  docParams.author = this.author();
  docParams.message = message;
  return this.dispatch(
    CONST.POST,
    this.connectionConfig.documentURL(docParams),
    json,
    getDataVersion,
    compress,
  );
};

/**
 * Use {@link #getDocument} instead.
 * @deprecated
 *
 * Retrieves all documents that match a given document template
 * @param {object} query - the query template
 * @param {typedef.DocParamsGet} [params] - the get parameters
 * @param {string} [dbId] - the database id
 * @param {string} [branch] - the database branch
 * @param {string} [lastDataVersion] the last data version tracking id.
 * @param {boolean} [getDataVersion] If true the function will return object having result
 * and dataVersion.
 * @returns {Promise}  A promise that returns the call response object or object having *result*
 * and *dataVersion* object if ***getDataVersion*** parameter is true, or an Error if rejected.
 * @example
 * const query = {
 *   "type": "Person",
 *   "query": { "age": 42 },
 *  }
 * client.queryDocument(query, {"as_list":true})
 *
 *
 * // Here we will pass true to show how to get dataVersion
 * const query = {
 *   "type": "Person",
 *   "query": { "age": 42 },
 *  }
 *
 * const response = await client.queryDocument(query, {"as_list": true}, '', '','',true);
 * console.log(response);
 *
 *  // This will output:
 *  // {
 *  //   result: [
 *  //     {
 *  //       '@id': 'Person/052d60ffbd114bf5e7331b03f07fcb7',
 *  //       '@type': 'Person',
 *  //       age: 42,
 *  //       name: 'John',
 *  //     },
 *  //   ],
 *  //   dataVersion: 'branch:5fs681tlycnn6jh0ceiqcq4qs89pdfs'
 *  // }
 *
 *  // Now we can use the data version we recieved as a response in previous
 *  // query and used it is next query as lastDataVersion
 *  const query = {
 *   "type": "Person",
 *   "query": { "age": 18 },
 *  }
 *
 *  const response1 = await client.queryDocument(query, {"as_list": true}, '',
 *    '',
 *    response.dataVersion
 *  );
 */
WOQLClient.prototype.queryDocument = function (query, params, dbId, branch, lastDataVersion = '', getDataVersion = false) {
  if (dbId) {
    this.db(dbId);
  }
  if (branch) {
    this.checkout(branch);
  }
  if (typeof lastDataVersion === 'string' && lastDataVersion !== '') {
    this.customHeaders({ 'TerminusDB-Data-Version': lastDataVersion });
  }

  return this.dispatch(
    CONST.QUERY_DOCUMENT,
    this.connectionConfig.documentURL(params),
    query,
    getDataVersion,
  );
};

/**
 *
 * @param {typedef.DocParamsGet} [params] - the get parameters,
 * you can pass document query search template with the params
 * @param {string} [dbId] - the database id
 * @param {string} [branch] - the database branch
 * @param {string} [lastDataVersion] the last data version tracking id.
 * @param {boolean} [getDataVersion] If true the function will return object having result
 * and dataVersion.
 * @param {object} [query] document query search template
 * @returns {Promise}  A promise that returns the call response object or object having *result*
 * and *dataVersion* object if ***getDataVersion*** parameter is true, or an Error if rejected.
 * @example
 * //return the schema graph as a json array
 * client.getDocument({"graph_type":"schema","as_list":true}).then(result={
 *    console.log(result)
 * })
 *
 * //retutn the Country class document from the schema graph
 * client.getDocument({"graph_type":"schema","as_list":true,"id":"Country"}).then(result={
 *    console.log(result)
 * })
 *
 * //pass a document query template to query the document interface
 * const queryTemplate = { "name": "Ireland"}
 * client.getDocument({"as_list":true, "@type":"Country"
 *            query:queryTemplate}).then(result=>{
 *    console.log(result)
 * })
 *
 *
 * // Here we will pass true to show how to get dataVersion
 * const response = await client.getDocument({"graph_type":"schema","as_list":true},
 *   "",
 *   "",
 *   "",
 *   true
 * )
 * console.log(response);
 *
 *  // This will output:
 *  // {
 *  //   result: [ ...... ],
 *  //   dataVersion: 'branch:5fs681tlycnn6jh0ceiqcq4qs89pdfs'
 *  // }
 *
 *  // Now we can use the data version we recieved as a response in previous
 *  // function call and used it is next function call as lastDataVersion
 *
 * const response1 = await client.getDocument({"graph_type":"schema","as_list":true},
 *   "",
 *   "",
 *   response.dataVersion,
 * )
 */
// document interface
WOQLClient.prototype.getDocument = function (params, dbId, branch, lastDataVersion = '', getDataVersion = false, query = undefined) {
  if (dbId) {
    this.db(dbId);
  }
  if (branch) {
    this.checkout(branch);
  }
  if (typeof lastDataVersion === 'string' && lastDataVersion !== '') {
    this.customHeaders({ 'TerminusDB-Data-Version': lastDataVersion });
  }
  let queryDoc;
  if (query) {
    queryDoc = query;
  } else if (params && typeof params === 'object' && params.query) {
    queryDoc = { query: params.query };
    delete params.query;
  }
  // if query we are send a get with a payload

  if (queryDoc) {
    return this.dispatch(
      CONST.QUERY_DOCUMENT,
      this.connectionConfig.documentURL(params),
      queryDoc,
      getDataVersion,
    );
  }

  return this.dispatch(CONST.GET, this.connectionConfig.documentURL(params), {}, getDataVersion);
};

/**
 *
 * @param {object} json
 * @param {typedef.DocParamsPut} [params] - the Put parameters {@link #typedef.DocParamsPut}
 * @param {*} [dbId] - the database id
 * @param {*} [message] - the update commit message
 * @param {string} [lastDataVersion] the last data version tracking id.
 * @param {boolean} [getDataVersion] If true the function will return object having result
 * and dataVersion.
 * @param {boolean} [compress] If true, the function will create a new document if it doesn't exist.
 * @param {boolean} [create] Perform an *upsert* which inserts if the document
 * is not present (also works on nested documents)
 * @returns {Promise}  A promise that returns the call response object or object having *result*
 * and *dataVersion* object if ***getDataVersion*** parameter is true, or an Error if rejected.
 * @example
 * client.updateDocument(
 * {
 *  "@id": "Person",
 *    "@key": {
 *      "@type": "Random",
 *    },
 *    "@type": "Class",
 *    label: "xsd:string",
 *  },
 * { graph_type: "schema" }
 * );
 *
 *
 * // Here we will pass true to show how to get dataVersion
 *
    const response = await client.updateDocument(
      {
        "@id": "Person",
        "@key": {
          "@type": "Random",
        },
        "@type": "Class",
        label: "xsd:string",
      },
      { graph_type: "schema" },
      "",
      "",
      "",
      true
    );
 * console.log(response);
 *
 *  // This will output:
 *  // {
 *  //   result: [ ...... ],
 *  //   dataVersion: 'branch:5fs681tlycnn6jh0ceiqcq4qs89pdfs'
 *  // }
 *
 *  // Now we can use the data version we recieved as a response in previous
 *  // function call and used it is next function call as lastDataVersion
 *
 * const response1 = await client.updateDocument(
      {
        "@id": "Person",
        "@key": {
          "@type": "Random",
        },
        "@type": "Class",
        label: "xsd:string",
      },
      { graph_type: "schema" },
      "",
      "",
      response.dataVersion
    );
 *
 *  // update a document and create the linked document together
 *  // we are update the document "Person/Person01"
 *  // and create a new document {"@type": "Person","name": "child01"} at the same time
 *  const response1 = await client.updateDocument(
     {
      "@id": "Person/Person01",
      "@type": "Person",
      "name": "Person01"
      "children":[{"@type": "Person","name": "child01"}]
    },{create:true})
 */
WOQLClient.prototype.updateDocument = function (json, params, dbId, message = 'update document', lastDataVersion = '', getDataVersion = false, compress = false, create = false) {
  const docParams = params || {};
  docParams.author = this.author();
  docParams.message = message;
  if (create) {
    docParams.create = create;
  }
  if (dbId) {
    this.db(dbId);
  }
  if (typeof lastDataVersion === 'string' && lastDataVersion !== '') {
    this.customHeaders({ 'TerminusDB-Data-Version': lastDataVersion });
  }
  return this.dispatch(
    CONST.PUT,
    this.connectionConfig.documentURL(docParams),
    json,
    getDataVersion,
    compress,
  );
};

/**
 * to delete the document
 * @param {typedef.DocParamsDelete} [params]
 * @param {string} [dbId] - the database id
 * @param {string} [message] - the delete message
 * @param {string} [lastDataVersion] the last data version tracking id.
 * @param {boolean} [getDataVersion] If true the function will return object having result
 * and dataVersion.
 * @returns {Promise}  A promise that returns the call response object or object having *result*
 * and *dataVersion* object if ***getDataVersion*** parameter is true, or an Error if rejected.
 * @example
 * client.deleteDocument({"graph_type":"schema",id:['Country','Coordinate']})
 *
 *
 * // Here we will pass true to show how to get dataVersion
 *
 * const response = await client.deleteDocument({"graph_type":"schema",id:['Country','Coordinate']},
 *   "",
 *   "",
 *   "",
 *   true
 * )
 * console.log(response);
 *
 *  // This will output:
 *  // {
 *  //   result: [ ...... ],
 *  //   dataVersion: 'branch:5fs681tlycnn6jh0ceiqcq4qs89pdfs'
 *  // }
 *
 *  // Now we can use the data version we recieved as a response in previous
 *  // function call and used it is next function call as lastDataVersion
 *
 * const response1 = await client.deleteDocument({"graph_type":"schema",
 *   id:['Country','Coordinate']},
 *   "",
 *   "",
 *   response.dataVersion,
 * )
 */
WOQLClient.prototype.deleteDocument = function (params, dbId, message = 'delete document', lastDataVersion = '', getDataVersion = false) {
  const docParams = params || {};
  let payload = null;
  if (Array.isArray(params.id)) {
    payload = params.id;
    delete docParams.id;
  }
  docParams.author = this.author();
  docParams.message = message;
  if (dbId) {
    this.db(dbId);
  }
  if (typeof lastDataVersion === 'string' && lastDataVersion !== '') {
    this.customHeaders({ 'TerminusDB-Data-Version': lastDataVersion });
  }
  return this.dispatch(
    CONST.DELETE,
    this.connectionConfig.documentURL(docParams),
    payload,
    getDataVersion,
  );
};
/**
 * The purpose of this method is to quickly discover the supported fields of a particular type.
 * @param {string} [type] - If given, the type to get information for. If omitted, information
 * for all types is returned
 * @param {string} [dbId] - the database id
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 * @example
 * client.getSchemaFrame("Country")
 */
WOQLClient.prototype.getSchemaFrame = function (type, dbId) {
  let params;
  if (type) params = { type };
  if (dbId) {
    this.db(dbId);
  }
  return this.dispatch(CONST.GET, this.connectionConfig.jsonSchemaURL(params));
};

/**
 * get the database schema in json format
 * @param {string} [dbId] - the database id
 * @param {string} [branch] -  specific a branch/collection
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 * @example
 * client.getSchema()
 */
WOQLClient.prototype.getSchema = function (dbId, branch) {
  const params = { graph_type: 'schema', as_list: true };
  return this.getDocument(params, dbId, branch);
};

/**
 * get all the schema classes (documents,subdocuments,abstracts)
 * @param {string} [dbId] - the database id
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 * @example
 * client.getClasses()
 */

WOQLClient.prototype.getClasses = function (dbId) {
  const params = { graph_type: 'schema', as_list: true, type: 'sys:Class' };
  return this.getDocument(params, dbId);
};

/**
 * get all the Enum Objects
 * @param {string} [dbId]
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 * @example
 * client.getEnums()
 */
WOQLClient.prototype.getEnums = function (dbId) {
  const params = { graph_type: 'schema', as_list: true, type: 'sys:Enum' };
  return this.getDocument(params, dbId);
};

/**
 * get all the Document Classes (no abstract or subdocument)
 * @param {string} [dbId]
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 * @example
 * client.getClassDocuments()
 */
WOQLClient.prototype.getClassDocuments = function (dbId) {
  const params = { graph_type: 'schema', as_list: true, type: 'sys:Class' };
  return this.getDocument(params, dbId).then((result) => {
    let documents = [];
    if (result) {
      documents = result.filter((item) => !item['@subdocument'] && !item['@abstract']);
    }
    return documents;
  });
};

/**
 * get the database collections list
 * @param {string} [dbId] - the database id
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 * @example
 * client.getBranches()
 */
WOQLClient.prototype.getBranches = function (dbId) {
  const params = { type: 'Branch', as_list: true };
  const branch = this.checkout();
  return this.getDocument(params, dbId, '_commits').then((result) => {
    const branchesObj = {};
    if (result) {
      result.forEach((item) => {
        branchesObj[item.name] = item;
      });
    }
    this.checkout(branch);
    return branchesObj;
  });
  // reset branch
};

/**
 * get the database collections list
 * @param {number} [start=0] - where to start printing the commit
 *    information in the log (starting from the head of the current branch)
 * @param {number} [count=1] - The number of total commit log records to return
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 * @example
 * client.getCommitsLog(count=10)
 */
WOQLClient.prototype.getCommitsLog = function (start = 0, count = 1) {
  return this.dispatch(
    CONST.GET,
    `${this.connectionConfig.log()}?start=${start}&count=${count}`,
  );
};

/**
 * get the database prefixes object
 * @param {string} [dbId] - the database id
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 * @example
 * client.getPrefixes()
 * //return object example
 * {
 * '@base': 'terminusdb:///data/',
 * '@schema': 'terminusdb:///schema#',
 * '@type': 'Context'}
 */
WOQLClient.prototype.getPrefixes = function (dbId) {
  if (dbId) this.db(dbId);
  return this.dispatch(
    CONST.GET,
    this.connectionConfig.prefixesURL(),
  );
};

/**
 * Get the list of the user's organizations and the database related
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 * @example
 * async funtion callGetUserOrganizations(){
 *      await getUserOrganizations()
 *      console.log(client.userOrganizations())
 * }
 */
WOQLClient.prototype.getUserOrganizations = function () {
  // this will be change to give back only the organizations list
  return this.dispatch(
    CONST.GET,
    this.connectionConfig.userOrganizationsURL(),
  ).then((response) => {
    const orgList = Array.isArray(response) ? response : [];
    this.userOrganizations(orgList);
    return orgList;
  });
};

/**
 * Get/Set the list of the user's organizations (id, organization, label, comment).
 * @param {array} [orgList] a list of user's Organization
 * @returns {array} the user Organizations list
 * @example
 * async funtion callGetUserOrganizations(){
 *      await client.getUserOrganizations()
 *      console.log(client.userOrganizations())
 * }
 */
WOQLClient.prototype.userOrganizations = function (orgList) {
  if (orgList) this.organizationList = orgList;
  return this.organizationList || [];
};

/**
 * Apply a patch object to another object
 * @param {object} before - The current state of JSON document
 * @param {object} patch - The patch object
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 * @example
 * client.patch(
 *      { "@id" : "Person/Jane", "@type" : "Person", "name" : "Jane"},
 *      { "name" : { "@op" : "ValueSwap", "@before" : "Jane", "@after": "Janine" }}
 *  ).then(patchResult=>{
 *  console.log(patchResult)
 * })
 * //result example
 * //{ "@id" : "Person/Jane", "@type" : "Person", "name" : "Jannet"}
 */
WOQLClient.prototype.patch = function (before, patch) {
  if (typeof before !== 'object' || typeof patch !== 'object') {
    const errmsg = '"before" or "after" parameter error - you must specify a valid before and after json document';

    return Promise.reject(
      new Error(ErrorMessage.getInvalidParameterMessage(CONST.PATCH, errmsg)),
    );
  }
  const payload = { before, patch };

  return this.dispatch(
    CONST.POST,
    `${this.connectionConfig.apiURL()}patch`,
    payload,
  ).then((response) => response);
};

/**
 * Apply a patch object to the current resource
 * @param {array} patch - The patch object
 * @param {string} message - The commit message
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 * @example
 * const patch = [
 *   {
 *    "@id": "Obj/id1",
 *     "name": {
 *      "@op": "SwapValue",
 *       "@before": "foo",
 *       "@after": "bar"
 *     }
 *   },
 *  {
 *    "@id": "Obj/id2",
 *     "name": {
 *       "@op": "SwapValue",
 *       "@before": "foo",
 *      "@after": "bar"
 *     }
 *  }
 * ]
 * client.db("mydb")
 * client.checkout("mybranch")
 * client.patchResource(patch,"apply patch to mybranch").then(patchResult=>{
 *  console.log(patchResult)
 * })
 * // result example
 * // ["Obj/id1",
 * // "Obj/id2"]
 * // or conflict error 409
 * // {
 * // "@type": "api:PatchError",
 * // "api:status": "api:conflict",
 * // "api:witnesses": [
 * //  {
 * //   "@op": "InsertConflict",
 * //    "@id_already_exists": "Person/Jane"
 * //  }
 * //]
 * //}
 */
WOQLClient.prototype.patchResource = function (patch, message) {
  if (!Array.isArray(patch)) {
    const errmsg = '"patch" parameter error - you must specify a valid patch document';

    return Promise.reject(
      new Error(ErrorMessage.getInvalidParameterMessage(CONST.PATCH, errmsg)),
    );
  }
  const payload = { patch, author: this.author(), message };

  return this.dispatch(
    CONST.POST,
    this.connectionConfig.patchURL(),
    payload,
  ).then((response) => response);
};

/**
 * Get the patch of difference between two documents.
 * @param {object} before - The current state of JSON document
 * @param {object} after - The updated state of JSON document
 * @param {object} [options] - {keep:{}} Options to send to the diff endpoint.
 * The diff api outputs the changes between the input,
 * in options you can list the properties that you would like to see in the diff result in any case.
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 * @example
 * client.getJSONDiff(
 *      { "@id": "Person/Jane", "@type": "Person", name: "Jane" },
 *      { "@id": "Person/Jane", "@type": "Person", name: "Janine" }
 *  ).then(diffResult=>{
 *  console.log(diffResult)
 * })
 * //result example
 * //{'@id': 'Person/Jane',
 * // name: { '@after': 'Janine', '@before': 'Jane', '@op': 'SwapValue' }}
 */
WOQLClient.prototype.getJSONDiff = function (before, after, options) {
  if (typeof before !== 'object' || typeof after !== 'object') {
    const errmsg = '"before" or "after" parameter error - you must specify a valid before or after json document';

    return Promise.reject(
      new Error(ErrorMessage.getInvalidParameterMessage(CONST.GET_DIFF, errmsg)),
    );
  }
  const opt = (typeof options === 'undefined') ? {} : options;
  const payload = { before, after, ...opt };

  return this.dispatch(
    CONST.POST,
    `${this.connectionConfig.apiURL()}diff`,
    payload,
  ).then((response) => response);
};

/**
 * Get the patch of difference between two documents.
 * @param {string} dataVersion - The version from which to compare the object
 * @param {object} jsonObject - The updated state of JSON document
 * @param {string} id - The document id to be diffed
 * @param {object} [options] - {keep:{}} Options to send to the diff endpoint
 * the diff api outputs the changes between the input,
 * but you can list the properties that you would like to see in the diff result in any case.
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 * @example
 * const jsonObj =  { "@id": "Person/Jane", "@type": "Person", name: "Janine" }
 * client.getVersionObjectDiff("main",jsonObj
 *      "Person/Jane").then(diffResp=>{
 *    console.log(diffResp)
 * })
 */
WOQLClient.prototype.getVersionObjectDiff = function (dataVersion, jsonObject, id, options) {
  if (typeof jsonObject !== 'object' || typeof dataVersion !== 'string' || typeof id !== 'string') {
    const errmsg = 'Parameters error - you must specify a valid jsonObject document, a valid branch or commit and a valid id';

    return Promise.reject(
      new Error(ErrorMessage.getInvalidParameterMessage(CONST.GET_DIFF, errmsg)),
    );
  }
  const opt = options || {};
  const payload = {
    after: jsonObject,
    before_data_version: dataVersion,
    id,
    ...opt,
  };
  return this.dispatch(
    CONST.POST,
    this.connectionConfig.diffURL(),
    payload,
  ).then((response) => response);
};

/**
 * Get the patch of difference between branches or commits.
 * @param {string} beforeVersion - Before branch/commit to compare
 * @param {string} afterVersion -  After branch/commit to compare
 * @param {string} [id] - The document id to be diffed,
 * if it is omitted all the documents will be compared
 * @param {typedef.DiffObject} [options] - {keep:{},count:10,start:0}
 * Options to send to the diff endpoint.
 * The diff api outputs the changes between the input (branches or commits),
 * in options you can list the properties that you would like to see in the diff result in any case.
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 * @example
 * //This is to view all the changes between two commits
 * const beforeCommit = "a73ssscfx0kke7z76083cgswszdxy6l"
 * const afterCommit = "73rqpooz65kbsheuno5dsayh71x7wf4"
 *
 * client.getVersionDiff( beforeCommit, afterCommit).then(diffResult=>{
 *  console.log(diffResult)
 * })
 *
 * //This is to view the changes between two commits but only for the given document
 * client.getVersionDiff( beforeCommit, afterCommit, "Person/Tom").then(diffResult=>{
 *  console.log(diffResult)
 * })
 *
 * //This is to view the changes between a branch (head) and a commit for the given document
 * client.getVersionDiff("main", afterCommit, "Person/Tom" ).then(diffResult=>{
 *    console.log(diffResult)
 * })
 *
 * //This is to view the changes between two branches with the keep options
 * const options = {"keep":{"@id":true, "name": true}, start:0, count:10}
 * client.getVersionDiff("main","mybranch",options).then(diffResult=>{
 *    console.log(diffResult)
 * })
 */
WOQLClient.prototype.getVersionDiff = function (beforeVersion, afterVersion, id, options) {
  if (typeof beforeVersion !== 'string' || typeof afterVersion !== 'string') {
    const errmsg = 'Error, you have to provide a beforeVersion and afterVersion input';

    return Promise.reject(
      new Error(ErrorMessage.getInvalidParameterMessage(CONST.GET_DIFF, errmsg)),
    );
  }
  const opt = options || {};
  const payload = {
    before_data_version: beforeVersion,
    after_data_version: afterVersion,
    ...opt,
  };
  if (id) {
    payload.document_id = id;
  }
  // console.log(this.connectionConfig.diffURL())
  return this.dispatch(
    CONST.POST,
    this.connectionConfig.diffURL(),
    payload,
  ).then((response) => response);
};

/**
 * Diff two different commits and apply changes on the current branch/commit.
 * If you would like to change branch or commit before apply use client.checkout("branchName")
 * @param {string} beforeVersion - Before branch/commit to compare
 * @param {string} afterVersion - After branch/commit to compare
 * @param {string} message - apply commit message
 * @param {boolean} [matchFinalState] - the default value is false
 * @param {object} [options] - {keep:{}} Options to send to the apply endpoint
 * @example
 * client.checkout("mybranch")
 * client.apply("mybranch","mybranch_new","merge main").then(result=>{
 *    console.log(result)
 * })
 */
// eslint-disable-next-line max-len
WOQLClient.prototype.apply = function (beforeVersion, afterVersion, message, matchFinalState, options) {
  const opt = options || {};
  const commitMsg = this.generateCommitInfo(message);
  const payload = {
    before_commit: beforeVersion,
    after_commit: afterVersion,
    ...commitMsg,
    ...opt,
  };
  if (matchFinalState) {
    payload.match_final_state = matchFinalState;
  }
  return this.dispatch(
    CONST.POST,
    this.connectionConfig.applyURL(),
    payload,
  ).then((response) => response);
};

/**
 * Get the document's history for a specific database or branch
 * @param {string} id - id of document to report history of
 * @param {typedef.DocHistoryParams} [historyParams]
 * @example
 * //this will return the last 5 commits for the Person/Anna document
 * client.checkout("mybranch")
 * client.docHistory("Person/Anna",{start:0,count:5}).then(result=>{
 *    console.log(result)
 * })
 * //this will return the last and the first commit for the Person/Anna document
 * client.docHistory("Person/Anna",{updated:true,created:true}).then(result=>{
 *    console.log(result)
 * })
 */
// eslint-disable-next-line max-len
WOQLClient.prototype.getDocumentHistory = function (id, historyParams) {
  const params = historyParams || {};
  params.id = id;
  return this.dispatch(
    CONST.GET,
    this.connectionConfig.docHistoryURL(params),
  ).then((response) => response);
};

/**
 * Call a custom Api endpoit
 * @param {string} requestType - The current state of JSON document
 * @param {string} customRequestURL - The patch object
 * @param {object} [payload] - the request payload
 * @returns {Promise}  A promise that returns the call response object, or an Error if rejected.
 * @example
 * client.sendCustomRequest("GET", "http://localhost:3030/changes/").then(result=>{
 *    console.log(result)
 * })
 */
WOQLClient.prototype.sendCustomRequest = function (requestType, customRequestURL, payload) {
  return this.dispatch(
    requestType,
    customRequestURL,
    payload,
  ).then((response) => response);
};

module.exports = WOQLClient;


/***/ }),

/***/ 3764:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

module.exports =
{
  parallel      : __nccwpck_require__(5902),
  serial        : __nccwpck_require__(9781),
  serialOrdered : __nccwpck_require__(7889)
};


/***/ }),

/***/ 6192:
/***/ ((module) => {

// API
module.exports = abort;

/**
 * Aborts leftover active jobs
 *
 * @param {object} state - current state object
 */
function abort(state)
{
  Object.keys(state.jobs).forEach(clean.bind(state));

  // reset leftover jobs
  state.jobs = {};
}

/**
 * Cleans up leftover job by invoking abort function for the provided job id
 *
 * @this  state
 * @param {string|number} key - job id to abort
 */
function clean(key)
{
  if (typeof this.jobs[key] == 'function')
  {
    this.jobs[key]();
  }
}


/***/ }),

/***/ 3578:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var defer = __nccwpck_require__(9236);

// API
module.exports = async;

/**
 * Runs provided callback asynchronously
 * even if callback itself is not
 *
 * @param   {function} callback - callback to invoke
 * @returns {function} - augmented callback
 */
function async(callback)
{
  var isAsync = false;

  // check if async happened
  defer(function() { isAsync = true; });

  return function async_callback(err, result)
  {
    if (isAsync)
    {
      callback(err, result);
    }
    else
    {
      defer(function nextTick_callback()
      {
        callback(err, result);
      });
    }
  };
}


/***/ }),

/***/ 9236:
/***/ ((module) => {

module.exports = defer;

/**
 * Runs provided function on next iteration of the event loop
 *
 * @param {function} fn - function to run
 */
function defer(fn)
{
  var nextTick = typeof setImmediate == 'function'
    ? setImmediate
    : (
      typeof process == 'object' && typeof process.nextTick == 'function'
      ? process.nextTick
      : null
    );

  if (nextTick)
  {
    nextTick(fn);
  }
  else
  {
    setTimeout(fn, 0);
  }
}


/***/ }),

/***/ 1225:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var async = __nccwpck_require__(3578)
  , abort = __nccwpck_require__(6192)
  ;

// API
module.exports = iterate;

/**
 * Iterates over each job object
 *
 * @param {array|object} list - array or object (named list) to iterate over
 * @param {function} iterator - iterator to run
 * @param {object} state - current job status
 * @param {function} callback - invoked when all elements processed
 */
function iterate(list, iterator, state, callback)
{
  // store current index
  var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;

  state.jobs[key] = runJob(iterator, key, list[key], function(error, output)
  {
    // don't repeat yourself
    // skip secondary callbacks
    if (!(key in state.jobs))
    {
      return;
    }

    // clean up jobs
    delete state.jobs[key];

    if (error)
    {
      // don't process rest of the results
      // stop still active jobs
      // and reset the list
      abort(state);
    }
    else
    {
      state.results[key] = output;
    }

    // return salvaged results
    callback(error, state.results);
  });
}

/**
 * Runs iterator over provided job element
 *
 * @param   {function} iterator - iterator to invoke
 * @param   {string|number} key - key/index of the element in the list of jobs
 * @param   {mixed} item - job description
 * @param   {function} callback - invoked after iterator is done with the job
 * @returns {function|mixed} - job abort function or something else
 */
function runJob(iterator, key, item, callback)
{
  var aborter;

  // allow shortcut if iterator expects only two arguments
  if (iterator.length == 2)
  {
    aborter = iterator(item, async(callback));
  }
  // otherwise go with full three arguments
  else
  {
    aborter = iterator(item, key, async(callback));
  }

  return aborter;
}


/***/ }),

/***/ 3787:
/***/ ((module) => {

// API
module.exports = state;

/**
 * Creates initial state object
 * for iteration over list
 *
 * @param   {array|object} list - list to iterate over
 * @param   {function|null} sortMethod - function to use for keys sort,
 *                                     or `null` to keep them as is
 * @returns {object} - initial state object
 */
function state(list, sortMethod)
{
  var isNamedList = !Array.isArray(list)
    , initState =
    {
      index    : 0,
      keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
      jobs     : {},
      results  : isNamedList ? {} : [],
      size     : isNamedList ? Object.keys(list).length : list.length
    }
    ;

  if (sortMethod)
  {
    // sort array keys based on it's values
    // sort object's keys just on own merit
    initState.keyedList.sort(isNamedList ? sortMethod : function(a, b)
    {
      return sortMethod(list[a], list[b]);
    });
  }

  return initState;
}


/***/ }),

/***/ 9069:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var abort = __nccwpck_require__(6192)
  , async = __nccwpck_require__(3578)
  ;

// API
module.exports = terminator;

/**
 * Terminates jobs in the attached state context
 *
 * @this  AsyncKitState#
 * @param {function} callback - final callback to invoke after termination
 */
function terminator(callback)
{
  if (!Object.keys(this.jobs).length)
  {
    return;
  }

  // fast forward iteration index
  this.index = this.size;

  // abort jobs
  abort(this);

  // send back results we have so far
  async(callback)(null, this.results);
}


/***/ }),

/***/ 5902:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var iterate    = __nccwpck_require__(1225)
  , initState  = __nccwpck_require__(3787)
  , terminator = __nccwpck_require__(9069)
  ;

// Public API
module.exports = parallel;

/**
 * Runs iterator over provided array elements in parallel
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */
function parallel(list, iterator, callback)
{
  var state = initState(list);

  while (state.index < (state['keyedList'] || list).length)
  {
    iterate(list, iterator, state, function(error, result)
    {
      if (error)
      {
        callback(error, result);
        return;
      }

      // looks like it's the last one
      if (Object.keys(state.jobs).length === 0)
      {
        callback(null, state.results);
        return;
      }
    });

    state.index++;
  }

  return terminator.bind(state, callback);
}


/***/ }),

/***/ 9781:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var serialOrdered = __nccwpck_require__(7889);

// Public API
module.exports = serial;

/**
 * Runs iterator over provided array elements in series
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */
function serial(list, iterator, callback)
{
  return serialOrdered(list, iterator, null, callback);
}


/***/ }),

/***/ 7889:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var iterate    = __nccwpck_require__(1225)
  , initState  = __nccwpck_require__(3787)
  , terminator = __nccwpck_require__(9069)
  ;

// Public API
module.exports = serialOrdered;
// sorting helpers
module.exports.ascending  = ascending;
module.exports.descending = descending;

/**
 * Runs iterator over provided sorted array elements in series
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} sortMethod - custom sort function
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */
function serialOrdered(list, iterator, sortMethod, callback)
{
  var state = initState(list, sortMethod);

  iterate(list, iterator, state, function iteratorHandler(error, result)
  {
    if (error)
    {
      callback(error, result);
      return;
    }

    state.index++;

    // are we there yet?
    if (state.index < (state['keyedList'] || list).length)
    {
      iterate(list, iterator, state, iteratorHandler);
      return;
    }

    // done here
    callback(null, state.results);
  });

  return terminator.bind(state, callback);
}

/*
 * -- Sort methods
 */

/**
 * sort helper to sort array elements in ascending order
 *
 * @param   {mixed} a - an item to compare
 * @param   {mixed} b - an item to compare
 * @returns {number} - comparison result
 */
function ascending(a, b)
{
  return a < b ? -1 : a > b ? 1 : 0;
}

/**
 * sort helper to sort array elements in descending order
 *
 * @param   {mixed} a - an item to compare
 * @param   {mixed} b - an item to compare
 * @returns {number} - comparison result
 */
function descending(a, b)
{
  return -1 * ascending(a, b);
}


/***/ }),

/***/ 3115:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

module.exports = __nccwpck_require__(4329);

/***/ }),

/***/ 9776:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(4204);
var settle = __nccwpck_require__(3967);
var buildFullPath = __nccwpck_require__(4736);
var buildURL = __nccwpck_require__(5461);
var http = __nccwpck_require__(3685);
var https = __nccwpck_require__(5687);
var httpFollow = (__nccwpck_require__(7911).http);
var httpsFollow = (__nccwpck_require__(7911).https);
var url = __nccwpck_require__(7310);
var zlib = __nccwpck_require__(9796);
var VERSION = (__nccwpck_require__(7716).version);
var createError = __nccwpck_require__(7935);
var enhanceError = __nccwpck_require__(9959);
var defaults = __nccwpck_require__(1181);
var Cancel = __nccwpck_require__(7250);

var isHttps = /https:?/;

/**
 *
 * @param {http.ClientRequestArgs} options
 * @param {AxiosProxyConfig} proxy
 * @param {string} location
 */
function setProxy(options, proxy, location) {
  options.hostname = proxy.host;
  options.host = proxy.host;
  options.port = proxy.port;
  options.path = location;

  // Basic proxy authorization
  if (proxy.auth) {
    var base64 = Buffer.from(proxy.auth.username + ':' + proxy.auth.password, 'utf8').toString('base64');
    options.headers['Proxy-Authorization'] = 'Basic ' + base64;
  }

  // If a proxy is used, any redirects must also pass through the proxy
  options.beforeRedirect = function beforeRedirect(redirection) {
    redirection.headers.host = redirection.host;
    setProxy(redirection, proxy, redirection.href);
  };
}

/*eslint consistent-return:0*/
module.exports = function httpAdapter(config) {
  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {
    var onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }
    var resolve = function resolve(value) {
      done();
      resolvePromise(value);
    };
    var rejected = false;
    var reject = function reject(value) {
      done();
      rejected = true;
      rejectPromise(value);
    };
    var data = config.data;
    var headers = config.headers;
    var headerNames = {};

    Object.keys(headers).forEach(function storeLowerName(name) {
      headerNames[name.toLowerCase()] = name;
    });

    // Set User-Agent (required by some servers)
    // See https://github.com/axios/axios/issues/69
    if ('user-agent' in headerNames) {
      // User-Agent is specified; handle case where no UA header is desired
      if (!headers[headerNames['user-agent']]) {
        delete headers[headerNames['user-agent']];
      }
      // Otherwise, use specified value
    } else {
      // Only set header if it hasn't been set in config
      headers['User-Agent'] = 'axios/' + VERSION;
    }

    if (data && !utils.isStream(data)) {
      if (Buffer.isBuffer(data)) {
        // Nothing to do...
      } else if (utils.isArrayBuffer(data)) {
        data = Buffer.from(new Uint8Array(data));
      } else if (utils.isString(data)) {
        data = Buffer.from(data, 'utf-8');
      } else {
        return reject(createError(
          'Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream',
          config
        ));
      }

      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {
        return reject(createError('Request body larger than maxBodyLength limit', config));
      }

      // Add Content-Length header if data exists
      if (!headerNames['content-length']) {
        headers['Content-Length'] = data.length;
      }
    }

    // HTTP basic authentication
    var auth = undefined;
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      auth = username + ':' + password;
    }

    // Parse url
    var fullPath = buildFullPath(config.baseURL, config.url);
    var parsed = url.parse(fullPath);
    var protocol = parsed.protocol || 'http:';

    if (!auth && parsed.auth) {
      var urlAuth = parsed.auth.split(':');
      var urlUsername = urlAuth[0] || '';
      var urlPassword = urlAuth[1] || '';
      auth = urlUsername + ':' + urlPassword;
    }

    if (auth && headerNames.authorization) {
      delete headers[headerNames.authorization];
    }

    var isHttpsRequest = isHttps.test(protocol);
    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;

    var options = {
      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\?/, ''),
      method: config.method.toUpperCase(),
      headers: headers,
      agent: agent,
      agents: { http: config.httpAgent, https: config.httpsAgent },
      auth: auth
    };

    if (config.socketPath) {
      options.socketPath = config.socketPath;
    } else {
      options.hostname = parsed.hostname;
      options.port = parsed.port;
    }

    var proxy = config.proxy;
    if (!proxy && proxy !== false) {
      var proxyEnv = protocol.slice(0, -1) + '_proxy';
      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];
      if (proxyUrl) {
        var parsedProxyUrl = url.parse(proxyUrl);
        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;
        var shouldProxy = true;

        if (noProxyEnv) {
          var noProxy = noProxyEnv.split(',').map(function trim(s) {
            return s.trim();
          });

          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {
            if (!proxyElement) {
              return false;
            }
            if (proxyElement === '*') {
              return true;
            }
            if (proxyElement[0] === '.' &&
                parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {
              return true;
            }

            return parsed.hostname === proxyElement;
          });
        }

        if (shouldProxy) {
          proxy = {
            host: parsedProxyUrl.hostname,
            port: parsedProxyUrl.port,
            protocol: parsedProxyUrl.protocol
          };

          if (parsedProxyUrl.auth) {
            var proxyUrlAuth = parsedProxyUrl.auth.split(':');
            proxy.auth = {
              username: proxyUrlAuth[0],
              password: proxyUrlAuth[1]
            };
          }
        }
      }
    }

    if (proxy) {
      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');
      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);
    }

    var transport;
    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);
    if (config.transport) {
      transport = config.transport;
    } else if (config.maxRedirects === 0) {
      transport = isHttpsProxy ? https : http;
    } else {
      if (config.maxRedirects) {
        options.maxRedirects = config.maxRedirects;
      }
      transport = isHttpsProxy ? httpsFollow : httpFollow;
    }

    if (config.maxBodyLength > -1) {
      options.maxBodyLength = config.maxBodyLength;
    }

    if (config.insecureHTTPParser) {
      options.insecureHTTPParser = config.insecureHTTPParser;
    }

    // Create the request
    var req = transport.request(options, function handleResponse(res) {
      if (req.aborted) return;

      // uncompress the response body transparently if required
      var stream = res;

      // return the last request in case of redirects
      var lastRequest = res.req || req;


      // if no content, is HEAD request or decompress disabled we should not decompress
      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {
        switch (res.headers['content-encoding']) {
        /*eslint default-case:0*/
        case 'gzip':
        case 'compress':
        case 'deflate':
        // add the unzipper to the body stream processing pipeline
          stream = stream.pipe(zlib.createUnzip());

          // remove the content-encoding in order to not confuse downstream operations
          delete res.headers['content-encoding'];
          break;
        }
      }

      var response = {
        status: res.statusCode,
        statusText: res.statusMessage,
        headers: res.headers,
        config: config,
        request: lastRequest
      };

      if (config.responseType === 'stream') {
        response.data = stream;
        settle(resolve, reject, response);
      } else {
        var responseBuffer = [];
        var totalResponseBytes = 0;
        stream.on('data', function handleStreamData(chunk) {
          responseBuffer.push(chunk);
          totalResponseBytes += chunk.length;

          // make sure the content length is not over the maxContentLength if specified
          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {
            // stream.destoy() emit aborted event before calling reject() on Node.js v16
            rejected = true;
            stream.destroy();
            reject(createError('maxContentLength size of ' + config.maxContentLength + ' exceeded',
              config, null, lastRequest));
          }
        });

        stream.on('aborted', function handlerStreamAborted() {
          if (rejected) {
            return;
          }
          stream.destroy();
          reject(createError('error request aborted', config, 'ERR_REQUEST_ABORTED', lastRequest));
        });

        stream.on('error', function handleStreamError(err) {
          if (req.aborted) return;
          reject(enhanceError(err, config, null, lastRequest));
        });

        stream.on('end', function handleStreamEnd() {
          try {
            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);
            if (config.responseType !== 'arraybuffer') {
              responseData = responseData.toString(config.responseEncoding);
              if (!config.responseEncoding || config.responseEncoding === 'utf8') {
                responseData = utils.stripBOM(responseData);
              }
            }
            response.data = responseData;
          } catch (err) {
            reject(enhanceError(err, config, err.code, response.request, response));
          }
          settle(resolve, reject, response);
        });
      }
    });

    // Handle errors
    req.on('error', function handleRequestError(err) {
      if (req.aborted && err.code !== 'ERR_FR_TOO_MANY_REDIRECTS') return;
      reject(enhanceError(err, config, null, req));
    });

    // set tcp keep alive to prevent drop connection by peer
    req.on('socket', function handleRequestSocket(socket) {
      // default interval of sending ack packet is 1 minute
      socket.setKeepAlive(true, 1000 * 60);
    });

    // Handle request timeout
    if (config.timeout) {
      // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.
      var timeout = parseInt(config.timeout, 10);

      if (isNaN(timeout)) {
        reject(createError(
          'error trying to parse `config.timeout` to int',
          config,
          'ERR_PARSE_TIMEOUT',
          req
        ));

        return;
      }

      // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.
      // And timer callback will be fired, and abort() will be invoked before connection, then get "socket hang up" and code ECONNRESET.
      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.
      // And then these socket which be hang up will devoring CPU little by little.
      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.
      req.setTimeout(timeout, function handleRequestTimeout() {
        req.abort();
        var transitional = config.transitional || defaults.transitional;
        reject(createError(
          'timeout of ' + timeout + 'ms exceeded',
          config,
          transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
          req
        ));
      });
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = function(cancel) {
        if (req.aborted) return;

        req.abort();
        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }


    // Send the request
    if (utils.isStream(data)) {
      data.on('error', function handleStreamError(err) {
        reject(enhanceError(err, config, null, req));
      }).pipe(req);
    } else {
      req.end(data);
    }
  });
};


/***/ }),

/***/ 7201:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(4204);
var settle = __nccwpck_require__(3967);
var cookies = __nccwpck_require__(8705);
var buildURL = __nccwpck_require__(5461);
var buildFullPath = __nccwpck_require__(4736);
var parseHeaders = __nccwpck_require__(6171);
var isURLSameOrigin = __nccwpck_require__(7757);
var createError = __nccwpck_require__(7935);
var defaults = __nccwpck_require__(1181);
var Cancel = __nccwpck_require__(7250);

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;
    var onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
        request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
      var transitional = config.transitional || defaults.transitional;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(
        timeoutErrorMessage,
        config,
        transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = function(cancel) {
        if (!request) {
          return;
        }
        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);
        request.abort();
        request = null;
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }

    if (!requestData) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ 4329:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(4204);
var bind = __nccwpck_require__(4241);
var Axios = __nccwpck_require__(6960);
var mergeConfig = __nccwpck_require__(2579);
var defaults = __nccwpck_require__(1181);

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Expose Cancel & CancelToken
axios.Cancel = __nccwpck_require__(7250);
axios.CancelToken = __nccwpck_require__(8296);
axios.isCancel = __nccwpck_require__(3494);
axios.VERSION = (__nccwpck_require__(7716).version);

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __nccwpck_require__(2537);

// Expose isAxiosError
axios.isAxiosError = __nccwpck_require__(746);

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports["default"] = axios;


/***/ }),

/***/ 7250:
/***/ ((module) => {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ 8296:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var Cancel = __nccwpck_require__(7250);

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;

  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;

  // eslint-disable-next-line func-names
  this.promise.then(function(cancel) {
    if (!token._listeners) return;

    var i;
    var l = token._listeners.length;

    for (i = 0; i < l; i++) {
      token._listeners[i](cancel);
    }
    token._listeners = null;
  });

  // eslint-disable-next-line func-names
  this.promise.then = function(onfulfilled) {
    var _resolve;
    // eslint-disable-next-line func-names
    var promise = new Promise(function(resolve) {
      token.subscribe(resolve);
      _resolve = resolve;
    }).then(onfulfilled);

    promise.cancel = function reject() {
      token.unsubscribe(_resolve);
    };

    return promise;
  };

  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Subscribe to the cancel signal
 */

CancelToken.prototype.subscribe = function subscribe(listener) {
  if (this.reason) {
    listener(this.reason);
    return;
  }

  if (this._listeners) {
    this._listeners.push(listener);
  } else {
    this._listeners = [listener];
  }
};

/**
 * Unsubscribe from the cancel signal
 */

CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
  if (!this._listeners) {
    return;
  }
  var index = this._listeners.indexOf(listener);
  if (index !== -1) {
    this._listeners.splice(index, 1);
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ 3494:
/***/ ((module) => {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ 6960:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(4204);
var buildURL = __nccwpck_require__(5461);
var InterceptorManager = __nccwpck_require__(3514);
var dispatchRequest = __nccwpck_require__(6266);
var mergeConfig = __nccwpck_require__(2579);
var validator = __nccwpck_require__(9956);

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(configOrUrl, config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof configOrUrl === 'string') {
    config = config || {};
    config.url = configOrUrl;
  } else {
    config = configOrUrl || {};
  }

  if (!config.url) {
    throw new Error('Provided config url is not valid');
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators.boolean),
      forcedJSONParsing: validators.transitional(validators.boolean),
      clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
  }

  // filter out skipped interceptors
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });

  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];

    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);

    promise = Promise.resolve(config);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }


  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  if (!config.url) {
    throw new Error('Provided config url is not valid');
  }
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ 3514:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(4204);

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ 4736:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var isAbsoluteURL = __nccwpck_require__(4773);
var combineURLs = __nccwpck_require__(5085);

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};


/***/ }),

/***/ 7935:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var enhanceError = __nccwpck_require__(9959);

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ 6266:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(4204);
var transformData = __nccwpck_require__(1368);
var isCancel = __nccwpck_require__(3494);
var defaults = __nccwpck_require__(1181);
var Cancel = __nccwpck_require__(7250);

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new Cancel('canceled');
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData.call(
    config,
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ 9959:
/***/ ((module) => {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  };
  return error;
};


/***/ }),

/***/ 2579:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(4204);

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(prop) {
    if (prop in config2) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  var mergeMap = {
    'url': valueFromConfig2,
    'method': valueFromConfig2,
    'data': valueFromConfig2,
    'baseURL': defaultToConfig2,
    'transformRequest': defaultToConfig2,
    'transformResponse': defaultToConfig2,
    'paramsSerializer': defaultToConfig2,
    'timeout': defaultToConfig2,
    'timeoutMessage': defaultToConfig2,
    'withCredentials': defaultToConfig2,
    'adapter': defaultToConfig2,
    'responseType': defaultToConfig2,
    'xsrfCookieName': defaultToConfig2,
    'xsrfHeaderName': defaultToConfig2,
    'onUploadProgress': defaultToConfig2,
    'onDownloadProgress': defaultToConfig2,
    'decompress': defaultToConfig2,
    'maxContentLength': defaultToConfig2,
    'maxBodyLength': defaultToConfig2,
    'transport': defaultToConfig2,
    'httpAgent': defaultToConfig2,
    'httpsAgent': defaultToConfig2,
    'cancelToken': defaultToConfig2,
    'socketPath': defaultToConfig2,
    'responseEncoding': defaultToConfig2,
    'validateStatus': mergeDirectKeys
  };

  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    var merge = mergeMap[prop] || mergeDeepProperties;
    var configValue = merge(prop);
    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
};


/***/ }),

/***/ 3967:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var createError = __nccwpck_require__(7935);

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ 1368:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(4204);
var defaults = __nccwpck_require__(1181);

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  var context = this || defaults;
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });

  return data;
};


/***/ }),

/***/ 1181:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(4204);
var normalizeHeaderName = __nccwpck_require__(5969);
var enhanceError = __nccwpck_require__(9959);

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __nccwpck_require__(7201);
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __nccwpck_require__(9776);
  }
  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {

  transitional: {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  },

  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional || defaults.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw enhanceError(e, this, 'E_JSON_PARSE');
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;


/***/ }),

/***/ 7716:
/***/ ((module) => {

module.exports = {
  "version": "0.25.0"
};

/***/ }),

/***/ 4241:
/***/ ((module) => {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ 5461:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(4204);

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ 5085:
/***/ ((module) => {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ 8705:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(4204);

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),

/***/ 4773:
/***/ ((module) => {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ 746:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(4204);

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
module.exports = function isAxiosError(payload) {
  return utils.isObject(payload) && (payload.isAxiosError === true);
};


/***/ }),

/***/ 7757:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(4204);

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),

/***/ 5969:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(4204);

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ 6171:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var utils = __nccwpck_require__(4204);

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ 2537:
/***/ ((module) => {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ 9956:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var VERSION = (__nccwpck_require__(7716).version);

var validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

var deprecatedWarnings = {};

/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return function(value, opt, opts) {
    if (validator === false) {
      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new TypeError('options must be an object');
  }
  var keys = Object.keys(options);
  var i = keys.length;
  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];
    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new TypeError('option ' + opt + ' must be ' + result);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw Error('Unknown option ' + opt);
    }
  }
}

module.exports = {
  assertOptions: assertOptions,
  validators: validators
};


/***/ }),

/***/ 4204:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var bind = __nccwpck_require__(4241);

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return Array.isArray(val);
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return toString.call(val) === '[object FormData]';
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return toString.call(val) === '[object URLSearchParams]';
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};


/***/ }),

/***/ 675:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var util = __nccwpck_require__(3837);
var Stream = (__nccwpck_require__(2781).Stream);
var DelayedStream = __nccwpck_require__(1851);

module.exports = CombinedStream;
function CombinedStream() {
  this.writable = false;
  this.readable = true;
  this.dataSize = 0;
  this.maxDataSize = 2 * 1024 * 1024;
  this.pauseStreams = true;

  this._released = false;
  this._streams = [];
  this._currentStream = null;
  this._insideLoop = false;
  this._pendingNext = false;
}
util.inherits(CombinedStream, Stream);

CombinedStream.create = function(options) {
  var combinedStream = new this();

  options = options || {};
  for (var option in options) {
    combinedStream[option] = options[option];
  }

  return combinedStream;
};

CombinedStream.isStreamLike = function(stream) {
  return (typeof stream !== 'function')
    && (typeof stream !== 'string')
    && (typeof stream !== 'boolean')
    && (typeof stream !== 'number')
    && (!Buffer.isBuffer(stream));
};

CombinedStream.prototype.append = function(stream) {
  var isStreamLike = CombinedStream.isStreamLike(stream);

  if (isStreamLike) {
    if (!(stream instanceof DelayedStream)) {
      var newStream = DelayedStream.create(stream, {
        maxDataSize: Infinity,
        pauseStream: this.pauseStreams,
      });
      stream.on('data', this._checkDataSize.bind(this));
      stream = newStream;
    }

    this._handleErrors(stream);

    if (this.pauseStreams) {
      stream.pause();
    }
  }

  this._streams.push(stream);
  return this;
};

CombinedStream.prototype.pipe = function(dest, options) {
  Stream.prototype.pipe.call(this, dest, options);
  this.resume();
  return dest;
};

CombinedStream.prototype._getNext = function() {
  this._currentStream = null;

  if (this._insideLoop) {
    this._pendingNext = true;
    return; // defer call
  }

  this._insideLoop = true;
  try {
    do {
      this._pendingNext = false;
      this._realGetNext();
    } while (this._pendingNext);
  } finally {
    this._insideLoop = false;
  }
};

CombinedStream.prototype._realGetNext = function() {
  var stream = this._streams.shift();


  if (typeof stream == 'undefined') {
    this.end();
    return;
  }

  if (typeof stream !== 'function') {
    this._pipeNext(stream);
    return;
  }

  var getStream = stream;
  getStream(function(stream) {
    var isStreamLike = CombinedStream.isStreamLike(stream);
    if (isStreamLike) {
      stream.on('data', this._checkDataSize.bind(this));
      this._handleErrors(stream);
    }

    this._pipeNext(stream);
  }.bind(this));
};

CombinedStream.prototype._pipeNext = function(stream) {
  this._currentStream = stream;

  var isStreamLike = CombinedStream.isStreamLike(stream);
  if (isStreamLike) {
    stream.on('end', this._getNext.bind(this));
    stream.pipe(this, {end: false});
    return;
  }

  var value = stream;
  this.write(value);
  this._getNext();
};

CombinedStream.prototype._handleErrors = function(stream) {
  var self = this;
  stream.on('error', function(err) {
    self._emitError(err);
  });
};

CombinedStream.prototype.write = function(data) {
  this.emit('data', data);
};

CombinedStream.prototype.pause = function() {
  if (!this.pauseStreams) {
    return;
  }

  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.pause) == 'function') this._currentStream.pause();
  this.emit('pause');
};

CombinedStream.prototype.resume = function() {
  if (!this._released) {
    this._released = true;
    this.writable = true;
    this._getNext();
  }

  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.resume) == 'function') this._currentStream.resume();
  this.emit('resume');
};

CombinedStream.prototype.end = function() {
  this._reset();
  this.emit('end');
};

CombinedStream.prototype.destroy = function() {
  this._reset();
  this.emit('close');
};

CombinedStream.prototype._reset = function() {
  this.writable = false;
  this._streams = [];
  this._currentStream = null;
};

CombinedStream.prototype._checkDataSize = function() {
  this._updateDataSize();
  if (this.dataSize <= this.maxDataSize) {
    return;
  }

  var message =
    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
  this._emitError(new Error(message));
};

CombinedStream.prototype._updateDataSize = function() {
  this.dataSize = 0;

  var self = this;
  this._streams.forEach(function(stream) {
    if (!stream.dataSize) {
      return;
    }

    self.dataSize += stream.dataSize;
  });

  if (this._currentStream && this._currentStream.dataSize) {
    this.dataSize += this._currentStream.dataSize;
  }
};

CombinedStream.prototype._emitError = function(err) {
  this._reset();
  this.emit('error', err);
};


/***/ }),

/***/ 2057:
/***/ ((module, exports, __nccwpck_require__) => {

/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */

exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
exports.destroy = (() => {
	let warned = false;

	return () => {
		if (!warned) {
			warned = true;
			console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
		}
	};
})();

/**
 * Colors.
 */

exports.colors = [
	'#0000CC',
	'#0000FF',
	'#0033CC',
	'#0033FF',
	'#0066CC',
	'#0066FF',
	'#0099CC',
	'#0099FF',
	'#00CC00',
	'#00CC33',
	'#00CC66',
	'#00CC99',
	'#00CCCC',
	'#00CCFF',
	'#3300CC',
	'#3300FF',
	'#3333CC',
	'#3333FF',
	'#3366CC',
	'#3366FF',
	'#3399CC',
	'#3399FF',
	'#33CC00',
	'#33CC33',
	'#33CC66',
	'#33CC99',
	'#33CCCC',
	'#33CCFF',
	'#6600CC',
	'#6600FF',
	'#6633CC',
	'#6633FF',
	'#66CC00',
	'#66CC33',
	'#9900CC',
	'#9900FF',
	'#9933CC',
	'#9933FF',
	'#99CC00',
	'#99CC33',
	'#CC0000',
	'#CC0033',
	'#CC0066',
	'#CC0099',
	'#CC00CC',
	'#CC00FF',
	'#CC3300',
	'#CC3333',
	'#CC3366',
	'#CC3399',
	'#CC33CC',
	'#CC33FF',
	'#CC6600',
	'#CC6633',
	'#CC9900',
	'#CC9933',
	'#CCCC00',
	'#CCCC33',
	'#FF0000',
	'#FF0033',
	'#FF0066',
	'#FF0099',
	'#FF00CC',
	'#FF00FF',
	'#FF3300',
	'#FF3333',
	'#FF3366',
	'#FF3399',
	'#FF33CC',
	'#FF33FF',
	'#FF6600',
	'#FF6633',
	'#FF9900',
	'#FF9933',
	'#FFCC00',
	'#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

// eslint-disable-next-line complexity
function useColors() {
	// NB: In an Electron preload script, document will be defined but not fully
	// initialized. Since we know we're in Chrome, we'll just detect this case
	// explicitly
	if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
		return true;
	}

	// Internet Explorer and Edge do not support colors.
	if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
		return false;
	}

	// Is webkit? http://stackoverflow.com/a/16459606/376773
	// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
		// Is firebug? http://stackoverflow.com/a/398120/376773
		(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
		// Is firefox >= v31?
		// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
		// Double check webkit in userAgent just in case we are in a worker
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
	args[0] = (this.useColors ? '%c' : '') +
		this.namespace +
		(this.useColors ? ' %c' : ' ') +
		args[0] +
		(this.useColors ? '%c ' : ' ') +
		'+' + module.exports.humanize(this.diff);

	if (!this.useColors) {
		return;
	}

	const c = 'color: ' + this.color;
	args.splice(1, 0, c, 'color: inherit');

	// The final "%c" is somewhat tricky, because there could be other
	// arguments passed either before or after the %c, so we need to
	// figure out the correct index to insert the CSS into
	let index = 0;
	let lastC = 0;
	args[0].replace(/%[a-zA-Z%]/g, match => {
		if (match === '%%') {
			return;
		}
		index++;
		if (match === '%c') {
			// We only are interested in the *last* %c
			// (the user may have provided their own)
			lastC = index;
		}
	});

	args.splice(lastC, 0, c);
}

/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */
exports.log = console.debug || console.log || (() => {});

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */
function save(namespaces) {
	try {
		if (namespaces) {
			exports.storage.setItem('debug', namespaces);
		} else {
			exports.storage.removeItem('debug');
		}
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */
function load() {
	let r;
	try {
		r = exports.storage.getItem('debug');
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}

	// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	if (!r && typeof process !== 'undefined' && 'env' in process) {
		r = process.env.DEBUG;
	}

	return r;
}

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
	try {
		// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
		// The Browser also has localStorage in the global context.
		return localStorage;
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

module.exports = __nccwpck_require__(5889)(exports);

const {formatters} = module.exports;

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
	try {
		return JSON.stringify(v);
	} catch (error) {
		return '[UnexpectedJSONParseError]: ' + error.message;
	}
};


/***/ }),

/***/ 5889:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

function setup(env) {
	createDebug.debug = createDebug;
	createDebug.default = createDebug;
	createDebug.coerce = coerce;
	createDebug.disable = disable;
	createDebug.enable = enable;
	createDebug.enabled = enabled;
	createDebug.humanize = __nccwpck_require__(7626);
	createDebug.destroy = destroy;

	Object.keys(env).forEach(key => {
		createDebug[key] = env[key];
	});

	/**
	* The currently active debug mode names, and names to skip.
	*/

	createDebug.names = [];
	createDebug.skips = [];

	/**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/
	createDebug.formatters = {};

	/**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/
	function selectColor(namespace) {
		let hash = 0;

		for (let i = 0; i < namespace.length; i++) {
			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
			hash |= 0; // Convert to 32bit integer
		}

		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
	}
	createDebug.selectColor = selectColor;

	/**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/
	function createDebug(namespace) {
		let prevTime;
		let enableOverride = null;
		let namespacesCache;
		let enabledCache;

		function debug(...args) {
			// Disabled?
			if (!debug.enabled) {
				return;
			}

			const self = debug;

			// Set `diff` timestamp
			const curr = Number(new Date());
			const ms = curr - (prevTime || curr);
			self.diff = ms;
			self.prev = prevTime;
			self.curr = curr;
			prevTime = curr;

			args[0] = createDebug.coerce(args[0]);

			if (typeof args[0] !== 'string') {
				// Anything else let's inspect with %O
				args.unshift('%O');
			}

			// Apply any `formatters` transformations
			let index = 0;
			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
				// If we encounter an escaped % then don't increase the array index
				if (match === '%%') {
					return '%';
				}
				index++;
				const formatter = createDebug.formatters[format];
				if (typeof formatter === 'function') {
					const val = args[index];
					match = formatter.call(self, val);

					// Now we need to remove `args[index]` since it's inlined in the `format`
					args.splice(index, 1);
					index--;
				}
				return match;
			});

			// Apply env-specific formatting (colors, etc.)
			createDebug.formatArgs.call(self, args);

			const logFn = self.log || createDebug.log;
			logFn.apply(self, args);
		}

		debug.namespace = namespace;
		debug.useColors = createDebug.useColors();
		debug.color = createDebug.selectColor(namespace);
		debug.extend = extend;
		debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

		Object.defineProperty(debug, 'enabled', {
			enumerable: true,
			configurable: false,
			get: () => {
				if (enableOverride !== null) {
					return enableOverride;
				}
				if (namespacesCache !== createDebug.namespaces) {
					namespacesCache = createDebug.namespaces;
					enabledCache = createDebug.enabled(namespace);
				}

				return enabledCache;
			},
			set: v => {
				enableOverride = v;
			}
		});

		// Env-specific initialization logic for debug instances
		if (typeof createDebug.init === 'function') {
			createDebug.init(debug);
		}

		return debug;
	}

	function extend(namespace, delimiter) {
		const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
		newDebug.log = this.log;
		return newDebug;
	}

	/**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/
	function enable(namespaces) {
		createDebug.save(namespaces);
		createDebug.namespaces = namespaces;

		createDebug.names = [];
		createDebug.skips = [];

		let i;
		const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
		const len = split.length;

		for (i = 0; i < len; i++) {
			if (!split[i]) {
				// ignore empty strings
				continue;
			}

			namespaces = split[i].replace(/\*/g, '.*?');

			if (namespaces[0] === '-') {
				createDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));
			} else {
				createDebug.names.push(new RegExp('^' + namespaces + '$'));
			}
		}
	}

	/**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/
	function disable() {
		const namespaces = [
			...createDebug.names.map(toNamespace),
			...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
		].join(',');
		createDebug.enable('');
		return namespaces;
	}

	/**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/
	function enabled(name) {
		if (name[name.length - 1] === '*') {
			return true;
		}

		let i;
		let len;

		for (i = 0, len = createDebug.skips.length; i < len; i++) {
			if (createDebug.skips[i].test(name)) {
				return false;
			}
		}

		for (i = 0, len = createDebug.names.length; i < len; i++) {
			if (createDebug.names[i].test(name)) {
				return true;
			}
		}

		return false;
	}

	/**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/
	function toNamespace(regexp) {
		return regexp.toString()
			.substring(2, regexp.toString().length - 2)
			.replace(/\.\*\?$/, '*');
	}

	/**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/
	function coerce(val) {
		if (val instanceof Error) {
			return val.stack || val.message;
		}
		return val;
	}

	/**
	* XXX DO NOT USE. This is a temporary stub function.
	* XXX It WILL be removed in the next major release.
	*/
	function destroy() {
		console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
	}

	createDebug.enable(createDebug.load());

	return createDebug;
}

module.exports = setup;


/***/ }),

/***/ 4404:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/**
 * Detect Electron renderer / nwjs process, which is node, but we should
 * treat as a browser.
 */

if (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {
	module.exports = __nccwpck_require__(2057);
} else {
	module.exports = __nccwpck_require__(6313);
}


/***/ }),

/***/ 6313:
/***/ ((module, exports, __nccwpck_require__) => {

/**
 * Module dependencies.
 */

const tty = __nccwpck_require__(6224);
const util = __nccwpck_require__(3837);

/**
 * This is the Node.js implementation of `debug()`.
 */

exports.init = init;
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.destroy = util.deprecate(
	() => {},
	'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'
);

/**
 * Colors.
 */

exports.colors = [6, 2, 3, 4, 5, 1];

try {
	// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
	// eslint-disable-next-line import/no-extraneous-dependencies
	const supportsColor = __nccwpck_require__(9472);

	if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
		exports.colors = [
			20,
			21,
			26,
			27,
			32,
			33,
			38,
			39,
			40,
			41,
			42,
			43,
			44,
			45,
			56,
			57,
			62,
			63,
			68,
			69,
			74,
			75,
			76,
			77,
			78,
			79,
			80,
			81,
			92,
			93,
			98,
			99,
			112,
			113,
			128,
			129,
			134,
			135,
			148,
			149,
			160,
			161,
			162,
			163,
			164,
			165,
			166,
			167,
			168,
			169,
			170,
			171,
			172,
			173,
			178,
			179,
			184,
			185,
			196,
			197,
			198,
			199,
			200,
			201,
			202,
			203,
			204,
			205,
			206,
			207,
			208,
			209,
			214,
			215,
			220,
			221
		];
	}
} catch (error) {
	// Swallow - we only care if `supports-color` is available; it doesn't have to be.
}

/**
 * Build up the default `inspectOpts` object from the environment variables.
 *
 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
 */

exports.inspectOpts = Object.keys(process.env).filter(key => {
	return /^debug_/i.test(key);
}).reduce((obj, key) => {
	// Camel-case
	const prop = key
		.substring(6)
		.toLowerCase()
		.replace(/_([a-z])/g, (_, k) => {
			return k.toUpperCase();
		});

	// Coerce string value into JS value
	let val = process.env[key];
	if (/^(yes|on|true|enabled)$/i.test(val)) {
		val = true;
	} else if (/^(no|off|false|disabled)$/i.test(val)) {
		val = false;
	} else if (val === 'null') {
		val = null;
	} else {
		val = Number(val);
	}

	obj[prop] = val;
	return obj;
}, {});

/**
 * Is stdout a TTY? Colored output is enabled when `true`.
 */

function useColors() {
	return 'colors' in exports.inspectOpts ?
		Boolean(exports.inspectOpts.colors) :
		tty.isatty(process.stderr.fd);
}

/**
 * Adds ANSI color escape codes if enabled.
 *
 * @api public
 */

function formatArgs(args) {
	const {namespace: name, useColors} = this;

	if (useColors) {
		const c = this.color;
		const colorCode = '\u001B[3' + (c < 8 ? c : '8;5;' + c);
		const prefix = `  ${colorCode};1m${name} \u001B[0m`;

		args[0] = prefix + args[0].split('\n').join('\n' + prefix);
		args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\u001B[0m');
	} else {
		args[0] = getDate() + name + ' ' + args[0];
	}
}

function getDate() {
	if (exports.inspectOpts.hideDate) {
		return '';
	}
	return new Date().toISOString() + ' ';
}

/**
 * Invokes `util.format()` with the specified arguments and writes to stderr.
 */

function log(...args) {
	return process.stderr.write(util.format(...args) + '\n');
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */
function save(namespaces) {
	if (namespaces) {
		process.env.DEBUG = namespaces;
	} else {
		// If you set a process.env field to null or undefined, it gets cast to the
		// string 'null' or 'undefined'. Just delete instead.
		delete process.env.DEBUG;
	}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
	return process.env.DEBUG;
}

/**
 * Init logic for `debug` instances.
 *
 * Create a new `inspectOpts` object in case `useColors` is set
 * differently for a particular `debug` instance.
 */

function init(debug) {
	debug.inspectOpts = {};

	const keys = Object.keys(exports.inspectOpts);
	for (let i = 0; i < keys.length; i++) {
		debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
	}
}

module.exports = __nccwpck_require__(5889)(exports);

const {formatters} = module.exports;

/**
 * Map %o to `util.inspect()`, all on a single line.
 */

formatters.o = function (v) {
	this.inspectOpts.colors = this.useColors;
	return util.inspect(v, this.inspectOpts)
		.split('\n')
		.map(str => str.trim())
		.join(' ');
};

/**
 * Map %O to `util.inspect()`, allowing multiple lines if needed.
 */

formatters.O = function (v) {
	this.inspectOpts.colors = this.useColors;
	return util.inspect(v, this.inspectOpts);
};


/***/ }),

/***/ 1851:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var Stream = (__nccwpck_require__(2781).Stream);
var util = __nccwpck_require__(3837);

module.exports = DelayedStream;
function DelayedStream() {
  this.source = null;
  this.dataSize = 0;
  this.maxDataSize = 1024 * 1024;
  this.pauseStream = true;

  this._maxDataSizeExceeded = false;
  this._released = false;
  this._bufferedEvents = [];
}
util.inherits(DelayedStream, Stream);

DelayedStream.create = function(source, options) {
  var delayedStream = new this();

  options = options || {};
  for (var option in options) {
    delayedStream[option] = options[option];
  }

  delayedStream.source = source;

  var realEmit = source.emit;
  source.emit = function() {
    delayedStream._handleEmit(arguments);
    return realEmit.apply(source, arguments);
  };

  source.on('error', function() {});
  if (delayedStream.pauseStream) {
    source.pause();
  }

  return delayedStream;
};

Object.defineProperty(DelayedStream.prototype, 'readable', {
  configurable: true,
  enumerable: true,
  get: function() {
    return this.source.readable;
  }
});

DelayedStream.prototype.setEncoding = function() {
  return this.source.setEncoding.apply(this.source, arguments);
};

DelayedStream.prototype.resume = function() {
  if (!this._released) {
    this.release();
  }

  this.source.resume();
};

DelayedStream.prototype.pause = function() {
  this.source.pause();
};

DelayedStream.prototype.release = function() {
  this._released = true;

  this._bufferedEvents.forEach(function(args) {
    this.emit.apply(this, args);
  }.bind(this));
  this._bufferedEvents = [];
};

DelayedStream.prototype.pipe = function() {
  var r = Stream.prototype.pipe.apply(this, arguments);
  this.resume();
  return r;
};

DelayedStream.prototype._handleEmit = function(args) {
  if (this._released) {
    this.emit.apply(this, args);
    return;
  }

  if (args[0] === 'data') {
    this.dataSize += args[1].length;
    this._checkIfMaxDataSizeExceeded();
  }

  this._bufferedEvents.push(args);
};

DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
  if (this._maxDataSizeExceeded) {
    return;
  }

  if (this.dataSize <= this.maxDataSize) {
    return;
  }

  this._maxDataSizeExceeded = true;
  var message =
    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.'
  this.emit('error', new Error(message));
};


/***/ }),

/***/ 2866:
/***/ ((module) => {

"use strict";


var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;

module.exports = function (str) {
	if (typeof str !== 'string') {
		throw new TypeError('Expected a string');
	}

	return str.replace(matchOperatorsRe, '\\$&');
};


/***/ }),

/***/ 378:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var debug;

module.exports = function () {
  if (!debug) {
    try {
      /* eslint global-require: off */
      debug = __nccwpck_require__(4404)("follow-redirects");
    }
    catch (error) { /* */ }
    if (typeof debug !== "function") {
      debug = function () { /* */ };
    }
  }
  debug.apply(null, arguments);
};


/***/ }),

/***/ 7911:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var url = __nccwpck_require__(7310);
var URL = url.URL;
var http = __nccwpck_require__(3685);
var https = __nccwpck_require__(5687);
var Writable = (__nccwpck_require__(2781).Writable);
var assert = __nccwpck_require__(9491);
var debug = __nccwpck_require__(378);

// Create handlers that pass events from native requests
var events = ["abort", "aborted", "connect", "error", "socket", "timeout"];
var eventHandlers = Object.create(null);
events.forEach(function (event) {
  eventHandlers[event] = function (arg1, arg2, arg3) {
    this._redirectable.emit(event, arg1, arg2, arg3);
  };
});

var InvalidUrlError = createErrorType(
  "ERR_INVALID_URL",
  "Invalid URL",
  TypeError
);
// Error types with codes
var RedirectionError = createErrorType(
  "ERR_FR_REDIRECTION_FAILURE",
  "Redirected request failed"
);
var TooManyRedirectsError = createErrorType(
  "ERR_FR_TOO_MANY_REDIRECTS",
  "Maximum number of redirects exceeded"
);
var MaxBodyLengthExceededError = createErrorType(
  "ERR_FR_MAX_BODY_LENGTH_EXCEEDED",
  "Request body larger than maxBodyLength limit"
);
var WriteAfterEndError = createErrorType(
  "ERR_STREAM_WRITE_AFTER_END",
  "write after end"
);

// istanbul ignore next
var destroy = Writable.prototype.destroy || noop;

// An HTTP(S) request that can be redirected
function RedirectableRequest(options, responseCallback) {
  // Initialize the request
  Writable.call(this);
  this._sanitizeOptions(options);
  this._options = options;
  this._ended = false;
  this._ending = false;
  this._redirectCount = 0;
  this._redirects = [];
  this._requestBodyLength = 0;
  this._requestBodyBuffers = [];

  // Attach a callback if passed
  if (responseCallback) {
    this.on("response", responseCallback);
  }

  // React to responses of native requests
  var self = this;
  this._onNativeResponse = function (response) {
    self._processResponse(response);
  };

  // Perform the first request
  this._performRequest();
}
RedirectableRequest.prototype = Object.create(Writable.prototype);

RedirectableRequest.prototype.abort = function () {
  destroyRequest(this._currentRequest);
  this._currentRequest.abort();
  this.emit("abort");
};

RedirectableRequest.prototype.destroy = function (error) {
  destroyRequest(this._currentRequest, error);
  destroy.call(this, error);
  return this;
};

// Writes buffered data to the current native request
RedirectableRequest.prototype.write = function (data, encoding, callback) {
  // Writing is not allowed if end has been called
  if (this._ending) {
    throw new WriteAfterEndError();
  }

  // Validate input and shift parameters if necessary
  if (!isString(data) && !isBuffer(data)) {
    throw new TypeError("data should be a string, Buffer or Uint8Array");
  }
  if (isFunction(encoding)) {
    callback = encoding;
    encoding = null;
  }

  // Ignore empty buffers, since writing them doesn't invoke the callback
  // https://github.com/nodejs/node/issues/22066
  if (data.length === 0) {
    if (callback) {
      callback();
    }
    return;
  }
  // Only write when we don't exceed the maximum body length
  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
    this._requestBodyLength += data.length;
    this._requestBodyBuffers.push({ data: data, encoding: encoding });
    this._currentRequest.write(data, encoding, callback);
  }
  // Error when we exceed the maximum body length
  else {
    this.emit("error", new MaxBodyLengthExceededError());
    this.abort();
  }
};

// Ends the current native request
RedirectableRequest.prototype.end = function (data, encoding, callback) {
  // Shift parameters if necessary
  if (isFunction(data)) {
    callback = data;
    data = encoding = null;
  }
  else if (isFunction(encoding)) {
    callback = encoding;
    encoding = null;
  }

  // Write data if needed and end
  if (!data) {
    this._ended = this._ending = true;
    this._currentRequest.end(null, null, callback);
  }
  else {
    var self = this;
    var currentRequest = this._currentRequest;
    this.write(data, encoding, function () {
      self._ended = true;
      currentRequest.end(null, null, callback);
    });
    this._ending = true;
  }
};

// Sets a header value on the current native request
RedirectableRequest.prototype.setHeader = function (name, value) {
  this._options.headers[name] = value;
  this._currentRequest.setHeader(name, value);
};

// Clears a header value on the current native request
RedirectableRequest.prototype.removeHeader = function (name) {
  delete this._options.headers[name];
  this._currentRequest.removeHeader(name);
};

// Global timeout for all underlying requests
RedirectableRequest.prototype.setTimeout = function (msecs, callback) {
  var self = this;

  // Destroys the socket on timeout
  function destroyOnTimeout(socket) {
    socket.setTimeout(msecs);
    socket.removeListener("timeout", socket.destroy);
    socket.addListener("timeout", socket.destroy);
  }

  // Sets up a timer to trigger a timeout event
  function startTimer(socket) {
    if (self._timeout) {
      clearTimeout(self._timeout);
    }
    self._timeout = setTimeout(function () {
      self.emit("timeout");
      clearTimer();
    }, msecs);
    destroyOnTimeout(socket);
  }

  // Stops a timeout from triggering
  function clearTimer() {
    // Clear the timeout
    if (self._timeout) {
      clearTimeout(self._timeout);
      self._timeout = null;
    }

    // Clean up all attached listeners
    self.removeListener("abort", clearTimer);
    self.removeListener("error", clearTimer);
    self.removeListener("response", clearTimer);
    self.removeListener("close", clearTimer);
    if (callback) {
      self.removeListener("timeout", callback);
    }
    if (!self.socket) {
      self._currentRequest.removeListener("socket", startTimer);
    }
  }

  // Attach callback if passed
  if (callback) {
    this.on("timeout", callback);
  }

  // Start the timer if or when the socket is opened
  if (this.socket) {
    startTimer(this.socket);
  }
  else {
    this._currentRequest.once("socket", startTimer);
  }

  // Clean up on events
  this.on("socket", destroyOnTimeout);
  this.on("abort", clearTimer);
  this.on("error", clearTimer);
  this.on("response", clearTimer);
  this.on("close", clearTimer);

  return this;
};

// Proxy all other public ClientRequest methods
[
  "flushHeaders", "getHeader",
  "setNoDelay", "setSocketKeepAlive",
].forEach(function (method) {
  RedirectableRequest.prototype[method] = function (a, b) {
    return this._currentRequest[method](a, b);
  };
});

// Proxy all public ClientRequest properties
["aborted", "connection", "socket"].forEach(function (property) {
  Object.defineProperty(RedirectableRequest.prototype, property, {
    get: function () { return this._currentRequest[property]; },
  });
});

RedirectableRequest.prototype._sanitizeOptions = function (options) {
  // Ensure headers are always present
  if (!options.headers) {
    options.headers = {};
  }

  // Since http.request treats host as an alias of hostname,
  // but the url module interprets host as hostname plus port,
  // eliminate the host property to avoid confusion.
  if (options.host) {
    // Use hostname if set, because it has precedence
    if (!options.hostname) {
      options.hostname = options.host;
    }
    delete options.host;
  }

  // Complete the URL object when necessary
  if (!options.pathname && options.path) {
    var searchPos = options.path.indexOf("?");
    if (searchPos < 0) {
      options.pathname = options.path;
    }
    else {
      options.pathname = options.path.substring(0, searchPos);
      options.search = options.path.substring(searchPos);
    }
  }
};


// Executes the next native request (initial or redirect)
RedirectableRequest.prototype._performRequest = function () {
  // Load the native protocol
  var protocol = this._options.protocol;
  var nativeProtocol = this._options.nativeProtocols[protocol];
  if (!nativeProtocol) {
    this.emit("error", new TypeError("Unsupported protocol " + protocol));
    return;
  }

  // If specified, use the agent corresponding to the protocol
  // (HTTP and HTTPS use different types of agents)
  if (this._options.agents) {
    var scheme = protocol.slice(0, -1);
    this._options.agent = this._options.agents[scheme];
  }

  // Create the native request and set up its event handlers
  var request = this._currentRequest =
        nativeProtocol.request(this._options, this._onNativeResponse);
  request._redirectable = this;
  for (var event of events) {
    request.on(event, eventHandlers[event]);
  }

  // RFC7230§5.3.1: When making a request directly to an origin server, […]
  // a client MUST send only the absolute path […] as the request-target.
  this._currentUrl = /^\//.test(this._options.path) ?
    url.format(this._options) :
    // When making a request to a proxy, […]
    // a client MUST send the target URI in absolute-form […].
    this._options.path;

  // End a redirected request
  // (The first request must be ended explicitly with RedirectableRequest#end)
  if (this._isRedirect) {
    // Write the request entity and end
    var i = 0;
    var self = this;
    var buffers = this._requestBodyBuffers;
    (function writeNext(error) {
      // Only write if this request has not been redirected yet
      /* istanbul ignore else */
      if (request === self._currentRequest) {
        // Report any write errors
        /* istanbul ignore if */
        if (error) {
          self.emit("error", error);
        }
        // Write the next buffer if there are still left
        else if (i < buffers.length) {
          var buffer = buffers[i++];
          /* istanbul ignore else */
          if (!request.finished) {
            request.write(buffer.data, buffer.encoding, writeNext);
          }
        }
        // End the request if `end` has been called on us
        else if (self._ended) {
          request.end();
        }
      }
    }());
  }
};

// Processes a response from the current native request
RedirectableRequest.prototype._processResponse = function (response) {
  // Store the redirected response
  var statusCode = response.statusCode;
  if (this._options.trackRedirects) {
    this._redirects.push({
      url: this._currentUrl,
      headers: response.headers,
      statusCode: statusCode,
    });
  }

  // RFC7231§6.4: The 3xx (Redirection) class of status code indicates
  // that further action needs to be taken by the user agent in order to
  // fulfill the request. If a Location header field is provided,
  // the user agent MAY automatically redirect its request to the URI
  // referenced by the Location field value,
  // even if the specific status code is not understood.

  // If the response is not a redirect; return it as-is
  var location = response.headers.location;
  if (!location || this._options.followRedirects === false ||
      statusCode < 300 || statusCode >= 400) {
    response.responseUrl = this._currentUrl;
    response.redirects = this._redirects;
    this.emit("response", response);

    // Clean up
    this._requestBodyBuffers = [];
    return;
  }

  // The response is a redirect, so abort the current request
  destroyRequest(this._currentRequest);
  // Discard the remainder of the response to avoid waiting for data
  response.destroy();

  // RFC7231§6.4: A client SHOULD detect and intervene
  // in cyclical redirections (i.e., "infinite" redirection loops).
  if (++this._redirectCount > this._options.maxRedirects) {
    this.emit("error", new TooManyRedirectsError());
    return;
  }

  // Store the request headers if applicable
  var requestHeaders;
  var beforeRedirect = this._options.beforeRedirect;
  if (beforeRedirect) {
    requestHeaders = Object.assign({
      // The Host header was set by nativeProtocol.request
      Host: response.req.getHeader("host"),
    }, this._options.headers);
  }

  // RFC7231§6.4: Automatic redirection needs to done with
  // care for methods not known to be safe, […]
  // RFC7231§6.4.2–3: For historical reasons, a user agent MAY change
  // the request method from POST to GET for the subsequent request.
  var method = this._options.method;
  if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" ||
      // RFC7231§6.4.4: The 303 (See Other) status code indicates that
      // the server is redirecting the user agent to a different resource […]
      // A user agent can perform a retrieval request targeting that URI
      // (a GET or HEAD request if using HTTP) […]
      (statusCode === 303) && !/^(?:GET|HEAD)$/.test(this._options.method)) {
    this._options.method = "GET";
    // Drop a possible entity and headers related to it
    this._requestBodyBuffers = [];
    removeMatchingHeaders(/^content-/i, this._options.headers);
  }

  // Drop the Host header, as the redirect might lead to a different host
  var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);

  // If the redirect is relative, carry over the host of the last request
  var currentUrlParts = url.parse(this._currentUrl);
  var currentHost = currentHostHeader || currentUrlParts.host;
  var currentUrl = /^\w+:/.test(location) ? this._currentUrl :
    url.format(Object.assign(currentUrlParts, { host: currentHost }));

  // Determine the URL of the redirection
  var redirectUrl;
  try {
    redirectUrl = url.resolve(currentUrl, location);
  }
  catch (cause) {
    this.emit("error", new RedirectionError({ cause: cause }));
    return;
  }

  // Create the redirected request
  debug("redirecting to", redirectUrl);
  this._isRedirect = true;
  var redirectUrlParts = url.parse(redirectUrl);
  Object.assign(this._options, redirectUrlParts);

  // Drop confidential headers when redirecting to a less secure protocol
  // or to a different domain that is not a superdomain
  if (redirectUrlParts.protocol !== currentUrlParts.protocol &&
     redirectUrlParts.protocol !== "https:" ||
     redirectUrlParts.host !== currentHost &&
     !isSubdomain(redirectUrlParts.host, currentHost)) {
    removeMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);
  }

  // Evaluate the beforeRedirect callback
  if (isFunction(beforeRedirect)) {
    var responseDetails = {
      headers: response.headers,
      statusCode: statusCode,
    };
    var requestDetails = {
      url: currentUrl,
      method: method,
      headers: requestHeaders,
    };
    try {
      beforeRedirect(this._options, responseDetails, requestDetails);
    }
    catch (err) {
      this.emit("error", err);
      return;
    }
    this._sanitizeOptions(this._options);
  }

  // Perform the redirected request
  try {
    this._performRequest();
  }
  catch (cause) {
    this.emit("error", new RedirectionError({ cause: cause }));
  }
};

// Wraps the key/value object of protocols with redirect functionality
function wrap(protocols) {
  // Default settings
  var exports = {
    maxRedirects: 21,
    maxBodyLength: 10 * 1024 * 1024,
  };

  // Wrap each protocol
  var nativeProtocols = {};
  Object.keys(protocols).forEach(function (scheme) {
    var protocol = scheme + ":";
    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);

    // Executes a request, following redirects
    function request(input, options, callback) {
      // Parse parameters
      if (isString(input)) {
        var parsed;
        try {
          parsed = urlToOptions(new URL(input));
        }
        catch (err) {
          /* istanbul ignore next */
          parsed = url.parse(input);
        }
        if (!isString(parsed.protocol)) {
          throw new InvalidUrlError({ input });
        }
        input = parsed;
      }
      else if (URL && (input instanceof URL)) {
        input = urlToOptions(input);
      }
      else {
        callback = options;
        options = input;
        input = { protocol: protocol };
      }
      if (isFunction(options)) {
        callback = options;
        options = null;
      }

      // Set defaults
      options = Object.assign({
        maxRedirects: exports.maxRedirects,
        maxBodyLength: exports.maxBodyLength,
      }, input, options);
      options.nativeProtocols = nativeProtocols;
      if (!isString(options.host) && !isString(options.hostname)) {
        options.hostname = "::1";
      }

      assert.equal(options.protocol, protocol, "protocol mismatch");
      debug("options", options);
      return new RedirectableRequest(options, callback);
    }

    // Executes a GET request, following redirects
    function get(input, options, callback) {
      var wrappedRequest = wrappedProtocol.request(input, options, callback);
      wrappedRequest.end();
      return wrappedRequest;
    }

    // Expose the properties on the wrapped protocol
    Object.defineProperties(wrappedProtocol, {
      request: { value: request, configurable: true, enumerable: true, writable: true },
      get: { value: get, configurable: true, enumerable: true, writable: true },
    });
  });
  return exports;
}

/* istanbul ignore next */
function noop() { /* empty */ }

// from https://github.com/nodejs/node/blob/master/lib/internal/url.js
function urlToOptions(urlObject) {
  var options = {
    protocol: urlObject.protocol,
    hostname: urlObject.hostname.startsWith("[") ?
      /* istanbul ignore next */
      urlObject.hostname.slice(1, -1) :
      urlObject.hostname,
    hash: urlObject.hash,
    search: urlObject.search,
    pathname: urlObject.pathname,
    path: urlObject.pathname + urlObject.search,
    href: urlObject.href,
  };
  if (urlObject.port !== "") {
    options.port = Number(urlObject.port);
  }
  return options;
}

function removeMatchingHeaders(regex, headers) {
  var lastValue;
  for (var header in headers) {
    if (regex.test(header)) {
      lastValue = headers[header];
      delete headers[header];
    }
  }
  return (lastValue === null || typeof lastValue === "undefined") ?
    undefined : String(lastValue).trim();
}

function createErrorType(code, message, baseClass) {
  // Create constructor
  function CustomError(properties) {
    Error.captureStackTrace(this, this.constructor);
    Object.assign(this, properties || {});
    this.code = code;
    this.message = this.cause ? message + ": " + this.cause.message : message;
  }

  // Attach constructor and set default properties
  CustomError.prototype = new (baseClass || Error)();
  CustomError.prototype.constructor = CustomError;
  CustomError.prototype.name = "Error [" + code + "]";
  return CustomError;
}

function destroyRequest(request, error) {
  for (var event of events) {
    request.removeListener(event, eventHandlers[event]);
  }
  request.on("error", noop);
  request.destroy(error);
}

function isSubdomain(subdomain, domain) {
  assert(isString(subdomain) && isString(domain));
  var dot = subdomain.length - domain.length - 1;
  return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
}

function isString(value) {
  return typeof value === "string" || value instanceof String;
}

function isFunction(value) {
  return typeof value === "function";
}

function isBuffer(value) {
  return typeof value === "object" && ("length" in value);
}

// Exports
module.exports = wrap({ http: http, https: https });
module.exports.wrap = wrap;


/***/ }),

/***/ 8460:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var CombinedStream = __nccwpck_require__(675);
var util = __nccwpck_require__(3837);
var path = __nccwpck_require__(1017);
var http = __nccwpck_require__(3685);
var https = __nccwpck_require__(5687);
var parseUrl = (__nccwpck_require__(7310).parse);
var fs = __nccwpck_require__(7147);
var Stream = (__nccwpck_require__(2781).Stream);
var mime = __nccwpck_require__(2669);
var asynckit = __nccwpck_require__(3764);
var populate = __nccwpck_require__(9364);

// Public API
module.exports = FormData;

// make it a Stream
util.inherits(FormData, CombinedStream);

/**
 * Create readable "multipart/form-data" streams.
 * Can be used to submit forms
 * and file uploads to other web applications.
 *
 * @constructor
 * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream
 */
function FormData(options) {
  if (!(this instanceof FormData)) {
    return new FormData(options);
  }

  this._overheadLength = 0;
  this._valueLength = 0;
  this._valuesToMeasure = [];

  CombinedStream.call(this);

  options = options || {};
  for (var option in options) {
    this[option] = options[option];
  }
}

FormData.LINE_BREAK = '\r\n';
FormData.DEFAULT_CONTENT_TYPE = 'application/octet-stream';

FormData.prototype.append = function(field, value, options) {

  options = options || {};

  // allow filename as single option
  if (typeof options == 'string') {
    options = {filename: options};
  }

  var append = CombinedStream.prototype.append.bind(this);

  // all that streamy business can't handle numbers
  if (typeof value == 'number') {
    value = '' + value;
  }

  // https://github.com/felixge/node-form-data/issues/38
  if (util.isArray(value)) {
    // Please convert your array into string
    // the way web server expects it
    this._error(new Error('Arrays are not supported.'));
    return;
  }

  var header = this._multiPartHeader(field, value, options);
  var footer = this._multiPartFooter();

  append(header);
  append(value);
  append(footer);

  // pass along options.knownLength
  this._trackLength(header, value, options);
};

FormData.prototype._trackLength = function(header, value, options) {
  var valueLength = 0;

  // used w/ getLengthSync(), when length is known.
  // e.g. for streaming directly from a remote server,
  // w/ a known file a size, and not wanting to wait for
  // incoming file to finish to get its size.
  if (options.knownLength != null) {
    valueLength += +options.knownLength;
  } else if (Buffer.isBuffer(value)) {
    valueLength = value.length;
  } else if (typeof value === 'string') {
    valueLength = Buffer.byteLength(value);
  }

  this._valueLength += valueLength;

  // @check why add CRLF? does this account for custom/multiple CRLFs?
  this._overheadLength +=
    Buffer.byteLength(header) +
    FormData.LINE_BREAK.length;

  // empty or either doesn't have path or not an http response or not a stream
  if (!value || ( !value.path && !(value.readable && value.hasOwnProperty('httpVersion')) && !(value instanceof Stream))) {
    return;
  }

  // no need to bother with the length
  if (!options.knownLength) {
    this._valuesToMeasure.push(value);
  }
};

FormData.prototype._lengthRetriever = function(value, callback) {

  if (value.hasOwnProperty('fd')) {

    // take read range into a account
    // `end` = Infinity –> read file till the end
    //
    // TODO: Looks like there is bug in Node fs.createReadStream
    // it doesn't respect `end` options without `start` options
    // Fix it when node fixes it.
    // https://github.com/joyent/node/issues/7819
    if (value.end != undefined && value.end != Infinity && value.start != undefined) {

      // when end specified
      // no need to calculate range
      // inclusive, starts with 0
      callback(null, value.end + 1 - (value.start ? value.start : 0));

    // not that fast snoopy
    } else {
      // still need to fetch file size from fs
      fs.stat(value.path, function(err, stat) {

        var fileSize;

        if (err) {
          callback(err);
          return;
        }

        // update final size based on the range options
        fileSize = stat.size - (value.start ? value.start : 0);
        callback(null, fileSize);
      });
    }

  // or http response
  } else if (value.hasOwnProperty('httpVersion')) {
    callback(null, +value.headers['content-length']);

  // or request stream http://github.com/mikeal/request
  } else if (value.hasOwnProperty('httpModule')) {
    // wait till response come back
    value.on('response', function(response) {
      value.pause();
      callback(null, +response.headers['content-length']);
    });
    value.resume();

  // something else
  } else {
    callback('Unknown stream');
  }
};

FormData.prototype._multiPartHeader = function(field, value, options) {
  // custom header specified (as string)?
  // it becomes responsible for boundary
  // (e.g. to handle extra CRLFs on .NET servers)
  if (typeof options.header == 'string') {
    return options.header;
  }

  var contentDisposition = this._getContentDisposition(value, options);
  var contentType = this._getContentType(value, options);

  var contents = '';
  var headers  = {
    // add custom disposition as third element or keep it two elements if not
    'Content-Disposition': ['form-data', 'name="' + field + '"'].concat(contentDisposition || []),
    // if no content type. allow it to be empty array
    'Content-Type': [].concat(contentType || [])
  };

  // allow custom headers.
  if (typeof options.header == 'object') {
    populate(headers, options.header);
  }

  var header;
  for (var prop in headers) {
    if (!headers.hasOwnProperty(prop)) continue;
    header = headers[prop];

    // skip nullish headers.
    if (header == null) {
      continue;
    }

    // convert all headers to arrays.
    if (!Array.isArray(header)) {
      header = [header];
    }

    // add non-empty headers.
    if (header.length) {
      contents += prop + ': ' + header.join('; ') + FormData.LINE_BREAK;
    }
  }

  return '--' + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;
};

FormData.prototype._getContentDisposition = function(value, options) {

  var filename
    , contentDisposition
    ;

  if (typeof options.filepath === 'string') {
    // custom filepath for relative paths
    filename = path.normalize(options.filepath).replace(/\\/g, '/');
  } else if (options.filename || value.name || value.path) {
    // custom filename take precedence
    // formidable and the browser add a name property
    // fs- and request- streams have path property
    filename = path.basename(options.filename || value.name || value.path);
  } else if (value.readable && value.hasOwnProperty('httpVersion')) {
    // or try http response
    filename = path.basename(value.client._httpMessage.path || '');
  }

  if (filename) {
    contentDisposition = 'filename="' + filename + '"';
  }

  return contentDisposition;
};

FormData.prototype._getContentType = function(value, options) {

  // use custom content-type above all
  var contentType = options.contentType;

  // or try `name` from formidable, browser
  if (!contentType && value.name) {
    contentType = mime.lookup(value.name);
  }

  // or try `path` from fs-, request- streams
  if (!contentType && value.path) {
    contentType = mime.lookup(value.path);
  }

  // or if it's http-reponse
  if (!contentType && value.readable && value.hasOwnProperty('httpVersion')) {
    contentType = value.headers['content-type'];
  }

  // or guess it from the filepath or filename
  if (!contentType && (options.filepath || options.filename)) {
    contentType = mime.lookup(options.filepath || options.filename);
  }

  // fallback to the default content type if `value` is not simple value
  if (!contentType && typeof value == 'object') {
    contentType = FormData.DEFAULT_CONTENT_TYPE;
  }

  return contentType;
};

FormData.prototype._multiPartFooter = function() {
  return function(next) {
    var footer = FormData.LINE_BREAK;

    var lastPart = (this._streams.length === 0);
    if (lastPart) {
      footer += this._lastBoundary();
    }

    next(footer);
  }.bind(this);
};

FormData.prototype._lastBoundary = function() {
  return '--' + this.getBoundary() + '--' + FormData.LINE_BREAK;
};

FormData.prototype.getHeaders = function(userHeaders) {
  var header;
  var formHeaders = {
    'content-type': 'multipart/form-data; boundary=' + this.getBoundary()
  };

  for (header in userHeaders) {
    if (userHeaders.hasOwnProperty(header)) {
      formHeaders[header.toLowerCase()] = userHeaders[header];
    }
  }

  return formHeaders;
};

FormData.prototype.setBoundary = function(boundary) {
  this._boundary = boundary;
};

FormData.prototype.getBoundary = function() {
  if (!this._boundary) {
    this._generateBoundary();
  }

  return this._boundary;
};

FormData.prototype.getBuffer = function() {
  var dataBuffer = new Buffer.alloc( 0 );
  var boundary = this.getBoundary();

  // Create the form content. Add Line breaks to the end of data.
  for (var i = 0, len = this._streams.length; i < len; i++) {
    if (typeof this._streams[i] !== 'function') {

      // Add content to the buffer.
      if(Buffer.isBuffer(this._streams[i])) {
        dataBuffer = Buffer.concat( [dataBuffer, this._streams[i]]);
      }else {
        dataBuffer = Buffer.concat( [dataBuffer, Buffer.from(this._streams[i])]);
      }

      // Add break after content.
      if (typeof this._streams[i] !== 'string' || this._streams[i].substring( 2, boundary.length + 2 ) !== boundary) {
        dataBuffer = Buffer.concat( [dataBuffer, Buffer.from(FormData.LINE_BREAK)] );
      }
    }
  }

  // Add the footer and return the Buffer object.
  return Buffer.concat( [dataBuffer, Buffer.from(this._lastBoundary())] );
};

FormData.prototype._generateBoundary = function() {
  // This generates a 50 character boundary similar to those used by Firefox.
  // They are optimized for boyer-moore parsing.
  var boundary = '--------------------------';
  for (var i = 0; i < 24; i++) {
    boundary += Math.floor(Math.random() * 10).toString(16);
  }

  this._boundary = boundary;
};

// Note: getLengthSync DOESN'T calculate streams length
// As workaround one can calculate file size manually
// and add it as knownLength option
FormData.prototype.getLengthSync = function() {
  var knownLength = this._overheadLength + this._valueLength;

  // Don't get confused, there are 3 "internal" streams for each keyval pair
  // so it basically checks if there is any value added to the form
  if (this._streams.length) {
    knownLength += this._lastBoundary().length;
  }

  // https://github.com/form-data/form-data/issues/40
  if (!this.hasKnownLength()) {
    // Some async length retrievers are present
    // therefore synchronous length calculation is false.
    // Please use getLength(callback) to get proper length
    this._error(new Error('Cannot calculate proper length in synchronous way.'));
  }

  return knownLength;
};

// Public API to check if length of added values is known
// https://github.com/form-data/form-data/issues/196
// https://github.com/form-data/form-data/issues/262
FormData.prototype.hasKnownLength = function() {
  var hasKnownLength = true;

  if (this._valuesToMeasure.length) {
    hasKnownLength = false;
  }

  return hasKnownLength;
};

FormData.prototype.getLength = function(cb) {
  var knownLength = this._overheadLength + this._valueLength;

  if (this._streams.length) {
    knownLength += this._lastBoundary().length;
  }

  if (!this._valuesToMeasure.length) {
    process.nextTick(cb.bind(this, null, knownLength));
    return;
  }

  asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
    if (err) {
      cb(err);
      return;
    }

    values.forEach(function(length) {
      knownLength += length;
    });

    cb(null, knownLength);
  });
};

FormData.prototype.submit = function(params, cb) {
  var request
    , options
    , defaults = {method: 'post'}
    ;

  // parse provided url if it's string
  // or treat it as options object
  if (typeof params == 'string') {

    params = parseUrl(params);
    options = populate({
      port: params.port,
      path: params.pathname,
      host: params.hostname,
      protocol: params.protocol
    }, defaults);

  // use custom params
  } else {

    options = populate(params, defaults);
    // if no port provided use default one
    if (!options.port) {
      options.port = options.protocol == 'https:' ? 443 : 80;
    }
  }

  // put that good code in getHeaders to some use
  options.headers = this.getHeaders(params.headers);

  // https if specified, fallback to http in any other case
  if (options.protocol == 'https:') {
    request = https.request(options);
  } else {
    request = http.request(options);
  }

  // get content length and fire away
  this.getLength(function(err, length) {
    if (err && err !== 'Unknown stream') {
      this._error(err);
      return;
    }

    // add content length
    if (length) {
      request.setHeader('Content-Length', length);
    }

    this.pipe(request);
    if (cb) {
      var onResponse;

      var callback = function (error, responce) {
        request.removeListener('error', callback);
        request.removeListener('response', onResponse);

        return cb.call(this, error, responce);
      };

      onResponse = callback.bind(this, null);

      request.on('error', callback);
      request.on('response', onResponse);
    }
  }.bind(this));

  return request;
};

FormData.prototype._error = function(err) {
  if (!this.error) {
    this.error = err;
    this.pause();
    this.emit('error', err);
  }
};

FormData.prototype.toString = function () {
  return '[object FormData]';
};


/***/ }),

/***/ 9364:
/***/ ((module) => {

// populates missing values
module.exports = function(dst, src) {

  Object.keys(src).forEach(function(prop)
  {
    dst[prop] = dst[prop] || src[prop];
  });

  return dst;
};


/***/ }),

/***/ 9307:
/***/ ((module) => {

"use strict";


module.exports = (flag, argv = process.argv) => {
	const prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');
	const position = argv.indexOf(prefix + flag);
	const terminatorPosition = argv.indexOf('--');
	return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
};


/***/ }),

/***/ 3470:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";

const escapeStringRegexp = __nccwpck_require__(2866);
const ansiStyles = __nccwpck_require__(84);
const stdoutColor = (__nccwpck_require__(4065).stdout);

const template = __nccwpck_require__(5469);

const isSimpleWindowsTerm = process.platform === 'win32' && !(process.env.TERM || '').toLowerCase().startsWith('xterm');

// `supportsColor.level` → `ansiStyles.color[name]` mapping
const levelMapping = ['ansi', 'ansi', 'ansi256', 'ansi16m'];

// `color-convert` models to exclude from the Chalk API due to conflicts and such
const skipModels = new Set(['gray']);

const styles = Object.create(null);

function applyOptions(obj, options) {
	options = options || {};

	// Detect level if not set manually
	const scLevel = stdoutColor ? stdoutColor.level : 0;
	obj.level = options.level === undefined ? scLevel : options.level;
	obj.enabled = 'enabled' in options ? options.enabled : obj.level > 0;
}

function Chalk(options) {
	// We check for this.template here since calling `chalk.constructor()`
	// by itself will have a `this` of a previously constructed chalk object
	if (!this || !(this instanceof Chalk) || this.template) {
		const chalk = {};
		applyOptions(chalk, options);

		chalk.template = function () {
			const args = [].slice.call(arguments);
			return chalkTag.apply(null, [chalk.template].concat(args));
		};

		Object.setPrototypeOf(chalk, Chalk.prototype);
		Object.setPrototypeOf(chalk.template, chalk);

		chalk.template.constructor = Chalk;

		return chalk.template;
	}

	applyOptions(this, options);
}

// Use bright blue on Windows as the normal blue color is illegible
if (isSimpleWindowsTerm) {
	ansiStyles.blue.open = '\u001B[94m';
}

for (const key of Object.keys(ansiStyles)) {
	ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');

	styles[key] = {
		get() {
			const codes = ansiStyles[key];
			return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key);
		}
	};
}

styles.visible = {
	get() {
		return build.call(this, this._styles || [], true, 'visible');
	}
};

ansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), 'g');
for (const model of Object.keys(ansiStyles.color.ansi)) {
	if (skipModels.has(model)) {
		continue;
	}

	styles[model] = {
		get() {
			const level = this.level;
			return function () {
				const open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);
				const codes = {
					open,
					close: ansiStyles.color.close,
					closeRe: ansiStyles.color.closeRe
				};
				return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
			};
		}
	};
}

ansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), 'g');
for (const model of Object.keys(ansiStyles.bgColor.ansi)) {
	if (skipModels.has(model)) {
		continue;
	}

	const bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);
	styles[bgModel] = {
		get() {
			const level = this.level;
			return function () {
				const open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);
				const codes = {
					open,
					close: ansiStyles.bgColor.close,
					closeRe: ansiStyles.bgColor.closeRe
				};
				return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
			};
		}
	};
}

const proto = Object.defineProperties(() => {}, styles);

function build(_styles, _empty, key) {
	const builder = function () {
		return applyStyle.apply(builder, arguments);
	};

	builder._styles = _styles;
	builder._empty = _empty;

	const self = this;

	Object.defineProperty(builder, 'level', {
		enumerable: true,
		get() {
			return self.level;
		},
		set(level) {
			self.level = level;
		}
	});

	Object.defineProperty(builder, 'enabled', {
		enumerable: true,
		get() {
			return self.enabled;
		},
		set(enabled) {
			self.enabled = enabled;
		}
	});

	// See below for fix regarding invisible grey/dim combination on Windows
	builder.hasGrey = this.hasGrey || key === 'gray' || key === 'grey';

	// `__proto__` is used because we must return a function, but there is
	// no way to create a function with a different prototype
	builder.__proto__ = proto; // eslint-disable-line no-proto

	return builder;
}

function applyStyle() {
	// Support varags, but simply cast to string in case there's only one arg
	const args = arguments;
	const argsLen = args.length;
	let str = String(arguments[0]);

	if (argsLen === 0) {
		return '';
	}

	if (argsLen > 1) {
		// Don't slice `arguments`, it prevents V8 optimizations
		for (let a = 1; a < argsLen; a++) {
			str += ' ' + args[a];
		}
	}

	if (!this.enabled || this.level <= 0 || !str) {
		return this._empty ? '' : str;
	}

	// Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,
	// see https://github.com/chalk/chalk/issues/58
	// If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.
	const originalDim = ansiStyles.dim.open;
	if (isSimpleWindowsTerm && this.hasGrey) {
		ansiStyles.dim.open = '';
	}

	for (const code of this._styles.slice().reverse()) {
		// Replace any instances already present with a re-opening code
		// otherwise only the part of the string until said closing code
		// will be colored, and the rest will simply be 'plain'.
		str = code.open + str.replace(code.closeRe, code.open) + code.close;

		// Close the styling before a linebreak and reopen
		// after next line to fix a bleed issue on macOS
		// https://github.com/chalk/chalk/pull/92
		str = str.replace(/\r?\n/g, `${code.close}$&${code.open}`);
	}

	// Reset the original `dim` if we changed it to work around the Windows dimmed gray issue
	ansiStyles.dim.open = originalDim;

	return str;
}

function chalkTag(chalk, strings) {
	if (!Array.isArray(strings)) {
		// If chalk() was called by itself or with a string,
		// return the string itself as a string.
		return [].slice.call(arguments, 1).join(' ');
	}

	const args = [].slice.call(arguments, 2);
	const parts = [strings.raw[0]];

	for (let i = 1; i < strings.length; i++) {
		parts.push(String(args[i - 1]).replace(/[{}\\]/g, '\\$&'));
		parts.push(String(strings.raw[i]));
	}

	return template(chalk, parts.join(''));
}

Object.defineProperties(Chalk.prototype, styles);

module.exports = Chalk(); // eslint-disable-line new-cap
module.exports.supportsColor = stdoutColor;
module.exports["default"] = module.exports; // For TypeScript


/***/ }),

/***/ 84:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";
/* module decorator */ module = __nccwpck_require__.nmd(module);

const colorConvert = __nccwpck_require__(434);

const wrapAnsi16 = (fn, offset) => function () {
	const code = fn.apply(colorConvert, arguments);
	return `\u001B[${code + offset}m`;
};

const wrapAnsi256 = (fn, offset) => function () {
	const code = fn.apply(colorConvert, arguments);
	return `\u001B[${38 + offset};5;${code}m`;
};

const wrapAnsi16m = (fn, offset) => function () {
	const rgb = fn.apply(colorConvert, arguments);
	return `\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
};

function assembleStyles() {
	const codes = new Map();
	const styles = {
		modifier: {
			reset: [0, 0],
			// 21 isn't widely supported and 22 does the same thing
			bold: [1, 22],
			dim: [2, 22],
			italic: [3, 23],
			underline: [4, 24],
			inverse: [7, 27],
			hidden: [8, 28],
			strikethrough: [9, 29]
		},
		color: {
			black: [30, 39],
			red: [31, 39],
			green: [32, 39],
			yellow: [33, 39],
			blue: [34, 39],
			magenta: [35, 39],
			cyan: [36, 39],
			white: [37, 39],
			gray: [90, 39],

			// Bright color
			redBright: [91, 39],
			greenBright: [92, 39],
			yellowBright: [93, 39],
			blueBright: [94, 39],
			magentaBright: [95, 39],
			cyanBright: [96, 39],
			whiteBright: [97, 39]
		},
		bgColor: {
			bgBlack: [40, 49],
			bgRed: [41, 49],
			bgGreen: [42, 49],
			bgYellow: [43, 49],
			bgBlue: [44, 49],
			bgMagenta: [45, 49],
			bgCyan: [46, 49],
			bgWhite: [47, 49],

			// Bright color
			bgBlackBright: [100, 49],
			bgRedBright: [101, 49],
			bgGreenBright: [102, 49],
			bgYellowBright: [103, 49],
			bgBlueBright: [104, 49],
			bgMagentaBright: [105, 49],
			bgCyanBright: [106, 49],
			bgWhiteBright: [107, 49]
		}
	};

	// Fix humans
	styles.color.grey = styles.color.gray;

	for (const groupName of Object.keys(styles)) {
		const group = styles[groupName];

		for (const styleName of Object.keys(group)) {
			const style = group[styleName];

			styles[styleName] = {
				open: `\u001B[${style[0]}m`,
				close: `\u001B[${style[1]}m`
			};

			group[styleName] = styles[styleName];

			codes.set(style[0], style[1]);
		}

		Object.defineProperty(styles, groupName, {
			value: group,
			enumerable: false
		});

		Object.defineProperty(styles, 'codes', {
			value: codes,
			enumerable: false
		});
	}

	const ansi2ansi = n => n;
	const rgb2rgb = (r, g, b) => [r, g, b];

	styles.color.close = '\u001B[39m';
	styles.bgColor.close = '\u001B[49m';

	styles.color.ansi = {
		ansi: wrapAnsi16(ansi2ansi, 0)
	};
	styles.color.ansi256 = {
		ansi256: wrapAnsi256(ansi2ansi, 0)
	};
	styles.color.ansi16m = {
		rgb: wrapAnsi16m(rgb2rgb, 0)
	};

	styles.bgColor.ansi = {
		ansi: wrapAnsi16(ansi2ansi, 10)
	};
	styles.bgColor.ansi256 = {
		ansi256: wrapAnsi256(ansi2ansi, 10)
	};
	styles.bgColor.ansi16m = {
		rgb: wrapAnsi16m(rgb2rgb, 10)
	};

	for (let key of Object.keys(colorConvert)) {
		if (typeof colorConvert[key] !== 'object') {
			continue;
		}

		const suite = colorConvert[key];

		if (key === 'ansi16') {
			key = 'ansi';
		}

		if ('ansi16' in suite) {
			styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
			styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
		}

		if ('ansi256' in suite) {
			styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
			styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
		}

		if ('rgb' in suite) {
			styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
			styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
		}
	}

	return styles;
}

// Make the export immutable
Object.defineProperty(module, 'exports', {
	enumerable: true,
	get: assembleStyles
});


/***/ }),

/***/ 1023:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* MIT license */
var cssKeywords = __nccwpck_require__(8368);

// NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)

var reverseKeywords = {};
for (var key in cssKeywords) {
	if (cssKeywords.hasOwnProperty(key)) {
		reverseKeywords[cssKeywords[key]] = key;
	}
}

var convert = module.exports = {
	rgb: {channels: 3, labels: 'rgb'},
	hsl: {channels: 3, labels: 'hsl'},
	hsv: {channels: 3, labels: 'hsv'},
	hwb: {channels: 3, labels: 'hwb'},
	cmyk: {channels: 4, labels: 'cmyk'},
	xyz: {channels: 3, labels: 'xyz'},
	lab: {channels: 3, labels: 'lab'},
	lch: {channels: 3, labels: 'lch'},
	hex: {channels: 1, labels: ['hex']},
	keyword: {channels: 1, labels: ['keyword']},
	ansi16: {channels: 1, labels: ['ansi16']},
	ansi256: {channels: 1, labels: ['ansi256']},
	hcg: {channels: 3, labels: ['h', 'c', 'g']},
	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
	gray: {channels: 1, labels: ['gray']}
};

// hide .channels and .labels properties
for (var model in convert) {
	if (convert.hasOwnProperty(model)) {
		if (!('channels' in convert[model])) {
			throw new Error('missing channels property: ' + model);
		}

		if (!('labels' in convert[model])) {
			throw new Error('missing channel labels property: ' + model);
		}

		if (convert[model].labels.length !== convert[model].channels) {
			throw new Error('channel and label counts mismatch: ' + model);
		}

		var channels = convert[model].channels;
		var labels = convert[model].labels;
		delete convert[model].channels;
		delete convert[model].labels;
		Object.defineProperty(convert[model], 'channels', {value: channels});
		Object.defineProperty(convert[model], 'labels', {value: labels});
	}
}

convert.rgb.hsl = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var min = Math.min(r, g, b);
	var max = Math.max(r, g, b);
	var delta = max - min;
	var h;
	var s;
	var l;

	if (max === min) {
		h = 0;
	} else if (r === max) {
		h = (g - b) / delta;
	} else if (g === max) {
		h = 2 + (b - r) / delta;
	} else if (b === max) {
		h = 4 + (r - g) / delta;
	}

	h = Math.min(h * 60, 360);

	if (h < 0) {
		h += 360;
	}

	l = (min + max) / 2;

	if (max === min) {
		s = 0;
	} else if (l <= 0.5) {
		s = delta / (max + min);
	} else {
		s = delta / (2 - max - min);
	}

	return [h, s * 100, l * 100];
};

convert.rgb.hsv = function (rgb) {
	var rdif;
	var gdif;
	var bdif;
	var h;
	var s;

	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var v = Math.max(r, g, b);
	var diff = v - Math.min(r, g, b);
	var diffc = function (c) {
		return (v - c) / 6 / diff + 1 / 2;
	};

	if (diff === 0) {
		h = s = 0;
	} else {
		s = diff / v;
		rdif = diffc(r);
		gdif = diffc(g);
		bdif = diffc(b);

		if (r === v) {
			h = bdif - gdif;
		} else if (g === v) {
			h = (1 / 3) + rdif - bdif;
		} else if (b === v) {
			h = (2 / 3) + gdif - rdif;
		}
		if (h < 0) {
			h += 1;
		} else if (h > 1) {
			h -= 1;
		}
	}

	return [
		h * 360,
		s * 100,
		v * 100
	];
};

convert.rgb.hwb = function (rgb) {
	var r = rgb[0];
	var g = rgb[1];
	var b = rgb[2];
	var h = convert.rgb.hsl(rgb)[0];
	var w = 1 / 255 * Math.min(r, Math.min(g, b));

	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

	return [h, w * 100, b * 100];
};

convert.rgb.cmyk = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var c;
	var m;
	var y;
	var k;

	k = Math.min(1 - r, 1 - g, 1 - b);
	c = (1 - r - k) / (1 - k) || 0;
	m = (1 - g - k) / (1 - k) || 0;
	y = (1 - b - k) / (1 - k) || 0;

	return [c * 100, m * 100, y * 100, k * 100];
};

/**
 * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
 * */
function comparativeDistance(x, y) {
	return (
		Math.pow(x[0] - y[0], 2) +
		Math.pow(x[1] - y[1], 2) +
		Math.pow(x[2] - y[2], 2)
	);
}

convert.rgb.keyword = function (rgb) {
	var reversed = reverseKeywords[rgb];
	if (reversed) {
		return reversed;
	}

	var currentClosestDistance = Infinity;
	var currentClosestKeyword;

	for (var keyword in cssKeywords) {
		if (cssKeywords.hasOwnProperty(keyword)) {
			var value = cssKeywords[keyword];

			// Compute comparative distance
			var distance = comparativeDistance(rgb, value);

			// Check if its less, if so set as closest
			if (distance < currentClosestDistance) {
				currentClosestDistance = distance;
				currentClosestKeyword = keyword;
			}
		}
	}

	return currentClosestKeyword;
};

convert.keyword.rgb = function (keyword) {
	return cssKeywords[keyword];
};

convert.rgb.xyz = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;

	// assume sRGB
	r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
	g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
	b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

	var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
	var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
	var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

	return [x * 100, y * 100, z * 100];
};

convert.rgb.lab = function (rgb) {
	var xyz = convert.rgb.xyz(rgb);
	var x = xyz[0];
	var y = xyz[1];
	var z = xyz[2];
	var l;
	var a;
	var b;

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

	l = (116 * y) - 16;
	a = 500 * (x - y);
	b = 200 * (y - z);

	return [l, a, b];
};

convert.hsl.rgb = function (hsl) {
	var h = hsl[0] / 360;
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var t1;
	var t2;
	var t3;
	var rgb;
	var val;

	if (s === 0) {
		val = l * 255;
		return [val, val, val];
	}

	if (l < 0.5) {
		t2 = l * (1 + s);
	} else {
		t2 = l + s - l * s;
	}

	t1 = 2 * l - t2;

	rgb = [0, 0, 0];
	for (var i = 0; i < 3; i++) {
		t3 = h + 1 / 3 * -(i - 1);
		if (t3 < 0) {
			t3++;
		}
		if (t3 > 1) {
			t3--;
		}

		if (6 * t3 < 1) {
			val = t1 + (t2 - t1) * 6 * t3;
		} else if (2 * t3 < 1) {
			val = t2;
		} else if (3 * t3 < 2) {
			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
		} else {
			val = t1;
		}

		rgb[i] = val * 255;
	}

	return rgb;
};

convert.hsl.hsv = function (hsl) {
	var h = hsl[0];
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var smin = s;
	var lmin = Math.max(l, 0.01);
	var sv;
	var v;

	l *= 2;
	s *= (l <= 1) ? l : 2 - l;
	smin *= lmin <= 1 ? lmin : 2 - lmin;
	v = (l + s) / 2;
	sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

	return [h, sv * 100, v * 100];
};

convert.hsv.rgb = function (hsv) {
	var h = hsv[0] / 60;
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;
	var hi = Math.floor(h) % 6;

	var f = h - Math.floor(h);
	var p = 255 * v * (1 - s);
	var q = 255 * v * (1 - (s * f));
	var t = 255 * v * (1 - (s * (1 - f)));
	v *= 255;

	switch (hi) {
		case 0:
			return [v, t, p];
		case 1:
			return [q, v, p];
		case 2:
			return [p, v, t];
		case 3:
			return [p, q, v];
		case 4:
			return [t, p, v];
		case 5:
			return [v, p, q];
	}
};

convert.hsv.hsl = function (hsv) {
	var h = hsv[0];
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;
	var vmin = Math.max(v, 0.01);
	var lmin;
	var sl;
	var l;

	l = (2 - s) * v;
	lmin = (2 - s) * vmin;
	sl = s * vmin;
	sl /= (lmin <= 1) ? lmin : 2 - lmin;
	sl = sl || 0;
	l /= 2;

	return [h, sl * 100, l * 100];
};

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
convert.hwb.rgb = function (hwb) {
	var h = hwb[0] / 360;
	var wh = hwb[1] / 100;
	var bl = hwb[2] / 100;
	var ratio = wh + bl;
	var i;
	var v;
	var f;
	var n;

	// wh + bl cant be > 1
	if (ratio > 1) {
		wh /= ratio;
		bl /= ratio;
	}

	i = Math.floor(6 * h);
	v = 1 - bl;
	f = 6 * h - i;

	if ((i & 0x01) !== 0) {
		f = 1 - f;
	}

	n = wh + f * (v - wh); // linear interpolation

	var r;
	var g;
	var b;
	switch (i) {
		default:
		case 6:
		case 0: r = v; g = n; b = wh; break;
		case 1: r = n; g = v; b = wh; break;
		case 2: r = wh; g = v; b = n; break;
		case 3: r = wh; g = n; b = v; break;
		case 4: r = n; g = wh; b = v; break;
		case 5: r = v; g = wh; b = n; break;
	}

	return [r * 255, g * 255, b * 255];
};

convert.cmyk.rgb = function (cmyk) {
	var c = cmyk[0] / 100;
	var m = cmyk[1] / 100;
	var y = cmyk[2] / 100;
	var k = cmyk[3] / 100;
	var r;
	var g;
	var b;

	r = 1 - Math.min(1, c * (1 - k) + k);
	g = 1 - Math.min(1, m * (1 - k) + k);
	b = 1 - Math.min(1, y * (1 - k) + k);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.rgb = function (xyz) {
	var x = xyz[0] / 100;
	var y = xyz[1] / 100;
	var z = xyz[2] / 100;
	var r;
	var g;
	var b;

	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

	// assume sRGB
	r = r > 0.0031308
		? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
		: r * 12.92;

	g = g > 0.0031308
		? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
		: g * 12.92;

	b = b > 0.0031308
		? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
		: b * 12.92;

	r = Math.min(Math.max(0, r), 1);
	g = Math.min(Math.max(0, g), 1);
	b = Math.min(Math.max(0, b), 1);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.lab = function (xyz) {
	var x = xyz[0];
	var y = xyz[1];
	var z = xyz[2];
	var l;
	var a;
	var b;

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

	l = (116 * y) - 16;
	a = 500 * (x - y);
	b = 200 * (y - z);

	return [l, a, b];
};

convert.lab.xyz = function (lab) {
	var l = lab[0];
	var a = lab[1];
	var b = lab[2];
	var x;
	var y;
	var z;

	y = (l + 16) / 116;
	x = a / 500 + y;
	z = y - b / 200;

	var y2 = Math.pow(y, 3);
	var x2 = Math.pow(x, 3);
	var z2 = Math.pow(z, 3);
	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

	x *= 95.047;
	y *= 100;
	z *= 108.883;

	return [x, y, z];
};

convert.lab.lch = function (lab) {
	var l = lab[0];
	var a = lab[1];
	var b = lab[2];
	var hr;
	var h;
	var c;

	hr = Math.atan2(b, a);
	h = hr * 360 / 2 / Math.PI;

	if (h < 0) {
		h += 360;
	}

	c = Math.sqrt(a * a + b * b);

	return [l, c, h];
};

convert.lch.lab = function (lch) {
	var l = lch[0];
	var c = lch[1];
	var h = lch[2];
	var a;
	var b;
	var hr;

	hr = h / 360 * 2 * Math.PI;
	a = c * Math.cos(hr);
	b = c * Math.sin(hr);

	return [l, a, b];
};

convert.rgb.ansi16 = function (args) {
	var r = args[0];
	var g = args[1];
	var b = args[2];
	var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

	value = Math.round(value / 50);

	if (value === 0) {
		return 30;
	}

	var ansi = 30
		+ ((Math.round(b / 255) << 2)
		| (Math.round(g / 255) << 1)
		| Math.round(r / 255));

	if (value === 2) {
		ansi += 60;
	}

	return ansi;
};

convert.hsv.ansi16 = function (args) {
	// optimization here; we already know the value and don't need to get
	// it converted for us.
	return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
};

convert.rgb.ansi256 = function (args) {
	var r = args[0];
	var g = args[1];
	var b = args[2];

	// we use the extended greyscale palette here, with the exception of
	// black and white. normal palette only has 4 greyscale shades.
	if (r === g && g === b) {
		if (r < 8) {
			return 16;
		}

		if (r > 248) {
			return 231;
		}

		return Math.round(((r - 8) / 247) * 24) + 232;
	}

	var ansi = 16
		+ (36 * Math.round(r / 255 * 5))
		+ (6 * Math.round(g / 255 * 5))
		+ Math.round(b / 255 * 5);

	return ansi;
};

convert.ansi16.rgb = function (args) {
	var color = args % 10;

	// handle greyscale
	if (color === 0 || color === 7) {
		if (args > 50) {
			color += 3.5;
		}

		color = color / 10.5 * 255;

		return [color, color, color];
	}

	var mult = (~~(args > 50) + 1) * 0.5;
	var r = ((color & 1) * mult) * 255;
	var g = (((color >> 1) & 1) * mult) * 255;
	var b = (((color >> 2) & 1) * mult) * 255;

	return [r, g, b];
};

convert.ansi256.rgb = function (args) {
	// handle greyscale
	if (args >= 232) {
		var c = (args - 232) * 10 + 8;
		return [c, c, c];
	}

	args -= 16;

	var rem;
	var r = Math.floor(args / 36) / 5 * 255;
	var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
	var b = (rem % 6) / 5 * 255;

	return [r, g, b];
};

convert.rgb.hex = function (args) {
	var integer = ((Math.round(args[0]) & 0xFF) << 16)
		+ ((Math.round(args[1]) & 0xFF) << 8)
		+ (Math.round(args[2]) & 0xFF);

	var string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.hex.rgb = function (args) {
	var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
	if (!match) {
		return [0, 0, 0];
	}

	var colorString = match[0];

	if (match[0].length === 3) {
		colorString = colorString.split('').map(function (char) {
			return char + char;
		}).join('');
	}

	var integer = parseInt(colorString, 16);
	var r = (integer >> 16) & 0xFF;
	var g = (integer >> 8) & 0xFF;
	var b = integer & 0xFF;

	return [r, g, b];
};

convert.rgb.hcg = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var max = Math.max(Math.max(r, g), b);
	var min = Math.min(Math.min(r, g), b);
	var chroma = (max - min);
	var grayscale;
	var hue;

	if (chroma < 1) {
		grayscale = min / (1 - chroma);
	} else {
		grayscale = 0;
	}

	if (chroma <= 0) {
		hue = 0;
	} else
	if (max === r) {
		hue = ((g - b) / chroma) % 6;
	} else
	if (max === g) {
		hue = 2 + (b - r) / chroma;
	} else {
		hue = 4 + (r - g) / chroma + 4;
	}

	hue /= 6;
	hue %= 1;

	return [hue * 360, chroma * 100, grayscale * 100];
};

convert.hsl.hcg = function (hsl) {
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var c = 1;
	var f = 0;

	if (l < 0.5) {
		c = 2.0 * s * l;
	} else {
		c = 2.0 * s * (1.0 - l);
	}

	if (c < 1.0) {
		f = (l - 0.5 * c) / (1.0 - c);
	}

	return [hsl[0], c * 100, f * 100];
};

convert.hsv.hcg = function (hsv) {
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;

	var c = s * v;
	var f = 0;

	if (c < 1.0) {
		f = (v - c) / (1 - c);
	}

	return [hsv[0], c * 100, f * 100];
};

convert.hcg.rgb = function (hcg) {
	var h = hcg[0] / 360;
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	if (c === 0.0) {
		return [g * 255, g * 255, g * 255];
	}

	var pure = [0, 0, 0];
	var hi = (h % 1) * 6;
	var v = hi % 1;
	var w = 1 - v;
	var mg = 0;

	switch (Math.floor(hi)) {
		case 0:
			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
		case 1:
			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
		case 2:
			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
		case 3:
			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
		case 4:
			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
		default:
			pure[0] = 1; pure[1] = 0; pure[2] = w;
	}

	mg = (1.0 - c) * g;

	return [
		(c * pure[0] + mg) * 255,
		(c * pure[1] + mg) * 255,
		(c * pure[2] + mg) * 255
	];
};

convert.hcg.hsv = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	var v = c + g * (1.0 - c);
	var f = 0;

	if (v > 0.0) {
		f = c / v;
	}

	return [hcg[0], f * 100, v * 100];
};

convert.hcg.hsl = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	var l = g * (1.0 - c) + 0.5 * c;
	var s = 0;

	if (l > 0.0 && l < 0.5) {
		s = c / (2 * l);
	} else
	if (l >= 0.5 && l < 1.0) {
		s = c / (2 * (1 - l));
	}

	return [hcg[0], s * 100, l * 100];
};

convert.hcg.hwb = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;
	var v = c + g * (1.0 - c);
	return [hcg[0], (v - c) * 100, (1 - v) * 100];
};

convert.hwb.hcg = function (hwb) {
	var w = hwb[1] / 100;
	var b = hwb[2] / 100;
	var v = 1 - b;
	var c = v - w;
	var g = 0;

	if (c < 1) {
		g = (v - c) / (1 - c);
	}

	return [hwb[0], c * 100, g * 100];
};

convert.apple.rgb = function (apple) {
	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
};

convert.rgb.apple = function (rgb) {
	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
};

convert.gray.rgb = function (args) {
	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};

convert.gray.hsl = convert.gray.hsv = function (args) {
	return [0, 0, args[0]];
};

convert.gray.hwb = function (gray) {
	return [0, 100, gray[0]];
};

convert.gray.cmyk = function (gray) {
	return [0, 0, 0, gray[0]];
};

convert.gray.lab = function (gray) {
	return [gray[0], 0, 0];
};

convert.gray.hex = function (gray) {
	var val = Math.round(gray[0] / 100 * 255) & 0xFF;
	var integer = (val << 16) + (val << 8) + val;

	var string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.rgb.gray = function (rgb) {
	var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
	return [val / 255 * 100];
};


/***/ }),

/***/ 434:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var conversions = __nccwpck_require__(1023);
var route = __nccwpck_require__(337);

var convert = {};

var models = Object.keys(conversions);

function wrapRaw(fn) {
	var wrappedFn = function (args) {
		if (args === undefined || args === null) {
			return args;
		}

		if (arguments.length > 1) {
			args = Array.prototype.slice.call(arguments);
		}

		return fn(args);
	};

	// preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

function wrapRounded(fn) {
	var wrappedFn = function (args) {
		if (args === undefined || args === null) {
			return args;
		}

		if (arguments.length > 1) {
			args = Array.prototype.slice.call(arguments);
		}

		var result = fn(args);

		// we're assuming the result is an array here.
		// see notice in conversions.js; don't use box types
		// in conversion functions.
		if (typeof result === 'object') {
			for (var len = result.length, i = 0; i < len; i++) {
				result[i] = Math.round(result[i]);
			}
		}

		return result;
	};

	// preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

models.forEach(function (fromModel) {
	convert[fromModel] = {};

	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

	var routes = route(fromModel);
	var routeModels = Object.keys(routes);

	routeModels.forEach(function (toModel) {
		var fn = routes[toModel];

		convert[fromModel][toModel] = wrapRounded(fn);
		convert[fromModel][toModel].raw = wrapRaw(fn);
	});
});

module.exports = convert;


/***/ }),

/***/ 8368:
/***/ ((module) => {

"use strict";


module.exports = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};


/***/ }),

/***/ 337:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var conversions = __nccwpck_require__(1023);

/*
	this function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

function buildGraph() {
	var graph = {};
	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
	var models = Object.keys(conversions);

	for (var len = models.length, i = 0; i < len; i++) {
		graph[models[i]] = {
			// http://jsperf.com/1-vs-infinity
			// micro-opt, but this is simple.
			distance: -1,
			parent: null
		};
	}

	return graph;
}

// https://en.wikipedia.org/wiki/Breadth-first_search
function deriveBFS(fromModel) {
	var graph = buildGraph();
	var queue = [fromModel]; // unshift -> queue -> pop

	graph[fromModel].distance = 0;

	while (queue.length) {
		var current = queue.pop();
		var adjacents = Object.keys(conversions[current]);

		for (var len = adjacents.length, i = 0; i < len; i++) {
			var adjacent = adjacents[i];
			var node = graph[adjacent];

			if (node.distance === -1) {
				node.distance = graph[current].distance + 1;
				node.parent = current;
				queue.unshift(adjacent);
			}
		}
	}

	return graph;
}

function link(from, to) {
	return function (args) {
		return to(from(args));
	};
}

function wrapConversion(toModel, graph) {
	var path = [graph[toModel].parent, toModel];
	var fn = conversions[graph[toModel].parent][toModel];

	var cur = graph[toModel].parent;
	while (graph[cur].parent) {
		path.unshift(graph[cur].parent);
		fn = link(conversions[graph[cur].parent][cur], fn);
		cur = graph[cur].parent;
	}

	fn.conversion = path;
	return fn;
}

module.exports = function (fromModel) {
	var graph = deriveBFS(fromModel);
	var conversion = {};

	var models = Object.keys(graph);
	for (var len = models.length, i = 0; i < len; i++) {
		var toModel = models[i];
		var node = graph[toModel];

		if (node.parent === null) {
			// no possible conversion, or this node is the source model.
			continue;
		}

		conversion[toModel] = wrapConversion(toModel, graph);
	}

	return conversion;
};



/***/ }),

/***/ 4065:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";

const os = __nccwpck_require__(2037);
const hasFlag = __nccwpck_require__(7307);

const env = process.env;

let forceColor;
if (hasFlag('no-color') ||
	hasFlag('no-colors') ||
	hasFlag('color=false')) {
	forceColor = false;
} else if (hasFlag('color') ||
	hasFlag('colors') ||
	hasFlag('color=true') ||
	hasFlag('color=always')) {
	forceColor = true;
}
if ('FORCE_COLOR' in env) {
	forceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;
}

function translateLevel(level) {
	if (level === 0) {
		return false;
	}

	return {
		level,
		hasBasic: true,
		has256: level >= 2,
		has16m: level >= 3
	};
}

function supportsColor(stream) {
	if (forceColor === false) {
		return 0;
	}

	if (hasFlag('color=16m') ||
		hasFlag('color=full') ||
		hasFlag('color=truecolor')) {
		return 3;
	}

	if (hasFlag('color=256')) {
		return 2;
	}

	if (stream && !stream.isTTY && forceColor !== true) {
		return 0;
	}

	const min = forceColor ? 1 : 0;

	if (process.platform === 'win32') {
		// Node.js 7.5.0 is the first version of Node.js to include a patch to
		// libuv that enables 256 color output on Windows. Anything earlier and it
		// won't work. However, here we target Node.js 8 at minimum as it is an LTS
		// release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows
		// release that supports 256 colors. Windows 10 build 14931 is the first release
		// that supports 16m/TrueColor.
		const osRelease = os.release().split('.');
		if (
			Number(process.versions.node.split('.')[0]) >= 8 &&
			Number(osRelease[0]) >= 10 &&
			Number(osRelease[2]) >= 10586
		) {
			return Number(osRelease[2]) >= 14931 ? 3 : 2;
		}

		return 1;
	}

	if ('CI' in env) {
		if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
			return 1;
		}

		return min;
	}

	if ('TEAMCITY_VERSION' in env) {
		return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
	}

	if (env.COLORTERM === 'truecolor') {
		return 3;
	}

	if ('TERM_PROGRAM' in env) {
		const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

		switch (env.TERM_PROGRAM) {
			case 'iTerm.app':
				return version >= 3 ? 3 : 2;
			case 'Apple_Terminal':
				return 2;
			// No default
		}
	}

	if (/-256(color)?$/i.test(env.TERM)) {
		return 2;
	}

	if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
		return 1;
	}

	if ('COLORTERM' in env) {
		return 1;
	}

	if (env.TERM === 'dumb') {
		return min;
	}

	return min;
}

function getSupportLevel(stream) {
	const level = supportsColor(stream);
	return translateLevel(level);
}

module.exports = {
	supportsColor: getSupportLevel,
	stdout: getSupportLevel(process.stdout),
	stderr: getSupportLevel(process.stderr)
};


/***/ }),

/***/ 7307:
/***/ ((module) => {

"use strict";

module.exports = (flag, argv) => {
	argv = argv || process.argv;
	const prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');
	const pos = argv.indexOf(prefix + flag);
	const terminatorPos = argv.indexOf('--');
	return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
};


/***/ }),

/***/ 5469:
/***/ ((module) => {

"use strict";

const TEMPLATE_REGEX = /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
const ESCAPE_REGEX = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;

const ESCAPES = new Map([
	['n', '\n'],
	['r', '\r'],
	['t', '\t'],
	['b', '\b'],
	['f', '\f'],
	['v', '\v'],
	['0', '\0'],
	['\\', '\\'],
	['e', '\u001B'],
	['a', '\u0007']
]);

function unescape(c) {
	if ((c[0] === 'u' && c.length === 5) || (c[0] === 'x' && c.length === 3)) {
		return String.fromCharCode(parseInt(c.slice(1), 16));
	}

	return ESCAPES.get(c) || c;
}

function parseArguments(name, args) {
	const results = [];
	const chunks = args.trim().split(/\s*,\s*/g);
	let matches;

	for (const chunk of chunks) {
		if (!isNaN(chunk)) {
			results.push(Number(chunk));
		} else if ((matches = chunk.match(STRING_REGEX))) {
			results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, chr) => escape ? unescape(escape) : chr));
		} else {
			throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
		}
	}

	return results;
}

function parseStyle(style) {
	STYLE_REGEX.lastIndex = 0;

	const results = [];
	let matches;

	while ((matches = STYLE_REGEX.exec(style)) !== null) {
		const name = matches[1];

		if (matches[2]) {
			const args = parseArguments(name, matches[2]);
			results.push([name].concat(args));
		} else {
			results.push([name]);
		}
	}

	return results;
}

function buildStyle(chalk, styles) {
	const enabled = {};

	for (const layer of styles) {
		for (const style of layer.styles) {
			enabled[style[0]] = layer.inverse ? null : style.slice(1);
		}
	}

	let current = chalk;
	for (const styleName of Object.keys(enabled)) {
		if (Array.isArray(enabled[styleName])) {
			if (!(styleName in current)) {
				throw new Error(`Unknown Chalk style: ${styleName}`);
			}

			if (enabled[styleName].length > 0) {
				current = current[styleName].apply(current, enabled[styleName]);
			} else {
				current = current[styleName];
			}
		}
	}

	return current;
}

module.exports = (chalk, tmp) => {
	const styles = [];
	const chunks = [];
	let chunk = [];

	// eslint-disable-next-line max-params
	tmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {
		if (escapeChar) {
			chunk.push(unescape(escapeChar));
		} else if (style) {
			const str = chunk.join('');
			chunk = [];
			chunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str));
			styles.push({inverse, styles: parseStyle(style)});
		} else if (close) {
			if (styles.length === 0) {
				throw new Error('Found extraneous } in Chalk template literal');
			}

			chunks.push(buildStyle(chalk, styles)(chunk.join('')));
			chunk = [];
			styles.pop();
		} else {
			chunk.push(chr);
		}
	});

	chunks.push(chunk.join(''));

	if (styles.length > 0) {
		const errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\`}\`)`;
		throw new Error(errMsg);
	}

	return chunks.join('');
};


/***/ }),

/***/ 6698:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

const chalk = __nccwpck_require__(3470);
const get = __nccwpck_require__(387);

const defaultColors = {
  BRACE: 'gray',
  BRACKET: 'gray',
  COLON: 'gray',
  COMMA: 'gray',
  STRING_KEY: 'magenta',
  STRING_LITERAL: 'yellow',
  NUMBER_LITERAL: 'green',
  BOOLEAN_LITERAL: 'cyan',
  NULL_LITERAL: 'white'
};

exports.colorize = function colorize(tokens, options = {}) {
  const colors = options.colors || {};

  return tokens.reduce((acc, token) => {
    const colorKey = colors[token.type] || defaultColors[token.type];
    const colorFn = colorKey && colorKey[0] === '#' ? chalk.hex(colorKey) : get(chalk, colorKey);

    return acc + (colorFn ? colorFn(token.value) : token.value);
  }, '');
};


/***/ }),

/***/ 3260:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const lexer = __nccwpck_require__(9137);
const colorizer = __nccwpck_require__(6698);

module.exports = function colorizeJson(json, options) {
  return colorizer.colorize(lexer.getTokens(json, options), options);
};


/***/ }),

/***/ 9137:
/***/ ((__unused_webpack_module, exports) => {

const tokenTypes = [
  { regex: /^\s+/, tokenType: 'WHITESPACE' },
  { regex: /^[{}]/, tokenType: 'BRACE' },
  { regex: /^[[\]]/, tokenType: 'BRACKET' },
  { regex: /^:/, tokenType: 'COLON' },
  { regex: /^,/, tokenType: 'COMMA' },
  { regex: /^-?\d+(?:\.\d+)?(?:e[+-]?\d+)?/i, tokenType: 'NUMBER_LITERAL' },
  { regex: /^"(?:\\.|[^"\\])*"(?=\s*:)/, tokenType: 'STRING_KEY' },
  { regex: /^"(?:\\.|[^"\\])*"/, tokenType: 'STRING_LITERAL' },
  { regex: /^true|^false/, tokenType: 'BOOLEAN_LITERAL' },
  { regex: /^null/, tokenType: 'NULL_LITERAL' }
];

exports.getTokens = function getTokens(json, options = {}) {
  let input;

  if (options.pretty) {
    const inputObj = typeof json === 'string' ? JSON.parse(json) : json;
    input = JSON.stringify(inputObj, null, 2);
  } else {
    input = typeof json === 'string' ? json : JSON.stringify(json);
  }

  let tokens = [];
  let foundToken;

  do {
    foundToken = false;
    for (let i = 0; i < tokenTypes.length; i++) {
      const match = tokenTypes[i].regex.exec(input);
      if (match) {
        tokens.push({ type: tokenTypes[i].tokenType, value: match[0] });
        input = input.substring(match[0].length);
        foundToken = true;
        break;
      }
    }
  } while (_allTokensAnalyzed(input, foundToken));

  return tokens;
};

/**
 * @author Willian Magalhães Gonçalves
 * @description Are all tokens analyzed?
 * @param {*} input - Input
 * @param {*} foundToken - Found token
 * @returns {boolean} checkResult - Check result
 * @private
 */
function _allTokensAnalyzed(input, foundToken) {
  const safeInput = input || {};

  const inputLength = safeInput.length;
  return inputLength > 0 && foundToken;
}


/***/ }),

/***/ 387:
/***/ ((module) => {

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** `Object#toString` result references. */
var funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    symbolTag = '[object Symbol]';

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/,
    reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Symbol = root.Symbol,
    splice = arrayProto.splice;

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map'),
    nativeCreate = getNative(Object, 'create');

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = isKey(path, object) ? [path] : castPath(path);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value) {
  return isArray(value) ? value : stringToPath(value);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoize(function(string) {
  string = toString(string);

  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result);
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Assign cache to `_.memoize`.
memoize.Cache = MapCache;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;


/***/ }),

/***/ 334:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015-2022 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 */

module.exports = __nccwpck_require__(3765)


/***/ }),

/***/ 2669:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";
/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var db = __nccwpck_require__(334)
var extname = (__nccwpck_require__(1017).extname)

/**
 * Module variables.
 * @private
 */

var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/
var TEXT_TYPE_REGEXP = /^text\//i

/**
 * Module exports.
 * @public
 */

exports.charset = charset
exports.charsets = { lookup: charset }
exports.contentType = contentType
exports.extension = extension
exports.extensions = Object.create(null)
exports.lookup = lookup
exports.types = Object.create(null)

// Populate the extensions/types maps
populateMaps(exports.extensions, exports.types)

/**
 * Get the default charset for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */

function charset (type) {
  if (!type || typeof type !== 'string') {
    return false
  }

  // TODO: use media-typer
  var match = EXTRACT_TYPE_REGEXP.exec(type)
  var mime = match && db[match[1].toLowerCase()]

  if (mime && mime.charset) {
    return mime.charset
  }

  // default text/* to utf-8
  if (match && TEXT_TYPE_REGEXP.test(match[1])) {
    return 'UTF-8'
  }

  return false
}

/**
 * Create a full Content-Type header given a MIME type or extension.
 *
 * @param {string} str
 * @return {boolean|string}
 */

function contentType (str) {
  // TODO: should this even be in this module?
  if (!str || typeof str !== 'string') {
    return false
  }

  var mime = str.indexOf('/') === -1
    ? exports.lookup(str)
    : str

  if (!mime) {
    return false
  }

  // TODO: use content-type or other module
  if (mime.indexOf('charset') === -1) {
    var charset = exports.charset(mime)
    if (charset) mime += '; charset=' + charset.toLowerCase()
  }

  return mime
}

/**
 * Get the default extension for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */

function extension (type) {
  if (!type || typeof type !== 'string') {
    return false
  }

  // TODO: use media-typer
  var match = EXTRACT_TYPE_REGEXP.exec(type)

  // get extensions
  var exts = match && exports.extensions[match[1].toLowerCase()]

  if (!exts || !exts.length) {
    return false
  }

  return exts[0]
}

/**
 * Lookup the MIME type for a file path/extension.
 *
 * @param {string} path
 * @return {boolean|string}
 */

function lookup (path) {
  if (!path || typeof path !== 'string') {
    return false
  }

  // get the extension ("ext" or ".ext" or full path)
  var extension = extname('x.' + path)
    .toLowerCase()
    .substr(1)

  if (!extension) {
    return false
  }

  return exports.types[extension] || false
}

/**
 * Populate the extensions and types maps.
 * @private
 */

function populateMaps (extensions, types) {
  // source preference (least -> most)
  var preference = ['nginx', 'apache', undefined, 'iana']

  Object.keys(db).forEach(function forEachMimeType (type) {
    var mime = db[type]
    var exts = mime.extensions

    if (!exts || !exts.length) {
      return
    }

    // mime -> extensions
    extensions[type] = exts

    // extension -> mime
    for (var i = 0; i < exts.length; i++) {
      var extension = exts[i]

      if (types[extension]) {
        var from = preference.indexOf(db[types[extension]].source)
        var to = preference.indexOf(mime.source)

        if (types[extension] !== 'application/octet-stream' &&
          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {
          // skip the remapping
          continue
        }
      }

      // set the extension -> mime
      types[extension] = type
    }
  })
}


/***/ }),

/***/ 7626:
/***/ ((module) => {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}


/***/ }),

/***/ 7738:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";
// Top level file is just a mixin of submodules & constants


const { Deflate, deflate, deflateRaw, gzip } = __nccwpck_require__(574);

const { Inflate, inflate, inflateRaw, ungzip } = __nccwpck_require__(8995);

const constants = __nccwpck_require__(8508);

module.exports.Deflate = Deflate;
module.exports.deflate = deflate;
module.exports.deflateRaw = deflateRaw;
module.exports.gzip = gzip;
module.exports.Inflate = Inflate;
module.exports.inflate = inflate;
module.exports.inflateRaw = inflateRaw;
module.exports.ungzip = ungzip;
module.exports.constants = constants;


/***/ }),

/***/ 574:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";



const zlib_deflate = __nccwpck_require__(9879);
const utils        = __nccwpck_require__(8312);
const strings      = __nccwpck_require__(5702);
const msg          = __nccwpck_require__(2969);
const ZStream      = __nccwpck_require__(7078);

const toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_NO_FLUSH, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH,
  Z_OK, Z_STREAM_END,
  Z_DEFAULT_COMPRESSION,
  Z_DEFAULT_STRATEGY,
  Z_DEFLATED
} = __nccwpck_require__(8508);

/* ===========================================================================*/


/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overridden.
 **/

/**
 * Deflate.result -> Uint8Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/


/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * const deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
function Deflate(options) {
  this.options = utils.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY
  }, options || {});

  let opt = this.options;

  if (opt.raw && (opt.windowBits > 0)) {
    opt.windowBits = -opt.windowBits;
  }

  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
    opt.windowBits += 16;
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm = new ZStream();
  this.strm.avail_out = 0;

  let status = zlib_deflate.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );

  if (status !== Z_OK) {
    throw new Error(msg[status]);
  }

  if (opt.header) {
    zlib_deflate.deflateSetHeader(this.strm, opt.header);
  }

  if (opt.dictionary) {
    let dict;
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      // If we need to compress text, change encoding to utf8.
      dict = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }

    status = zlib_deflate.deflateSetDictionary(this.strm, dict);

    if (status !== Z_OK) {
      throw new Error(msg[status]);
    }

    this._dict_set = true;
  }
}

/**
 * Deflate#push(data[, flush_mode]) -> Boolean
 * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must
 * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending
 * buffers and call [[Deflate#onEnd]].
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate.prototype.push = function (data, flush_mode) {
  const strm = this.strm;
  const chunkSize = this.options.chunkSize;
  let status, _flush_mode;

  if (this.ended) { return false; }

  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  for (;;) {
    if (strm.avail_out === 0) {
      strm.output = new Uint8Array(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    // Make sure avail_out > 6 to avoid repeating markers
    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {
      this.onData(strm.output.subarray(0, strm.next_out));
      strm.avail_out = 0;
      continue;
    }

    status = zlib_deflate.deflate(strm, _flush_mode);

    // Ended => flush and finish
    if (status === Z_STREAM_END) {
      if (strm.next_out > 0) {
        this.onData(strm.output.subarray(0, strm.next_out));
      }
      status = zlib_deflate.deflateEnd(this.strm);
      this.onEnd(status);
      this.ended = true;
      return status === Z_OK;
    }

    // Flush if out buffer full
    if (strm.avail_out === 0) {
      this.onData(strm.output);
      continue;
    }

    // Flush if requested and has data
    if (_flush_mode > 0 && strm.next_out > 0) {
      this.onData(strm.output.subarray(0, strm.next_out));
      strm.avail_out = 0;
      continue;
    }

    if (strm.avail_in === 0) break;
  }

  return true;
};


/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array): output data.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH). By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK) {
    this.result = utils.flattenChunks(this.chunks);
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * deflate(data[, options]) -> Uint8Array
 * - data (Uint8Array|ArrayBuffer|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate(input, options) {
  const deflator = new Deflate(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }

  return deflator.result;
}


/**
 * deflateRaw(data[, options]) -> Uint8Array
 * - data (Uint8Array|ArrayBuffer|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function deflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return deflate(input, options);
}


/**
 * gzip(data[, options]) -> Uint8Array
 * - data (Uint8Array|ArrayBuffer|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function gzip(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate(input, options);
}


module.exports.Deflate = Deflate;
module.exports.deflate = deflate;
module.exports.deflateRaw = deflateRaw;
module.exports.gzip = gzip;
module.exports.constants = __nccwpck_require__(8508);


/***/ }),

/***/ 8995:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";



const zlib_inflate = __nccwpck_require__(2220);
const utils        = __nccwpck_require__(8312);
const strings      = __nccwpck_require__(5702);
const msg          = __nccwpck_require__(2969);
const ZStream      = __nccwpck_require__(7078);
const GZheader     = __nccwpck_require__(906);

const toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_NO_FLUSH, Z_FINISH,
  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR
} = __nccwpck_require__(8508);

/* ===========================================================================*/


/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overridden.
 **/

/**
 * Inflate.result -> Uint8Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
 * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * const inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
function Inflate(options) {
  this.options = utils.assign({
    chunkSize: 1024 * 64,
    windowBits: 15,
    to: ''
  }, options || {});

  const opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) { opt.windowBits = -15; }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new ZStream();
  this.strm.avail_out = 0;

  let status  = zlib_inflate.inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== Z_OK) {
    throw new Error(msg[status]);
  }

  this.header = new GZheader();

  zlib_inflate.inflateGetHeader(this.strm, this.header);

  // Setup dictionary
  if (opt.dictionary) {
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      opt.dictionary = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      opt.dictionary = new Uint8Array(opt.dictionary);
    }
    if (opt.raw) { //In raw mode we need to set the dictionary early
      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);
      if (status !== Z_OK) {
        throw new Error(msg[status]);
      }
    }
  }
}

/**
 * Inflate#push(data[, flush_mode]) -> Boolean
 * - data (Uint8Array|ArrayBuffer): input data
 * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE
 *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,
 *   `true` means Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. If end of stream detected,
 * [[Inflate#onEnd]] will be called.
 *
 * `flush_mode` is not needed for normal operation, because end of stream
 * detected automatically. You may try to use it for advanced things, but
 * this functionality was not tested.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate.prototype.push = function (data, flush_mode) {
  const strm = this.strm;
  const chunkSize = this.options.chunkSize;
  const dictionary = this.options.dictionary;
  let status, _flush_mode, last_avail_out;

  if (this.ended) return false;

  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;

  // Convert data if needed
  if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  for (;;) {
    if (strm.avail_out === 0) {
      strm.output = new Uint8Array(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = zlib_inflate.inflate(strm, _flush_mode);

    if (status === Z_NEED_DICT && dictionary) {
      status = zlib_inflate.inflateSetDictionary(strm, dictionary);

      if (status === Z_OK) {
        status = zlib_inflate.inflate(strm, _flush_mode);
      } else if (status === Z_DATA_ERROR) {
        // Replace code with more verbose
        status = Z_NEED_DICT;
      }
    }

    // Skip snyc markers if more data follows and not raw mode
    while (strm.avail_in > 0 &&
           status === Z_STREAM_END &&
           strm.state.wrap > 0 &&
           data[strm.next_in] !== 0)
    {
      zlib_inflate.inflateReset(strm);
      status = zlib_inflate.inflate(strm, _flush_mode);
    }

    switch (status) {
      case Z_STREAM_ERROR:
      case Z_DATA_ERROR:
      case Z_NEED_DICT:
      case Z_MEM_ERROR:
        this.onEnd(status);
        this.ended = true;
        return false;
    }

    // Remember real `avail_out` value, because we may patch out buffer content
    // to align utf8 strings boundaries.
    last_avail_out = strm.avail_out;

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === Z_STREAM_END) {

        if (this.options.to === 'string') {

          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

          let tail = strm.next_out - next_out_utf8;
          let utf8str = strings.buf2string(strm.output, next_out_utf8);

          // move tail & realign counters
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);

          this.onData(utf8str);

        } else {
          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));
        }
      }
    }

    // Must repeat iteration if out buffer is full
    if (status === Z_OK && last_avail_out === 0) continue;

    // Finalize if end of stream reached.
    if (status === Z_STREAM_END) {
      status = zlib_inflate.inflateEnd(this.strm);
      this.onEnd(status);
      this.ended = true;
      return true;
    }

    if (strm.avail_in === 0) break;
  }

  return true;
};


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|String): output data. When string output requested,
 *   each chunk will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH). By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * inflate(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako');
 * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));
 * let output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err) {
 *   console.log(err);
 * }
 * ```
 **/
function inflate(input, options) {
  const inflator = new Inflate(options);

  inflator.push(input);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) throw inflator.msg || msg[inflator.err];

  return inflator.result;
}


/**
 * inflateRaw(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return inflate(input, options);
}


/**
 * ungzip(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/


module.exports.Inflate = Inflate;
module.exports.inflate = inflate;
module.exports.inflateRaw = inflateRaw;
module.exports.ungzip = inflate;
module.exports.constants = __nccwpck_require__(8508);


/***/ }),

/***/ 8312:
/***/ ((module) => {

"use strict";



const _has = (obj, key) => {
  return Object.prototype.hasOwnProperty.call(obj, key);
};

module.exports.assign = function (obj /*from1, from2, from3, ...*/) {
  const sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    const source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (const p in source) {
      if (_has(source, p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// Join array of chunks to single array.
module.exports.flattenChunks = (chunks) => {
  // calculate data length
  let len = 0;

  for (let i = 0, l = chunks.length; i < l; i++) {
    len += chunks[i].length;
  }

  // join chunks
  const result = new Uint8Array(len);

  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {
    let chunk = chunks[i];
    result.set(chunk, pos);
    pos += chunk.length;
  }

  return result;
};


/***/ }),

/***/ 5702:
/***/ ((module) => {

"use strict";
// String encode/decode helpers



// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safari
//
let STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
const _utf8len = new Uint8Array(256);
for (let q = 0; q < 256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
module.exports.string2buf = (str) => {
  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {
    return new TextEncoder().encode(str);
  }

  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new Uint8Array(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
};

// Helper
const buf2binstring = (buf, len) => {
  // On Chrome, the arguments in a function call that are allowed is `65534`.
  // If the length of the buffer is smaller than that, we can use this optimization,
  // otherwise we will take a slower path.
  if (len < 65534) {
    if (buf.subarray && STR_APPLY_UIA_OK) {
      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));
    }
  }

  let result = '';
  for (let i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
};


// convert array to string
module.exports.buf2string = (buf, max) => {
  const len = max || buf.length;

  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {
    return new TextDecoder().decode(buf.subarray(0, max));
  }

  let i, out;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  const utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    let c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    let c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return buf2binstring(utf16buf, out);
};


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
module.exports.utf8border = (buf, max) => {

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  let pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means buffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};


/***/ }),

/***/ 1849:
/***/ ((module) => {

"use strict";


// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

const adler32 = (adler, buf, len, pos) => {
  let s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
};


module.exports = adler32;


/***/ }),

/***/ 8508:
/***/ ((module) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  Z_MEM_ERROR:       -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};


/***/ }),

/***/ 5015:
/***/ ((module) => {

"use strict";


// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// Use ordinary array, since untyped makes no boost here
const makeTable = () => {
  let c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
};

// Create table on load. Just 255 signed longs. Not a problem.
const crcTable = new Uint32Array(makeTable());


const crc32 = (crc, buf, len, pos) => {
  const t = crcTable;
  const end = pos + len;

  crc ^= -1;

  for (let i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
};


module.exports = crc32;


/***/ }),

/***/ 9879:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

const { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = __nccwpck_require__(1420);
const adler32 = __nccwpck_require__(1849);
const crc32   = __nccwpck_require__(5015);
const msg     = __nccwpck_require__(2969);

/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_NO_FLUSH, Z_PARTIAL_FLUSH, Z_FULL_FLUSH, Z_FINISH, Z_BLOCK,
  Z_OK, Z_STREAM_END, Z_STREAM_ERROR, Z_DATA_ERROR, Z_BUF_ERROR,
  Z_DEFAULT_COMPRESSION,
  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY,
  Z_UNKNOWN,
  Z_DEFLATED
} = __nccwpck_require__(8508);

/*============================================================================*/


const MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
const MAX_WBITS = 15;
/* 32K LZ77 window */
const DEF_MEM_LEVEL = 8;


const LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
const LITERALS      = 256;
/* number of literal bytes 0..255 */
const L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
const D_CODES       = 30;
/* number of distance codes */
const BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
const HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
const MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

const MIN_MATCH = 3;
const MAX_MATCH = 258;
const MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

const PRESET_DICT = 0x20;

const INIT_STATE    =  42;    /* zlib header -> BUSY_STATE */
//#ifdef GZIP
const GZIP_STATE    =  57;    /* gzip header -> BUSY_STATE | EXTRA_STATE */
//#endif
const EXTRA_STATE   =  69;    /* gzip extra block -> NAME_STATE */
const NAME_STATE    =  73;    /* gzip file name -> COMMENT_STATE */
const COMMENT_STATE =  91;    /* gzip comment -> HCRC_STATE */
const HCRC_STATE    = 103;    /* gzip header CRC -> BUSY_STATE */
const BUSY_STATE    = 113;    /* deflate -> FINISH_STATE */
const FINISH_STATE  = 666;    /* stream complete */

const BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
const BS_BLOCK_DONE     = 2; /* block flush performed */
const BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
const BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

const OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

const err = (strm, errorCode) => {
  strm.msg = msg[errorCode];
  return errorCode;
};

const rank = (f) => {
  return ((f) * 2) - ((f) > 4 ? 9 : 0);
};

const zero = (buf) => {
  let len = buf.length; while (--len >= 0) { buf[len] = 0; }
};

/* ===========================================================================
 * Slide the hash table when sliding the window down (could be avoided with 32
 * bit values at the expense of memory usage). We slide even when level == 0 to
 * keep the hash table consistent if we switch back to level > 0 later.
 */
const slide_hash = (s) => {
  let n, m;
  let p;
  let wsize = s.w_size;

  n = s.hash_size;
  p = n;
  do {
    m = s.head[--p];
    s.head[p] = (m >= wsize ? m - wsize : 0);
  } while (--n);
  n = wsize;
//#ifndef FASTEST
  p = n;
  do {
    m = s.prev[--p];
    s.prev[p] = (m >= wsize ? m - wsize : 0);
    /* If n is not on any hash chain, prev[n] is garbage but
     * its value will never be used.
     */
  } while (--n);
//#endif
};

/* eslint-disable new-cap */
let HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;
// This hash causes less collisions, https://github.com/nodeca/pako/issues/135
// But breaks binary compatibility
//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;
let HASH = HASH_ZLIB;


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output, except for
 * some deflate_stored() output, goes through this function so some
 * applications may wish to modify it to avoid allocating a large
 * strm->next_out buffer and copying into it. (See also read_buf()).
 */
const flush_pending = (strm) => {
  const s = strm.state;

  //_tr_flush_bits(s);
  let len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);
  strm.next_out  += len;
  s.pending_out  += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending      -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
};


const flush_block_only = (s, last) => {
  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
};


const put_byte = (s, b) => {
  s.pending_buf[s.pending++] = b;
};


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
const putShortMSB = (s, b) => {

  //  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
};


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
const read_buf = (strm, buf, start, size) => {

  let len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
};


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
const longest_match = (s, cur_match) => {

  let chain_length = s.max_chain_length;      /* max hash chain length */
  let scan = s.strstart; /* current string */
  let match;                       /* matched string */
  let len;                           /* length of current match */
  let best_len = s.prev_length;              /* best match length so far */
  let nice_match = s.nice_match;             /* stop if match long enough */
  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  const _win = s.window; // shortcut

  const wmask = s.w_mask;
  const prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  const strend = s.strstart + MAX_MATCH;
  let scan_end1  = _win[scan + best_len - 1];
  let scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
};


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
const fill_window = (s) => {

  const _w_size = s.w_size;
  let n, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;
      if (s.insert > s.strstart) {
        s.insert = s.strstart;
      }
      slide_hash(s);
      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    const curr = s.strstart + s.lookahead;
//    let init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
};

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 *
 * In case deflateParams() is used to later switch to a non-zero compression
 * level, s->matches (otherwise unused when storing) keeps track of the number
 * of hash table slides to perform. If s->matches is 1, then one hash table
 * slide will be done when switching. If s->matches is 2, the maximum value
 * allowed here, then the hash table will be cleared, since two or more slides
 * is the same as a clear.
 *
 * deflate_stored() is written to minimize the number of times an input byte is
 * copied. It is most efficient with large input and output buffers, which
 * maximizes the opportunites to have a single copy from next_in to next_out.
 */
const deflate_stored = (s, flush) => {

  /* Smallest worthy block size when not flushing or finishing. By default
   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For
   * large input and output buffers, the stored block size will be larger.
   */
  let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;

  /* Copy as many min_block or larger stored blocks directly to next_out as
   * possible. If flushing, copy the remaining available input to next_out as
   * stored blocks, if there is enough space.
   */
  let len, left, have, last = 0;
  let used = s.strm.avail_in;
  do {
    /* Set len to the maximum size block that we can copy directly with the
     * available input data and output space. Set left to how much of that
     * would be copied from what's left in the window.
     */
    len = 65535/* MAX_STORED */;     /* maximum deflate stored block length */
    have = (s.bi_valid + 42) >> 3;     /* number of header bytes */
    if (s.strm.avail_out < have) {         /* need room for header */
      break;
    }
      /* maximum stored block length that will fit in avail_out: */
    have = s.strm.avail_out - have;
    left = s.strstart - s.block_start;  /* bytes left in window */
    if (len > left + s.strm.avail_in) {
      len = left + s.strm.avail_in;   /* limit len to the input */
    }
    if (len > have) {
      len = have;             /* limit len to the output */
    }

    /* If the stored block would be less than min_block in length, or if
     * unable to copy all of the available input when flushing, then try
     * copying to the window and the pending buffer instead. Also don't
     * write an empty block when flushing -- deflate() does that.
     */
    if (len < min_block && ((len === 0 && flush !== Z_FINISH) ||
                        flush === Z_NO_FLUSH ||
                        len !== left + s.strm.avail_in)) {
      break;
    }

    /* Make a dummy stored block in pending to get the header bytes,
     * including any pending bits. This also updates the debugging counts.
     */
    last = flush === Z_FINISH && len === left + s.strm.avail_in ? 1 : 0;
    _tr_stored_block(s, 0, 0, last);

    /* Replace the lengths in the dummy stored block with len. */
    s.pending_buf[s.pending - 4] = len;
    s.pending_buf[s.pending - 3] = len >> 8;
    s.pending_buf[s.pending - 2] = ~len;
    s.pending_buf[s.pending - 1] = ~len >> 8;

    /* Write the stored block header bytes. */
    flush_pending(s.strm);

//#ifdef ZLIB_DEBUG
//    /* Update debugging counts for the data about to be copied. */
//    s->compressed_len += len << 3;
//    s->bits_sent += len << 3;
//#endif

    /* Copy uncompressed bytes from the window to next_out. */
    if (left) {
      if (left > len) {
        left = len;
      }
      //zmemcpy(s->strm->next_out, s->window + s->block_start, left);
      s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);
      s.strm.next_out += left;
      s.strm.avail_out -= left;
      s.strm.total_out += left;
      s.block_start += left;
      len -= left;
    }

    /* Copy uncompressed bytes directly from next_in to next_out, updating
     * the check value.
     */
    if (len) {
      read_buf(s.strm, s.strm.output, s.strm.next_out, len);
      s.strm.next_out += len;
      s.strm.avail_out -= len;
      s.strm.total_out += len;
    }
  } while (last === 0);

  /* Update the sliding window with the last s->w_size bytes of the copied
   * data, or append all of the copied data to the existing window if less
   * than s->w_size bytes were copied. Also update the number of bytes to
   * insert in the hash tables, in the event that deflateParams() switches to
   * a non-zero compression level.
   */
  used -= s.strm.avail_in;    /* number of input bytes directly copied */
  if (used) {
    /* If any input was used, then no unused input remains in the window,
     * therefore s->block_start == s->strstart.
     */
    if (used >= s.w_size) {  /* supplant the previous history */
      s.matches = 2;     /* clear hash */
      //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);
      s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);
      s.strstart = s.w_size;
      s.insert = s.strstart;
    }
    else {
      if (s.window_size - s.strstart <= used) {
        /* Slide the window down. */
        s.strstart -= s.w_size;
        //zmemcpy(s->window, s->window + s->w_size, s->strstart);
        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
        if (s.matches < 2) {
          s.matches++;   /* add a pending slide_hash() */
        }
        if (s.insert > s.strstart) {
          s.insert = s.strstart;
        }
      }
      //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);
      s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);
      s.strstart += used;
      s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;
    }
    s.block_start = s.strstart;
  }
  if (s.high_water < s.strstart) {
    s.high_water = s.strstart;
  }

  /* If the last block was written to next_out, then done. */
  if (last) {
    return BS_FINISH_DONE;
  }

  /* If flushing and all input has been consumed, then done. */
  if (flush !== Z_NO_FLUSH && flush !== Z_FINISH &&
    s.strm.avail_in === 0 && s.strstart === s.block_start) {
    return BS_BLOCK_DONE;
  }

  /* Fill the window with any remaining input. */
  have = s.window_size - s.strstart;
  if (s.strm.avail_in > have && s.block_start >= s.w_size) {
    /* Slide the window down. */
    s.block_start -= s.w_size;
    s.strstart -= s.w_size;
    //zmemcpy(s->window, s->window + s->w_size, s->strstart);
    s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
    if (s.matches < 2) {
      s.matches++;       /* add a pending slide_hash() */
    }
    have += s.w_size;      /* more space now */
    if (s.insert > s.strstart) {
      s.insert = s.strstart;
    }
  }
  if (have > s.strm.avail_in) {
    have = s.strm.avail_in;
  }
  if (have) {
    read_buf(s.strm, s.window, s.strstart, have);
    s.strstart += have;
    s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;
  }
  if (s.high_water < s.strstart) {
    s.high_water = s.strstart;
  }

  /* There was not enough avail_out to write a complete worthy or flushed
   * stored block to next_out. Write a stored block to pending instead, if we
   * have enough input for a worthy block, or if flushing and there is enough
   * room for the remaining input as a stored block in the pending buffer.
   */
  have = (s.bi_valid + 42) >> 3;     /* number of header bytes */
    /* maximum stored block length that will fit in pending: */
  have = s.pending_buf_size - have > 65535/* MAX_STORED */ ? 65535/* MAX_STORED */ : s.pending_buf_size - have;
  min_block = have > s.w_size ? s.w_size : have;
  left = s.strstart - s.block_start;
  if (left >= min_block ||
     ((left || flush === Z_FINISH) && flush !== Z_NO_FLUSH &&
     s.strm.avail_in === 0 && left <= have)) {
    len = left > have ? have : left;
    last = flush === Z_FINISH && s.strm.avail_in === 0 &&
         len === left ? 1 : 0;
    _tr_stored_block(s, s.block_start, len, last);
    s.block_start += len;
    flush_pending(s.strm);
  }

  /* We've done all we can with the available input and output. */
  return last ? BS_FINISH_STARTED : BS_NEED_MORE;
};


/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
const deflate_fast = (s, flush) => {

  let hash_head;        /* head of the hash chain */
  let bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
};

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
const deflate_slow = (s, flush) => {

  let hash_head;          /* head of hash chain */
  let bflush;              /* set if current block must be flushed */

  let max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
};


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
const deflate_rle = (s, flush) => {

  let bflush;            /* set if current block must be flushed */
  let prev;              /* byte at distance one to match */
  let scan, strend;      /* scan goes up to strend for length of run */

  const _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
};

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
const deflate_huff = (s, flush) => {

  let bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = _tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
};

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {

  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

const configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
const lm_init = (s) => {

  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
};


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);
  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);
  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new Uint16Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.sym_buf = 0;        /* buffer for distances and literals/lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.sym_next = 0;      /* running index in sym_buf */
  this.sym_end = 0;       /* symbol table full when sym_next reaches this */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


/* =========================================================================
 * Check for a valid deflate stream state. Return 0 if ok, 1 if not.
 */
const deflateStateCheck = (strm) => {

  if (!strm) {
    return 1;
  }
  const s = strm.state;
  if (!s || s.strm !== strm || (s.status !== INIT_STATE &&
//#ifdef GZIP
                                s.status !== GZIP_STATE &&
//#endif
                                s.status !== EXTRA_STATE &&
                                s.status !== NAME_STATE &&
                                s.status !== COMMENT_STATE &&
                                s.status !== HCRC_STATE &&
                                s.status !== BUSY_STATE &&
                                s.status !== FINISH_STATE)) {
    return 1;
  }
  return 0;
};


const deflateResetKeep = (strm) => {

  if (deflateStateCheck(strm)) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  const s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status =
//#ifdef GZIP
    s.wrap === 2 ? GZIP_STATE :
//#endif
    s.wrap ? INIT_STATE : BUSY_STATE;
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = -2;
  _tr_init(s);
  return Z_OK;
};


const deflateReset = (strm) => {

  const ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
};


const deflateSetHeader = (strm, head) => {

  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {
    return Z_STREAM_ERROR;
  }
  strm.state.gzhead = head;
  return Z_OK;
};


const deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {

  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  let wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED || (windowBits === 8 && wrap !== 1)) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  const s = new DeflateState();

  strm.state = s;
  s.strm = strm;
  s.status = INIT_STATE;     /* to pass state test in deflateReset() */

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new Uint8Array(s.w_size * 2);
  s.head = new Uint16Array(s.hash_size);
  s.prev = new Uint16Array(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  /* We overlay pending_buf and sym_buf. This works since the average size
   * for length/distance pairs over any compressed block is assured to be 31
   * bits or less.
   *
   * Analysis: The longest fixed codes are a length code of 8 bits plus 5
   * extra bits, for lengths 131 to 257. The longest fixed distance codes are
   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest
   * possible fixed-codes length/distance pair is then 31 bits total.
   *
   * sym_buf starts one-fourth of the way into pending_buf. So there are
   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol
   * in sym_buf is three bytes -- two for the distance and one for the
   * literal/length. As each symbol is consumed, the pointer to the next
   * sym_buf value to read moves forward three bytes. From that symbol, up to
   * 31 bits are written to pending_buf. The closest the written pending_buf
   * bits gets to the next sym_buf symbol to read is just before the last
   * code is written. At that time, 31*(n-2) bits have been written, just
   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at
   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1
   * symbols are written.) The closest the writing gets to what is unread is
   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and
   * can range from 128 to 32768.
   *
   * Therefore, at a minimum, there are 142 bits of space between what is
   * written and what is read in the overlain buffers, so the symbols cannot
   * be overwritten by the compressed data. That space is actually 139 bits,
   * due to the three-bit fixed-code block header.
   *
   * That covers the case where either Z_FIXED is specified, forcing fixed
   * codes, or when the use of fixed codes is chosen, because that choice
   * results in a smaller compressed block than dynamic codes. That latter
   * condition then assures that the above analysis also covers all dynamic
   * blocks. A dynamic-code block will only be chosen to be emitted if it has
   * fewer bits than a fixed-code block would for the same set of symbols.
   * Therefore its average symbol length is assured to be less than 31. So
   * the compressed data for a dynamic block also cannot overwrite the
   * symbols from which it is being constructed.
   */

  s.pending_buf_size = s.lit_bufsize * 4;
  s.pending_buf = new Uint8Array(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->sym_buf = s->pending_buf + s->lit_bufsize;
  s.sym_buf = s.lit_bufsize;

  //s->sym_end = (s->lit_bufsize - 1) * 3;
  s.sym_end = (s.lit_bufsize - 1) * 3;
  /* We avoid equality with lit_bufsize*3 because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
};

const deflateInit = (strm, level) => {

  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
};


/* ========================================================================= */
const deflate = (strm, flush) => {

  if (deflateStateCheck(strm) || flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  const s = strm.state;

  if (!strm.output ||
      (strm.avail_in !== 0 && !strm.input) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  const old_flush = s.last_flush;
  s.last_flush = flush;

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Write the header */
  if (s.status === INIT_STATE && s.wrap === 0) {
    s.status = BUSY_STATE;
  }
  if (s.status === INIT_STATE) {
    /* zlib header */
    let header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
    let level_flags = -1;

    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
      level_flags = 0;
    } else if (s.level < 6) {
      level_flags = 1;
    } else if (s.level === 6) {
      level_flags = 2;
    } else {
      level_flags = 3;
    }
    header |= (level_flags << 6);
    if (s.strstart !== 0) { header |= PRESET_DICT; }
    header += 31 - (header % 31);

    putShortMSB(s, header);

    /* Save the adler32 of the preset dictionary: */
    if (s.strstart !== 0) {
      putShortMSB(s, strm.adler >>> 16);
      putShortMSB(s, strm.adler & 0xffff);
    }
    strm.adler = 1; // adler32(0L, Z_NULL, 0);
    s.status = BUSY_STATE;

    /* Compression must start with an empty pending buffer */
    flush_pending(strm);
    if (s.pending !== 0) {
      s.last_flush = -1;
      return Z_OK;
    }
  }
//#ifdef GZIP
  if (s.status === GZIP_STATE) {
    /* gzip header */
    strm.adler = 0;  //crc32(0L, Z_NULL, 0);
    put_byte(s, 31);
    put_byte(s, 139);
    put_byte(s, 8);
    if (!s.gzhead) { // s->gzhead == Z_NULL
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, s.level === 9 ? 2 :
                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                   4 : 0));
      put_byte(s, OS_CODE);
      s.status = BUSY_STATE;

      /* Compression must start with an empty pending buffer */
      flush_pending(strm);
      if (s.pending !== 0) {
        s.last_flush = -1;
        return Z_OK;
      }
    }
    else {
      put_byte(s, (s.gzhead.text ? 1 : 0) +
                  (s.gzhead.hcrc ? 2 : 0) +
                  (!s.gzhead.extra ? 0 : 4) +
                  (!s.gzhead.name ? 0 : 8) +
                  (!s.gzhead.comment ? 0 : 16)
      );
      put_byte(s, s.gzhead.time & 0xff);
      put_byte(s, (s.gzhead.time >> 8) & 0xff);
      put_byte(s, (s.gzhead.time >> 16) & 0xff);
      put_byte(s, (s.gzhead.time >> 24) & 0xff);
      put_byte(s, s.level === 9 ? 2 :
                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                   4 : 0));
      put_byte(s, s.gzhead.os & 0xff);
      if (s.gzhead.extra && s.gzhead.extra.length) {
        put_byte(s, s.gzhead.extra.length & 0xff);
        put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
      }
      if (s.gzhead.hcrc) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
      }
      s.gzindex = 0;
      s.status = EXTRA_STATE;
    }
  }
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      let beg = s.pending;   /* start of bytes to update crc */
      let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;
      while (s.pending + left > s.pending_buf_size) {
        let copy = s.pending_buf_size - s.pending;
        // zmemcpy(s.pending_buf + s.pending,
        //    s.gzhead.extra + s.gzindex, copy);
        s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);
        s.pending = s.pending_buf_size;
        //--- HCRC_UPDATE(beg) ---//
        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        //---//
        s.gzindex += copy;
        flush_pending(strm);
        if (s.pending !== 0) {
          s.last_flush = -1;
          return Z_OK;
        }
        beg = 0;
        left -= copy;
      }
      // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility
      //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11
      let gzhead_extra = new Uint8Array(s.gzhead.extra);
      // zmemcpy(s->pending_buf + s->pending,
      //     s->gzhead->extra + s->gzindex, left);
      s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);
      s.pending += left;
      //--- HCRC_UPDATE(beg) ---//
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      //---//
      s.gzindex = 0;
    }
    s.status = NAME_STATE;
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      let beg = s.pending;   /* start of bytes to update crc */
      let val;
      do {
        if (s.pending === s.pending_buf_size) {
          //--- HCRC_UPDATE(beg) ---//
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          //---//
          flush_pending(strm);
          if (s.pending !== 0) {
            s.last_flush = -1;
            return Z_OK;
          }
          beg = 0;
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      //--- HCRC_UPDATE(beg) ---//
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      //---//
      s.gzindex = 0;
    }
    s.status = COMMENT_STATE;
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      let beg = s.pending;   /* start of bytes to update crc */
      let val;
      do {
        if (s.pending === s.pending_buf_size) {
          //--- HCRC_UPDATE(beg) ---//
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          //---//
          flush_pending(strm);
          if (s.pending !== 0) {
            s.last_flush = -1;
            return Z_OK;
          }
          beg = 0;
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      //--- HCRC_UPDATE(beg) ---//
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      //---//
    }
    s.status = HCRC_STATE;
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
        if (s.pending !== 0) {
          s.last_flush = -1;
          return Z_OK;
        }
      }
      put_byte(s, strm.adler & 0xff);
      put_byte(s, (strm.adler >> 8) & 0xff);
      strm.adler = 0; //crc32(0L, Z_NULL, 0);
    }
    s.status = BUSY_STATE;

    /* Compression must start with an empty pending buffer */
    flush_pending(strm);
    if (s.pending !== 0) {
      s.last_flush = -1;
      return Z_OK;
    }
  }
//#endif

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    let bstate = s.level === 0 ? deflate_stored(s, flush) :
                 s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
                 s.strategy === Z_RLE ? deflate_rle(s, flush) :
                 configuration_table[s.level].func(s, flush);

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        _tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        _tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
};


const deflateEnd = (strm) => {

  if (deflateStateCheck(strm)) {
    return Z_STREAM_ERROR;
  }

  const status = strm.state.status;

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
};


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
const deflateSetDictionary = (strm, dictionary) => {

  let dictLength = dictionary.length;

  if (deflateStateCheck(strm)) {
    return Z_STREAM_ERROR;
  }

  const s = strm.state;
  const wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    let tmpDict = new Uint8Array(s.w_size);
    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  const avail = strm.avail_in;
  const next = strm.next_in;
  const input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    let str = s.strstart;
    let n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
};


module.exports.deflateInit = deflateInit;
module.exports.deflateInit2 = deflateInit2;
module.exports.deflateReset = deflateReset;
module.exports.deflateResetKeep = deflateResetKeep;
module.exports.deflateSetHeader = deflateSetHeader;
module.exports.deflate = deflate;
module.exports.deflateEnd = deflateEnd;
module.exports.deflateSetDictionary = deflateSetDictionary;
module.exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
module.exports.deflateBound = deflateBound;
module.exports.deflateCopy = deflateCopy;
module.exports.deflateGetDictionary = deflateGetDictionary;
module.exports.deflateParams = deflateParams;
module.exports.deflatePending = deflatePending;
module.exports.deflatePrime = deflatePrime;
module.exports.deflateTune = deflateTune;
*/


/***/ }),

/***/ 906:
/***/ ((module) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function GZheader() {
  /* true if compressed data believed to be text */
  this.text       = 0;
  /* modification time */
  this.time       = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags     = 0;
  /* operating system */
  this.os         = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra      = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len  = 0; // Actually, we don't need it in JS,
                       // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name       = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment    = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc       = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done       = false;
}

module.exports = GZheader;


/***/ }),

/***/ 4250:
/***/ ((module) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// See state defs from inflate.js
const BAD = 16209;       /* got a data error -- remain here until reset */
const TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  let _in;                    /* local strm.input */
  let last;                   /* have enough input while in < last */
  let _out;                   /* local strm.output */
  let beg;                    /* inflate()'s initial strm.output */
  let end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  let dmax;                   /* maximum distance from zlib header */
//#endif
  let wsize;                  /* window size or zero if not using window */
  let whave;                  /* valid bytes in the window */
  let wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  let s_window;               /* allocated sliding window, if wsize != 0 */
  let hold;                   /* local strm.hold */
  let bits;                   /* local strm.bits */
  let lcode;                  /* local strm.lencode */
  let dcode;                  /* local strm.distcode */
  let lmask;                  /* mask for first level of length codes */
  let dmask;                  /* mask for first level of distance codes */
  let here;                   /* retrieved table entry */
  let op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  let len;                    /* match length, unused bytes */
  let dist;                   /* match distance */
  let from;                   /* where to copy match from */
  let from_source;


  let input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  const state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};


/***/ }),

/***/ 2220:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

const adler32       = __nccwpck_require__(1849);
const crc32         = __nccwpck_require__(5015);
const inflate_fast  = __nccwpck_require__(4250);
const inflate_table = __nccwpck_require__(5146);

const CODES = 0;
const LENS = 1;
const DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_FINISH, Z_BLOCK, Z_TREES,
  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR, Z_BUF_ERROR,
  Z_DEFLATED
} = __nccwpck_require__(8508);


/* STATES ====================================================================*/
/* ===========================================================================*/


const    HEAD = 16180;       /* i: waiting for magic header */
const    FLAGS = 16181;      /* i: waiting for method and flags (gzip) */
const    TIME = 16182;       /* i: waiting for modification time (gzip) */
const    OS = 16183;         /* i: waiting for extra flags and operating system (gzip) */
const    EXLEN = 16184;      /* i: waiting for extra length (gzip) */
const    EXTRA = 16185;      /* i: waiting for extra bytes (gzip) */
const    NAME = 16186;       /* i: waiting for end of file name (gzip) */
const    COMMENT = 16187;    /* i: waiting for end of comment (gzip) */
const    HCRC = 16188;       /* i: waiting for header crc (gzip) */
const    DICTID = 16189;    /* i: waiting for dictionary check value */
const    DICT = 16190;      /* waiting for inflateSetDictionary() call */
const        TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */
const        TYPEDO = 16192;    /* i: same, but skip check to exit inflate on new block */
const        STORED = 16193;    /* i: waiting for stored size (length and complement) */
const        COPY_ = 16194;     /* i/o: same as COPY below, but only first time in */
const        COPY = 16195;      /* i/o: waiting for input or output to copy stored block */
const        TABLE = 16196;     /* i: waiting for dynamic block table lengths */
const        LENLENS = 16197;   /* i: waiting for code length code lengths */
const        CODELENS = 16198;  /* i: waiting for length/lit and distance code lengths */
const            LEN_ = 16199;      /* i: same as LEN below, but only first time in */
const            LEN = 16200;       /* i: waiting for length/lit/eob code */
const            LENEXT = 16201;    /* i: waiting for length extra bits */
const            DIST = 16202;      /* i: waiting for distance code */
const            DISTEXT = 16203;   /* i: waiting for distance extra bits */
const            MATCH = 16204;     /* o: waiting for output space to copy string */
const            LIT = 16205;       /* o: waiting for output space to write literal */
const    CHECK = 16206;     /* i: waiting for 32-bit check value */
const    LENGTH = 16207;    /* i: waiting for 32-bit length (gzip) */
const    DONE = 16208;      /* finished check, done -- remain here until reset */
const    BAD = 16209;       /* got a data error -- remain here until reset */
const    MEM = 16210;       /* got an inflate() memory error -- remain here until reset */
const    SYNC = 16211;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



const ENOUGH_LENS = 852;
const ENOUGH_DISTS = 592;
//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

const MAX_WBITS = 15;
/* 32K LZ77 window */
const DEF_WBITS = MAX_WBITS;


const zswap32 = (q) => {

  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
};


function InflateState() {
  this.strm = null;           /* pointer back to this zlib stream */
  this.mode = 0;              /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip,
                                 bit 2 true to validate check value */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib), or
                                 -1 if raw or no header yet */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new Uint16Array(320); /* temporary storage for code lengths */
  this.work = new Uint16Array(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}


const inflateStateCheck = (strm) => {

  if (!strm) {
    return 1;
  }
  const state = strm.state;
  if (!state || state.strm !== strm ||
    state.mode < HEAD || state.mode > SYNC) {
    return 1;
  }
  return 0;
};


const inflateResetKeep = (strm) => {

  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }
  const state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.flags = -1;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);
  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
};


const inflateReset = (strm) => {

  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }
  const state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

};


const inflateReset2 = (strm, windowBits) => {
  let wrap;

  /* get the state */
  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }
  const state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 5;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
};


const inflateInit2 = (strm, windowBits) => {

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  const state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.strm = strm;
  state.window = null/*Z_NULL*/;
  state.mode = HEAD;     /* to pass state test in inflateReset2() */
  const ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
};


const inflateInit = (strm) => {

  return inflateInit2(strm, DEF_WBITS);
};


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
let virgin = true;

let lenfix, distfix; // We have no pointers in JS, so keep tables separate


const fixedtables = (state) => {

  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    lenfix = new Int32Array(512);
    distfix = new Int32Array(32);

    /* literal/length table */
    let sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
};


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
const updatewindow = (strm, src, end, copy) => {

  let dist;
  const state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new Uint8Array(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    state.window.set(src.subarray(end - state.wsize, end), 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      state.window.set(src.subarray(end - copy, end), 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
};


const inflate = (strm, flush) => {

  let state;
  let input, output;          // input/output buffers
  let next;                   /* next input INDEX */
  let put;                    /* next output INDEX */
  let have, left;             /* available input and output */
  let hold;                   /* bit buffer */
  let bits;                   /* bits in bit buffer */
  let _in, _out;              /* save starting available input and output */
  let copy;                   /* number of stored or match bytes to copy */
  let from;                   /* where to copy match bytes from */
  let from_source;
  let here = 0;               /* current decoding table entry */
  let here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //let last;                   /* parent table entry */
  let last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  let len;                    /* length to copy for repeats, bits to drop */
  let ret;                    /* return code */
  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */
  let opts;

  let n; // temporary variable for NEED_BITS

  const order = /* permutation of code lengths */
    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);


  if (inflateStateCheck(strm) || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        }
        //=== NEEDBITS(16);
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
          if (state.wbits === 0) {
            state.wbits = 15;
          }
          state.check = 0/*crc32(0L, Z_NULL, 0)*/;
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//

          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = FLAGS;
          break;
        }
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) ||   /* check if zlib header allowed */
          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD;
          break;
        }
        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        len = (hold & 0x0f)/*BITS(4)*/ + 8;
        if (state.wbits === 0) {
          state.wbits = len;
        }
        if (len > 15 || len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD;
          break;
        }

        // !!! pako patch. Force use `options.windowBits` if passed.
        // Required to always use max window size by default.
        state.dmax = 1 << state.wbits;
        //state.dmax = 1 << len;

        state.flags = 0;               /* indicate zlib header */
        //Tracev((stderr, "inflate:   zlib header ok\n"));
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = hold & 0x200 ? DICTID : TYPE;
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        break;
      case FLAGS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD;
          break;
        }
        if (state.head) {
          state.head.text = ((hold >> 8) & 1);
        }
        if ((state.flags & 0x0200) && (state.wrap & 4)) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = TIME;
        /* falls through */
      case TIME:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.time = hold;
        }
        if ((state.flags & 0x0200) && (state.wrap & 4)) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          hbuf[2] = (hold >>> 16) & 0xff;
          hbuf[3] = (hold >>> 24) & 0xff;
          state.check = crc32(state.check, hbuf, 4, 0);
          //===
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = OS;
        /* falls through */
      case OS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.xflags = (hold & 0xff);
          state.head.os = (hold >> 8);
        }
        if ((state.flags & 0x0200) && (state.wrap & 4)) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = EXLEN;
        /* falls through */
      case EXLEN:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if ((state.flags & 0x0200) && (state.wrap & 4)) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        else if (state.head) {
          state.head.extra = null/*Z_NULL*/;
        }
        state.mode = EXTRA;
        /* falls through */
      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) { copy = have; }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                // Use untyped array for more convenient processing later
                state.head.extra = new Uint8Array(state.head.extra_len);
              }
              state.head.extra.set(
                input.subarray(
                  next,
                  // extra field is limited to 65536 bytes
                  // - no need for additional size check
                  next + copy
                ),
                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                len
              );
              //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }
            if ((state.flags & 0x0200) && (state.wrap & 4)) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) { break inf_leave; }
        }
        state.length = 0;
        state.mode = NAME;
        /* falls through */
      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.name_max*/)) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);

          if ((state.flags & 0x0200) && (state.wrap & 4)) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT;
        /* falls through */
      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.comm_max*/)) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if ((state.flags & 0x0200) && (state.wrap & 4)) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC;
        /* falls through */
      case HCRC:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if ((state.wrap & 4) && hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        if (state.head) {
          state.head.hcrc = ((state.flags >> 9) & 1);
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE;
        break;
      case DICTID:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        strm.adler = state.check = zswap32(hold);
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = DICT;
        /* falls through */
      case DICT:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          return Z_NEED_DICT;
        }
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = TYPE;
        /* falls through */
      case TYPE:
        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case TYPEDO:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          state.mode = CHECK;
          break;
        }
        //=== NEEDBITS(3); */
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.last = (hold & 0x01)/*BITS(1)*/;
        //--- DROPBITS(1) ---//
        hold >>>= 1;
        bits -= 1;
        //---//

        switch ((hold & 0x03)/*BITS(2)*/) {
          case 0:                             /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED;
            break;
          case 1:                             /* fixed block */
            fixedtables(state);
            //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = LEN_;             /* decode codes */
            if (flush === Z_TREES) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
              break inf_leave;
            }
            break;
          case 2:                             /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD;
        }
        //--- DROPBITS(2) ---//
        hold >>>= 2;
        bits -= 2;
        //---//
        break;
      case STORED:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD;
          break;
        }
        state.length = hold & 0xffff;
        //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = COPY_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case COPY_:
        state.mode = COPY;
        /* falls through */
      case COPY:
        copy = state.length;
        if (copy) {
          if (copy > have) { copy = have; }
          if (copy > left) { copy = left; }
          if (copy === 0) { break inf_leave; }
          //--- zmemcpy(put, next, copy); ---
          output.set(input.subarray(next, next + copy), put);
          //---//
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        //Tracev((stderr, "inflate:       stored end\n"));
        state.mode = TYPE;
        break;
      case TABLE:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
//#ifndef PKZIP_BUG_WORKAROUND
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));
        state.have = 0;
        state.mode = LENLENS;
        /* falls through */
      case LENLENS:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
          //--- DROPBITS(3) ---//
          hold >>>= 3;
          bits -= 3;
          //---//
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table
        state.lencode = state.lendyn;
        state.lenbits = 7;

        opts = { bits: state.lenbits };
        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;

        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, "inflate:       code lengths ok\n"));
        state.have = 0;
        state.mode = CODELENS;
        /* falls through */
      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.lens[state.have++] = here_val;
          }
          else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03);//BITS(2);
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
            }
            else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 3 + (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 11 + (hold & 0x7f);//BITS(7);
              //--- DROPBITS(7) ---//
              hold >>>= 7;
              bits -= 7;
              //---//
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }

        /* handle error breaks in while */
        if (state.mode === BAD) { break; }

        /* check for end-of-block code (better have one) */
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD;
          break;
        }

        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
        state.lenbits = 9;

        opts = { bits: state.lenbits };
        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.lenbits = opts.bits;
        // state.lencode = state.next;

        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD;
          break;
        }

        state.distbits = 6;
        //state.distcode.copy(state.codes);
        // Switch to use dynamic table
        state.distcode = state.distdyn;
        opts = { bits: state.distbits };
        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.distbits = opts.bits;
        // state.distcode = state.next;

        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, 'inflate:       codes ok\n'));
        state.mode = LEN_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case LEN_:
        state.mode = LEN;
        /* falls through */
      case LEN:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          inflate_fast(strm, _out);
          //--- LOAD() ---
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          //---

          if (state.mode === TYPE) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT;
          break;
        }
        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT;
        /* falls through */
      case LENEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //Tracevv((stderr, "inflate:         length %u\n", state.length));
        state.was = state.length;
        state.mode = DIST;
        /* falls through */
      case DIST:
        for (;;) {
          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD;
          break;
        }
        state.offset = here_val;
        state.extra = (here_op) & 15;
        state.mode = DISTEXT;
        /* falls through */
      case DISTEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
//#ifdef INFLATE_STRICT
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
        state.mode = MATCH;
        /* falls through */
      case MATCH:
        if (left === 0) { break inf_leave; }
        copy = _out - left;
        if (state.offset > copy) {         /* copy from window */
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          }
          else {
            from = state.wnext - copy;
          }
          if (copy > state.length) { copy = state.length; }
          from_source = state.window;
        }
        else {                              /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) { copy = left; }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) { state.mode = LEN; }
        break;
      case LIT:
        if (left === 0) { break inf_leave; }
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;
      case CHECK:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            // Use '|' instead of '+' to make sure that result is signed
            hold |= input[next++] << bits;
            bits += 8;
          }
          //===//
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if ((state.wrap & 4) && _out) {
            strm.adler = state.check =
                /*UPDATE_CHECK(state.check, put - _out, _out);*/
                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

          }
          _out = left;
          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
          if ((state.wrap & 4) && (state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }
        state.mode = LENGTH;
        /* falls through */
      case LENGTH:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if ((state.wrap & 4) && hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }
        state.mode = DONE;
        /* falls through */
      case DONE:
        ret = Z_STREAM_END;
        break inf_leave;
      case BAD:
        ret = Z_DATA_ERROR;
        break inf_leave;
      case MEM:
        return Z_MEM_ERROR;
      case SYNC:
        /* falls through */
      default:
        return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if ((state.wrap & 4) && _out) {
    strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
};


const inflateEnd = (strm) => {

  if (inflateStateCheck(strm)) {
    return Z_STREAM_ERROR;
  }

  let state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
};


const inflateGetHeader = (strm, head) => {

  /* check state */
  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }
  const state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
};


const inflateSetDictionary = (strm, dictionary) => {
  const dictLength = dictionary.length;

  let state;
  let dictid;
  let ret;

  /* check state */
  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
};


module.exports.inflateReset = inflateReset;
module.exports.inflateReset2 = inflateReset2;
module.exports.inflateResetKeep = inflateResetKeep;
module.exports.inflateInit = inflateInit;
module.exports.inflateInit2 = inflateInit2;
module.exports.inflate = inflate;
module.exports.inflateEnd = inflateEnd;
module.exports.inflateGetHeader = inflateGetHeader;
module.exports.inflateSetDictionary = inflateSetDictionary;
module.exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
module.exports.inflateCodesUsed = inflateCodesUsed;
module.exports.inflateCopy = inflateCopy;
module.exports.inflateGetDictionary = inflateGetDictionary;
module.exports.inflateMark = inflateMark;
module.exports.inflatePrime = inflatePrime;
module.exports.inflateSync = inflateSync;
module.exports.inflateSyncPoint = inflateSyncPoint;
module.exports.inflateUndermine = inflateUndermine;
module.exports.inflateValidate = inflateValidate;
*/


/***/ }),

/***/ 5146:
/***/ ((module) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

const MAXBITS = 15;
const ENOUGH_LENS = 852;
const ENOUGH_DISTS = 592;
//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

const CODES = 0;
const LENS = 1;
const DISTS = 2;

const lbase = new Uint16Array([ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
]);

const lext = new Uint8Array([ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
]);

const dbase = new Uint16Array([ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
]);

const dext = new Uint8Array([ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
]);

const inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>
{
  const bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  let len = 0;               /* a code's length in bits */
  let sym = 0;               /* index of code symbols */
  let min = 0, max = 0;          /* minimum and maximum code lengths */
  let root = 0;              /* number of index bits for root table */
  let curr = 0;              /* number of index bits for current table */
  let drop = 0;              /* code bits to drop for sub-table */
  let left = 0;                   /* number of prefix codes available */
  let used = 0;              /* code entries in table used */
  let huff = 0;              /* Huffman code */
  let incr;              /* for incrementing code, index */
  let fill;              /* index for replicating entries */
  let low;               /* low bits for current root entry */
  let mask;              /* mask for low root bits */
  let next;             /* next available space in table */
  let base = null;     /* base value table to use */
//  let shoextra;    /* extra bits table to use */
  let match;                  /* use base and extra for symbol >= match */
  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  let extra = null;

  let here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    match = 20;

  } else if (type === LENS) {
    base = lbase;
    extra = lext;
    match = 257;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    match = 0;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] + 1 < match) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] >= match) {
      here_op = extra[work[sym] - match];
      here_val = base[work[sym] - match];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};


module.exports = inflate_table;


/***/ }),

/***/ 2969:
/***/ ((module) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};


/***/ }),

/***/ 1420:
/***/ ((module) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

/* eslint-disable space-unary-ops */

/* Public constants ==========================================================*/
/* ===========================================================================*/


//const Z_FILTERED          = 1;
//const Z_HUFFMAN_ONLY      = 2;
//const Z_RLE               = 3;
const Z_FIXED               = 4;
//const Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
const Z_BINARY              = 0;
const Z_TEXT                = 1;
//const Z_ASCII             = 1; // = Z_TEXT
const Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

const STORED_BLOCK = 0;
const STATIC_TREES = 1;
const DYN_TREES    = 2;
/* The three kinds of block type */

const MIN_MATCH    = 3;
const MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

const LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

const LITERALS      = 256;
/* number of literal bytes 0..255 */

const L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

const D_CODES       = 30;
/* number of distance codes */

const BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

const HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

const MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

const Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

const MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

const END_BLOCK   = 256;
/* end of block literal code */

const REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

const REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

const REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
const extra_lbits =   /* extra bits for each length code */
  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);

const extra_dbits =   /* extra bits for each distance code */
  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);

const extra_blbits =  /* extra bits for each bit length code */
  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);

const bl_order =
  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

const DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
const static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

const static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

const _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

const _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

const base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

const base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


let static_l_desc;
let static_d_desc;
let static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



const d_code = (dist) => {

  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
};


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
const put_short = (s, w) => {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
};


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
const send_bits = (s, value, length) => {

  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
};


const send_code = (s, c, tree) => {

  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
};


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
const bi_reverse = (code, len) => {

  let res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
};


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
const bi_flush = (s) => {

  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
};


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
const gen_bitlen = (s, desc) => {
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */

  const tree            = desc.dyn_tree;
  const max_code        = desc.max_code;
  const stree           = desc.stat_desc.static_tree;
  const has_stree       = desc.stat_desc.has_stree;
  const extra           = desc.stat_desc.extra_bits;
  const base            = desc.stat_desc.extra_base;
  const max_length      = desc.stat_desc.max_length;
  let h;              /* heap index */
  let n, m;           /* iterate over the tree elements */
  let bits;           /* bit length */
  let xbits;          /* extra bits */
  let f;              /* frequency */
  let overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Tracev((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Tracev((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
};


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
const gen_codes = (tree, max_code, bl_count) => {
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */

  const next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  let code = 0;              /* running code value */
  let bits;                  /* bit index */
  let n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    code = (code + bl_count[bits - 1]) << 1;
    next_code[bits] = code;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    let len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
};


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
const tr_static_init = () => {

  let n;        /* iterates over tree elements */
  let bits;     /* bit counter */
  let length;   /* length value */
  let code;     /* code value */
  let dist;     /* distance index */
  const bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
};


/* ===========================================================================
 * Initialize a new block.
 */
const init_block = (s) => {

  let n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.sym_next = s.matches = 0;
};


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
const bi_windup = (s) =>
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
};

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
const smaller = (tree, n, m, depth) => {

  const _n2 = n * 2;
  const _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
};

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
const pqdownheap = (s, tree, k) => {
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */

  const v = s.heap[k];
  let j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
};


// inlined manually
// const SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
const compress_block = (s, ltree, dtree) => {
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */

  let dist;           /* distance of matched string */
  let lc;             /* match length or unmatched char (if dist == 0) */
  let sx = 0;         /* running index in sym_buf */
  let code;           /* the code to send */
  let extra;          /* number of extra bits to send */

  if (s.sym_next !== 0) {
    do {
      dist = s.pending_buf[s.sym_buf + sx++] & 0xff;
      dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;
      lc = s.pending_buf[s.sym_buf + sx++];
      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and sym_buf is ok: */
      //Assert(s->pending < s->lit_bufsize + sx, "pendingBuf overflow");

    } while (sx < s.sym_next);
  }

  send_code(s, END_BLOCK, ltree);
};


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
const build_tree = (s, desc) => {
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */

  const tree     = desc.dyn_tree;
  const stree    = desc.stat_desc.static_tree;
  const has_stree = desc.stat_desc.has_stree;
  const elems    = desc.stat_desc.elems;
  let n, m;          /* iterate over heap elements */
  let max_code = -1; /* largest code with non zero frequency */
  let node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
};


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
const scan_tree = (s, tree, max_code) => {
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */

  let n;                     /* iterates over all tree elements */
  let prevlen = -1;          /* last emitted length */
  let curlen;                /* length of current code */

  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  let count = 0;             /* repeat count of the current code */
  let max_count = 7;         /* max repeat count */
  let min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
};


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
const send_tree = (s, tree, max_code) => {
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */

  let n;                     /* iterates over all tree elements */
  let prevlen = -1;          /* last emitted length */
  let curlen;                /* length of current code */

  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  let count = 0;             /* repeat count of the current code */
  let max_count = 7;         /* max repeat count */
  let min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
};


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
const build_bl_tree = (s) => {

  let max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
};


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
const send_all_trees = (s, lcodes, dcodes, blcodes) => {
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */

  let rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
};


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "block list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "allow list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
const detect_data_type = (s) => {
  /* block_mask is the bit mask of block-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  let block_mask = 0xf3ffc07f;
  let n;

  /* Check for non-textual ("block-listed") bytes. */
  for (n = 0; n <= 31; n++, block_mask >>>= 1) {
    if ((block_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("allow-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "block-listed" or "allow-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
};


let static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
const _tr_init = (s) =>
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
};


/* ===========================================================================
 * Send a stored block
 */
const _tr_stored_block = (s, buf, stored_len, last) => {
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */

  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  bi_windup(s);        /* align on byte boundary */
  put_short(s, stored_len);
  put_short(s, ~stored_len);
  if (stored_len) {
    s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);
  }
  s.pending += stored_len;
};


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
const _tr_align = (s) => {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
};


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and write out the encoded block.
 */
const _tr_flush_block = (s, buf, stored_len, last) => {
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */

  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  let max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->sym_next / 3));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
};

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
const _tr_tally = (s, dist, lc) => {
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */

  s.pending_buf[s.sym_buf + s.sym_next++] = dist;
  s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;
  s.pending_buf[s.sym_buf + s.sym_next++] = lc;
  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

  return (s.sym_next === s.sym_end);
};

module.exports._tr_init  = _tr_init;
module.exports._tr_stored_block = _tr_stored_block;
module.exports._tr_flush_block  = _tr_flush_block;
module.exports._tr_tally = _tr_tally;
module.exports._tr_align = _tr_align;


/***/ }),

/***/ 7078:
/***/ ((module) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;


/***/ }),

/***/ 9472:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";

const os = __nccwpck_require__(2037);
const tty = __nccwpck_require__(6224);
const hasFlag = __nccwpck_require__(9307);

const {env} = process;

let forceColor;
if (hasFlag('no-color') ||
	hasFlag('no-colors') ||
	hasFlag('color=false') ||
	hasFlag('color=never')) {
	forceColor = 0;
} else if (hasFlag('color') ||
	hasFlag('colors') ||
	hasFlag('color=true') ||
	hasFlag('color=always')) {
	forceColor = 1;
}

if ('FORCE_COLOR' in env) {
	if (env.FORCE_COLOR === 'true') {
		forceColor = 1;
	} else if (env.FORCE_COLOR === 'false') {
		forceColor = 0;
	} else {
		forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
	}
}

function translateLevel(level) {
	if (level === 0) {
		return false;
	}

	return {
		level,
		hasBasic: true,
		has256: level >= 2,
		has16m: level >= 3
	};
}

function supportsColor(haveStream, streamIsTTY) {
	if (forceColor === 0) {
		return 0;
	}

	if (hasFlag('color=16m') ||
		hasFlag('color=full') ||
		hasFlag('color=truecolor')) {
		return 3;
	}

	if (hasFlag('color=256')) {
		return 2;
	}

	if (haveStream && !streamIsTTY && forceColor === undefined) {
		return 0;
	}

	const min = forceColor || 0;

	if (env.TERM === 'dumb') {
		return min;
	}

	if (process.platform === 'win32') {
		// Windows 10 build 10586 is the first Windows release that supports 256 colors.
		// Windows 10 build 14931 is the first release that supports 16m/TrueColor.
		const osRelease = os.release().split('.');
		if (
			Number(osRelease[0]) >= 10 &&
			Number(osRelease[2]) >= 10586
		) {
			return Number(osRelease[2]) >= 14931 ? 3 : 2;
		}

		return 1;
	}

	if ('CI' in env) {
		if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
			return 1;
		}

		return min;
	}

	if ('TEAMCITY_VERSION' in env) {
		return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
	}

	if (env.COLORTERM === 'truecolor') {
		return 3;
	}

	if ('TERM_PROGRAM' in env) {
		const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

		switch (env.TERM_PROGRAM) {
			case 'iTerm.app':
				return version >= 3 ? 3 : 2;
			case 'Apple_Terminal':
				return 2;
			// No default
		}
	}

	if (/-256(color)?$/i.test(env.TERM)) {
		return 2;
	}

	if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
		return 1;
	}

	if ('COLORTERM' in env) {
		return 1;
	}

	return min;
}

function getSupportLevel(stream) {
	const level = supportsColor(stream, stream && stream.isTTY);
	return translateLevel(level);
}

module.exports = {
	supportsColor: getSupportLevel,
	stdout: translateLevel(supportsColor(true, tty.isatty(1))),
	stderr: translateLevel(supportsColor(true, tty.isatty(2)))
};


/***/ }),

/***/ 5399:
/***/ ((module) => {

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global global, define, Symbol, Reflect, Promise, SuppressedError */
var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __esDecorate;
var __runInitializers;
var __propKey;
var __setFunctionName;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __spreadArray;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
var __classPrivateFieldIn;
var __createBinding;
var __addDisposableResource;
var __disposeResources;
(function (factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function (exports) { factory(createExporter(root, createExporter(exports))); });
    }
    else if ( true && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
    }
    else {
        factory(createExporter(root));
    }
    function createExporter(exports, previous) {
        if (exports !== root) {
            if (typeof Object.create === "function") {
                Object.defineProperty(exports, "__esModule", { value: true });
            }
            else {
                exports.__esModule = true;
            }
        }
        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };
    }
})
(function (exporter) {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };

    __extends = function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };

    __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    };

    __decorate = function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };

    __param = function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };

    __esDecorate = function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
        function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
        var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
        var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
        var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
        var _, done = false;
        for (var i = decorators.length - 1; i >= 0; i--) {
            var context = {};
            for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
            for (var p in contextIn.access) context.access[p] = contextIn.access[p];
            context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
            var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
            if (kind === "accessor") {
                if (result === void 0) continue;
                if (result === null || typeof result !== "object") throw new TypeError("Object expected");
                if (_ = accept(result.get)) descriptor.get = _;
                if (_ = accept(result.set)) descriptor.set = _;
                if (_ = accept(result.init)) initializers.unshift(_);
            }
            else if (_ = accept(result)) {
                if (kind === "field") initializers.unshift(_);
                else descriptor[key] = _;
            }
        }
        if (target) Object.defineProperty(target, contextIn.name, descriptor);
        done = true;
    };

    __runInitializers = function (thisArg, initializers, value) {
        var useValue = arguments.length > 2;
        for (var i = 0; i < initializers.length; i++) {
            value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
        }
        return useValue ? value : void 0;
    };

    __propKey = function (x) {
        return typeof x === "symbol" ? x : "".concat(x);
    };

    __setFunctionName = function (f, name, prefix) {
        if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
        return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
    };

    __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    };

    __awaiter = function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };

    __generator = function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (g && (g = 0, op[0] && (_ = 0)), _) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };

    __exportStar = function(m, o) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
    };

    __createBinding = Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    });

    __values = function (o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };

    __read = function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };

    /** @deprecated */
    __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    };

    /** @deprecated */
    __spreadArrays = function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    __spreadArray = function (to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    };

    __await = function (v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    };

    __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    };

    __asyncDelegator = function (o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
    };

    __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    };

    __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    var __setModuleDefault = Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    };

    __importStar = function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };

    __importDefault = function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };

    __classPrivateFieldGet = function (receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    __classPrivateFieldSet = function (receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    };

    __classPrivateFieldIn = function (state, receiver) {
        if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
    };

    __addDisposableResource = function (env, value, async) {
        if (value !== null && value !== void 0) {
            if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
            var dispose;
            if (async) {
                if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
                dispose = value[Symbol.asyncDispose];
            }
            if (dispose === void 0) {
                if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
                dispose = value[Symbol.dispose];
            }
            if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
            env.stack.push({ value: value, dispose: dispose, async: async });
        }
        else if (async) {
            env.stack.push({ async: true });
        }
        return value;
    };

    var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
        var e = new Error(message);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };

    __disposeResources = function (env) {
        function fail(e) {
            env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
            env.hasError = true;
        }
        function next() {
            while (env.stack.length) {
                var rec = env.stack.pop();
                try {
                    var result = rec.dispose && rec.dispose.call(rec.value);
                    if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
                }
                catch (e) {
                    fail(e);
                }
            }
            if (env.hasError) throw env.error;
        }
        return next();
    };

    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__esDecorate", __esDecorate);
    exporter("__runInitializers", __runInitializers);
    exporter("__propKey", __propKey);
    exporter("__setFunctionName", __setFunctionName);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__spreadArray", __spreadArray);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    exporter("__addDisposableResource", __addDisposableResource);
    exporter("__disposeResources", __disposeResources);
});


/***/ }),

/***/ 7348:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cli = void 0;
var tslib_1 = __nccwpck_require__(5399);
var terminusdb_client_1 = tslib_1.__importStar(__nccwpck_require__(5541));
var commander_1 = __nccwpck_require__(997);
var json_colorizer_1 = tslib_1.__importDefault(__nccwpck_require__(3260));
var debug_1 = tslib_1.__importDefault(__nccwpck_require__(4404));
var fs_1 = tslib_1.__importDefault(__nccwpck_require__(7147));
var program = new commander_1.Command();
program
    .version("0.2.3")
    .description("TerminusDB Javascript cli: tuscli [options] <fileName(s)>")
    .option("-c, --create", "create document from provided file")
    .option("--createFromJson", "create document from supplied JSON, like '{\"@id\":\"Entity/1\", \"@type\":\"Entity\"}'")
    .option("-r, --read <document-id>", "read document-id (Type/id)")
    .option("-s, --schemaFrame <document-id>", "get the schema frame for a type/subdoctype/enum")
    .option("-u, --update <document-id>", "update document")
    .option("-d, --delete <document-id>", "delete document")
    .option("-q, --query-documents <query-template-json>", 'list documents of type, example: {"type":"Person"}')
    .option("-e, --export-schema", "export/show instance schema JSON")
    .option("-p, --profile <json-file>", "JSON-formatted connection profile, or set env TUSPARAMS in base64 encoding")
    .option("-z, --dump-profile", "show the default or current connection profile, and how to set it")
    .option("-o, --optimize <main>", "optimize and do delta rollups on a branch")
    .option("--createDatabase <dataproduct-id> <create-json>", 'create data product, default JSON: {"schema":true, "label": "", "comment":""}')
    .option("--deleteDatabase <dataproduct-id>", "delete database/data product")
    .option("--deleteDocumentsOfType <type>", "delete all documents of a type")
    .option("--deleteDocumentsIsaType <type>", "delete documents that are is-a type")
    .option("--dataProduct <dataproduct-id>", "override dataproduct to use")
    .option("--createBranch <branch-id> <true/false>", "create branch, true for empty branch")
    .option("--deleteBranch <branch-id>", "delete branch")
    .option("--branches", "pull list of branches in the data product")
    .option("--nocolor", "disable the colorize filter of output")
    .option("--quiet", "disable diagnostic outputs")
    .option("-x, --system", "connect to system database")
    .option("-y, --commitGraph <count>", "get the 10 last commits, supply an argument for more")
    .option("-i, --instance <instance|schema>", "document instance, default is instance")
    .option("-b, --branch <branch-id>", "use/select active branch")
    .option("-t, --commit <commit-id>", "use/select specific commit")
    .option("--woql <WOQL>", "Execute JS WOQL query (as an argument)")
    .option("--compileWoql <WOQL>", "Compile JS WOQL (as an argument) into JSON WOQL")
    .option("--woqlFile <example.woql.js>", "Execute JS WOQL (from a file)")
    .option("--woqlCompile <example.woql.js>", "Compile JS WOQL into JSON WOQL (from a file)")
    .parse(process.argv);
var GraphSelection;
(function (GraphSelection) {
    GraphSelection["SCHEMA"] = "schema";
    GraphSelection["INSTANCE"] = "instance";
})(GraphSelection || (GraphSelection = {}));
var RepoType;
(function (RepoType) {
    RepoType["local"] = "local";
    RepoType["remote"] = "remote";
})(RepoType || (RepoType = {}));
var options = program.opts();
var debug = (0, debug_1.default)("Zebra CLI");
if (Object.keys(options).length === 0) {
    program.help();
}
var showOutput = true;
var btoa = function (b) { return Buffer.from(b, "base64").toString("binary"); };
var getFileJson = function (path) {
    try {
        var fileAtPath = path === "-" ? "/dev/stdin" : path;
        if (!fs_1.default.existsSync(fileAtPath)) {
            throw new Error("File does not exist");
        }
        try {
            return JSON.parse(fs_1.default.readFileSync(fileAtPath, { encoding: "utf-8" }).toString());
        }
        catch (e) {
            throw new Error("Could not parse the file correctly, likely bad JSON");
        }
    }
    catch (e) {
        console.error("Could handle input file correctly: ", path);
        console.log(e);
        process.exit(1);
    }
};
var findConnectionConfiguration = function (file, envName) {
    var envParameters = process.env[envName];
    if (file) {
        debug("Provided configuration information from file: " + file);
        return getFileJson(file);
    }
    else if (envParameters) {
        try {
            debug("Provided configuration infomation from TUSPARAMS: " + btoa(envParameters));
            return JSON.parse(btoa(envParameters));
        }
        catch (e) {
            console.error(envName + " environment variable not with proper base64 encoded JSON string");
        }
    }
    debug("No provided connection information");
    return {};
};
var exampleConnObject = JSON.stringify({
    url: "http://localhost:6363",
    apikey: "password",
    organisation: "admin",
    db: "mydb",
    user: "john.doe@example.com",
});
var connectionObject = findConnectionConfiguration(options.jsonFile, "TUSPARAMS");
var remoteObject = findConnectionConfiguration(options.jsonFile, "TUSREMOTE");
debug(exampleConnObject);
var consoleDumpJson = function (obj) {
    var json = JSON.stringify(obj, null, 2);
    if (options.nocolor) {
        console.log(json);
    }
    else {
        console.log((0, json_colorizer_1.default)(json, { pretty: true }));
    }
};
if (options.dumpProfile) {
    var dumpInfo = Object.assign({}, connectionObject);
    if (dumpInfo.key) {
        dumpInfo.key = "**** hidden ****";
    }
    if (dumpInfo.apikey) {
        dumpInfo.apikey = "**** hidden ****";
    }
    console.warn("To set the environment variable in bash, use TUSREMOTE to remote services:");
    console.warn('# export TUSPARAMS="$(echo ' + JSON.stringify(exampleConnObject) + ' |base64)" ');
    console.log("To debug, export DEBUG='*'");
    console.log("");
    console.warn("Current profile (except for keys):");
    consoleDumpJson(dumpInfo);
    process.exit(0);
}
var connectClient = function (connInfo) {
    if ("key" in connInfo) {
        return new terminusdb_client_1.default.WOQLClient(connInfo.url, {
            db: connInfo.db,
            key: connInfo.key,
            user: connInfo.user,
            organisation: connInfo.organisation,
        });
    }
    else {
        return new terminusdb_client_1.default.WOQLClient(connInfo.url, {
            user: connInfo.user,
            organisation: connInfo.organisation,
        });
    }
};
var cli = function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var client, selectGraph, database, defaultLength, commitBindings, _a, _b, _c, _d, _e, _f, createJsonFromFileNameParameter_1, createJson, databaseCreationOptions, result, result, createEmptyBranch, result, result, result, _g, parseWoql, comment, parsedWoql, result, comment, parsedWoql, result, comment, parsedWoql, suppliedWoql, result, comment, woql, parsedWoql, suppliedWoql, result, woql, parsedWoql, suppliedWoql, parsedWoql, suppliedWoql;
    var _h;
    return tslib_1.__generator(this, function (_j) {
        switch (_j.label) {
            case 0:
                debug("Options: ", options);
                debug("Remaining arguments: ", program.args);
                client = connectClient(connectionObject);
                // Make local and remote authentication
                // Convert to new connection object for the TUSPARAMS
                // client.remoteAuth({"key":"randomkey","type":"jwt"})
                if ("apikey" in connectionObject) {
                    client.setApiKey(connectionObject.apikey);
                }
                else if ("jwt" in connectionObject) {
                    client.localAuth({ "key": connectionObject.jwt, "type": "jwt" });
                }
                client.organization(connectionObject.organisation);
                client.db(connectionObject.db);
                if (options.dataProduct) {
                    client.db(options.dataProduct);
                }
                selectGraph = function (selectedGraph) {
                    switch (selectedGraph) {
                        case "schema":
                            return selectedGraph;
                        case "instance":
                            return selectedGraph;
                        default:
                            if (typeof selectedGraph === "string") {
                                return selectedGraph;
                            }
                            else {
                                return GraphSelection.INSTANCE;
                            }
                    }
                };
                database = selectGraph(options.instance);
                if (options.quiet) {
                    showOutput = false;
                }
                if (options.system) {
                    client.setSystemDb();
                }
                if (options.branch) {
                    client.checkout(options.branch);
                }
                if (options.commit) {
                    client.ref(options.commit);
                }
                if (!options.commitGraph) return [3 /*break*/, 2];
                defaultLength = 10;
                return [4 /*yield*/, client.query(terminusdb_client_1.WOQL.lib().commits((_h = options.branch) !== null && _h !== void 0 ? _h : undefined, typeof options.commitGraph === "string" ? options.commitGraph : defaultLength))];
            case 1:
                commitBindings = (_j.sent()).bindings;
                consoleDumpJson(commitBindings);
                _j.label = 2;
            case 2:
                if (!options.exportSchema) return [3 /*break*/, 4];
                _a = consoleDumpJson;
                return [4 /*yield*/, client.getSchema()];
            case 3:
                _a.apply(void 0, [_j.sent()]);
                _j.label = 4;
            case 4:
                if (options.create) {
                    debug(program.args
                        .map(function (fileName) { return getFileJson(fileName); })
                        .map(function (obj) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                        return tslib_1.__generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.addDocument(obj, { graph_type: database })];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    }); }));
                }
                if (options.createFromJson) {
                    debug(program.args
                        .map(function (obj) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                        return tslib_1.__generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.addDocument(obj, { graph_type: database })];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    }); }));
                }
                if (options.update) {
                    debug(program.args
                        .map(function (fileName) { return getFileJson(fileName); })
                        .map(function (obj) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                        return tslib_1.__generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, client.updateDocument(obj, { id: options.update, graph_type: database })];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    }); }));
                }
                if (!(typeof options.queryDocuments === "string")) return [3 /*break*/, 6];
                if (!options.queryDocuments)
                    throw new Error("No query template provided");
                _b = consoleDumpJson;
                return [4 /*yield*/, client.queryDocument(JSON.parse(options.queryDocuments), { as_list: true, graph_type: database })];
            case 5:
                _b.apply(void 0, [_j.sent()]);
                _j.label = 6;
            case 6:
                if (!(typeof options.read === "string")) return [3 /*break*/, 8];
                if (!options.read)
                    throw new Error("No documentId to read provided");
                _c = consoleDumpJson;
                return [4 /*yield*/, client.getDocument({ id: options.read, graph_type: database })];
            case 7:
                _c.apply(void 0, [_j.sent()]);
                _j.label = 8;
            case 8:
                if (!(typeof options.schemaFrame === "string")) return [3 /*break*/, 10];
                if (!options.schemaFrame)
                    throw new Error("No documentId to get the frame for provided");
                _d = consoleDumpJson;
                return [4 /*yield*/, client.getSchemaFrame(options.schemaFrame)];
            case 9:
                _d.apply(void 0, [_j.sent()]);
                _j.label = 10;
            case 10:
                if (!(typeof options.delete === "string")) return [3 /*break*/, 12];
                if (!options.delete)
                    throw new Error("Document to delete was not provided");
                _e = consoleDumpJson;
                return [4 /*yield*/, client.deleteDocument({ id: [options.delete], graph_type: database })];
            case 11:
                _e.apply(void 0, [_j.sent()]);
                _j.label = 12;
            case 12:
                if (!(typeof options.optimize === "string")) return [3 /*break*/, 14];
                if (!options.optimize)
                    throw new Error("What to optimize was not provided");
                _f = consoleDumpJson;
                return [4 /*yield*/, client.optimizeBranch(options.optimize)];
            case 13:
                _f.apply(void 0, [_j.sent()]);
                _j.label = 14;
            case 14:
                if (!(typeof options.createDatabase === "string")) return [3 /*break*/, 17];
                createJsonFromFileNameParameter_1 = program.args[0];
                if (!options.createDatabase)
                    throw new Error("Database name to create was not provided");
                return [4 /*yield*/, (function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
                        return [2 /*return*/, JSON.parse(createJsonFromFileNameParameter_1)];
                    }); }); })()
                        .then(function (res) { return res; })
                        .catch(function () { return ({}); })];
            case 15:
                createJson = _j.sent();
                if (createJson.schema === "false") {
                    throw new Error('Error: schema element must be a boolean or undefined, and not "false". If undefined, it defaults to true.');
                }
                databaseCreationOptions = {
                    schema: typeof createJson.schema === "boolean" ? createJson.schema : true,
                    label: typeof createJson.label === "string" ? createJson.label : "",
                    comment: typeof createJson.comment === "string" ? createJson.comment : "",
                };
                return [4 /*yield*/, client.createDatabase(options.createDatabase, databaseCreationOptions)];
            case 16:
                result = _j.sent();
                showOutput && consoleDumpJson(result);
                _j.label = 17;
            case 17:
                if (!(typeof options.deleteDatabase === "string")) return [3 /*break*/, 19];
                if (!options.deleteDatabase)
                    throw new Error("Database name to delete/kill was not provided");
                return [4 /*yield*/, client.deleteDatabase(options.deleteDatabase, connectionObject.organisation)];
            case 18:
                result = _j.sent();
                showOutput && consoleDumpJson(result);
                _j.label = 19;
            case 19:
                if (!(typeof options.createBranch === "string")) return [3 /*break*/, 23];
                createEmptyBranch = program.args[0];
                if (!(createEmptyBranch === "true")) return [3 /*break*/, 21];
                return [4 /*yield*/, client.branch(options.createBranch, true)];
            case 20:
                result = _j.sent();
                showOutput && consoleDumpJson(result);
                return [3 /*break*/, 23];
            case 21: return [4 /*yield*/, client.branch(options.createBranch, false)];
            case 22:
                result = _j.sent();
                showOutput && consoleDumpJson(result);
                _j.label = 23;
            case 23:
                if (!(typeof options.deleteBranch === "string")) return [3 /*break*/, 25];
                return [4 /*yield*/, client.deleteBranch(options.deleteBranch)];
            case 24:
                result = _j.sent();
                showOutput && consoleDumpJson(result);
                _j.label = 25;
            case 25:
                if (!options.branches) return [3 /*break*/, 27];
                _g = consoleDumpJson;
                return [4 /*yield*/, client.getBranches()];
            case 26:
                _g.apply(void 0, [_j.sent()]);
                _j.label = 27;
            case 27:
                parseWoql = function (woql) {
                    var normalizeWoql = function (str) { return str.replace(/\\n/g, " "); };
                    return Function('"use strict";return ( function(WOQL, vars){return (' + normalizeWoql(woql) + ").json()});")()(terminusdb_client_1.WOQL);
                };
                if (!(typeof options.deleteDocumentsOfType === "string")) return [3 /*break*/, 29];
                comment = typeof process.argv[0] === "string" ? process.argv[0] : "tuscli";
                parsedWoql = terminusdb_client_1.WOQL.and(terminusdb_client_1.WOQL.triple("v:DocumentId", "rdf:type", "@schema:" + options.deleteDocumentsOfType), terminusdb_client_1.WOQL.delete_document("v:DocumentId"));
                return [4 /*yield*/, client.query(parsedWoql, comment)];
            case 28:
                result = _j.sent();
                showOutput && consoleDumpJson(result);
                _j.label = 29;
            case 29:
                if (!(typeof options.deleteDocumentsIsaType === "string")) return [3 /*break*/, 31];
                comment = typeof process.argv[0] === "string" ? process.argv[0] : "tuscli";
                parsedWoql = terminusdb_client_1.WOQL.and(terminusdb_client_1.WOQL.isa("v:DocumentId", options.deleteDocumentsIsaType), terminusdb_client_1.WOQL.delete_document("v:DocumentId"));
                return [4 /*yield*/, client.query(parsedWoql, comment)];
            case 30:
                result = _j.sent();
                showOutput && consoleDumpJson(result);
                _j.label = 31;
            case 31:
                if (!(typeof options.woql === "string")) return [3 /*break*/, 33];
                comment = typeof process.argv[0] === "string" ? process.argv[0] : "tuscli";
                parsedWoql = parseWoql(options.woql);
                suppliedWoql = terminusdb_client_1.WOQL.json(parsedWoql);
                return [4 /*yield*/, client.query(suppliedWoql, comment)];
            case 32:
                result = _j.sent();
                showOutput && consoleDumpJson(result);
                _j.label = 33;
            case 33:
                if (!(typeof options.woqlFile === "string")) return [3 /*break*/, 35];
                comment = typeof process.argv[0] === "string" ? process.argv[0] : "tuscli";
                woql = fs_1.default.readFileSync(options.woqlFile, "utf8");
                parsedWoql = parseWoql(woql);
                suppliedWoql = terminusdb_client_1.WOQL.json(parsedWoql);
                return [4 /*yield*/, client.query(suppliedWoql, { comment: comment, author: "bun" })];
            case 34:
                result = _j.sent();
                showOutput && consoleDumpJson(result);
                _j.label = 35;
            case 35:
                if (typeof options.woqlCompile === "string") {
                    woql = fs_1.default.readFileSync(options.woqlCompile, "utf8");
                    parsedWoql = parseWoql(woql);
                    suppliedWoql = terminusdb_client_1.WOQL.json(parsedWoql);
                    consoleDumpJson(suppliedWoql);
                }
                if (typeof options.compileWoql === "string") {
                    parsedWoql = parseWoql(options.compileWoql);
                    suppliedWoql = terminusdb_client_1.WOQL.json(parsedWoql);
                    consoleDumpJson(suppliedWoql);
                }
                return [2 /*return*/];
        }
    });
}); };
exports.cli = cli;
(0, exports.cli)();


/***/ }),

/***/ 9491:
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ 2081:
/***/ ((module) => {

"use strict";
module.exports = require("child_process");

/***/ }),

/***/ 2361:
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ 7147:
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ 3685:
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ 5687:
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ 2037:
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ 1017:
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ 2781:
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ 6224:
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ 7310:
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ 3837:
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ 9796:
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ 997:
/***/ ((module, exports, __nccwpck_require__) => {

const { Argument } = __nccwpck_require__(647);
const { Command } = __nccwpck_require__(7551);
const { CommanderError, InvalidArgumentError } = __nccwpck_require__(8498);
const { Help } = __nccwpck_require__(1956);
const { Option } = __nccwpck_require__(9663);

// @ts-check

/**
 * Expose the root command.
 */

exports = module.exports = new Command();
exports.program = exports; // More explicit access to global command.
// Implicit export of createArgument, createCommand, and createOption.

/**
 * Expose classes
 */

exports.Argument = Argument;
exports.Command = Command;
exports.CommanderError = CommanderError;
exports.Help = Help;
exports.InvalidArgumentError = InvalidArgumentError;
exports.InvalidOptionArgumentError = InvalidArgumentError; // Deprecated
exports.Option = Option;


/***/ }),

/***/ 647:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

const { InvalidArgumentError } = __nccwpck_require__(8498);

// @ts-check

class Argument {
  /**
   * Initialize a new command argument with the given name and description.
   * The default is that the argument is required, and you can explicitly
   * indicate this with <> around the name. Put [] around the name for an optional argument.
   *
   * @param {string} name
   * @param {string} [description]
   */

  constructor(name, description) {
    this.description = description || '';
    this.variadic = false;
    this.parseArg = undefined;
    this.defaultValue = undefined;
    this.defaultValueDescription = undefined;
    this.argChoices = undefined;

    switch (name[0]) {
      case '<': // e.g. <required>
        this.required = true;
        this._name = name.slice(1, -1);
        break;
      case '[': // e.g. [optional]
        this.required = false;
        this._name = name.slice(1, -1);
        break;
      default:
        this.required = true;
        this._name = name;
        break;
    }

    if (this._name.length > 3 && this._name.slice(-3) === '...') {
      this.variadic = true;
      this._name = this._name.slice(0, -3);
    }
  }

  /**
   * Return argument name.
   *
   * @return {string}
   */

  name() {
    return this._name;
  };

  /**
   * @api private
   */

  _concatValue(value, previous) {
    if (previous === this.defaultValue || !Array.isArray(previous)) {
      return [value];
    }

    return previous.concat(value);
  }

  /**
   * Set the default value, and optionally supply the description to be displayed in the help.
   *
   * @param {any} value
   * @param {string} [description]
   * @return {Argument}
   */

  default(value, description) {
    this.defaultValue = value;
    this.defaultValueDescription = description;
    return this;
  };

  /**
   * Set the custom handler for processing CLI command arguments into argument values.
   *
   * @param {Function} [fn]
   * @return {Argument}
   */

  argParser(fn) {
    this.parseArg = fn;
    return this;
  };

  /**
   * Only allow option value to be one of choices.
   *
   * @param {string[]} values
   * @return {Argument}
   */

  choices(values) {
    this.argChoices = values;
    this.parseArg = (arg, previous) => {
      if (!values.includes(arg)) {
        throw new InvalidArgumentError(`Allowed choices are ${values.join(', ')}.`);
      }
      if (this.variadic) {
        return this._concatValue(arg, previous);
      }
      return arg;
    };
    return this;
  };

  /**
   * Make option-argument required.
   */
  argRequired() {
    this.required = true;
    return this;
  }

  /**
   * Make option-argument optional.
   */
  argOptional() {
    this.required = false;
    return this;
  }
}

/**
 * Takes an argument and returns its human readable equivalent for help usage.
 *
 * @param {Argument} arg
 * @return {string}
 * @api private
 */

function humanReadableArgName(arg) {
  const nameOutput = arg.name() + (arg.variadic === true ? '...' : '');

  return arg.required
    ? '<' + nameOutput + '>'
    : '[' + nameOutput + ']';
}

exports.Argument = Argument;
exports.humanReadableArgName = humanReadableArgName;


/***/ }),

/***/ 7551:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

const EventEmitter = (__nccwpck_require__(2361).EventEmitter);
const childProcess = __nccwpck_require__(2081);
const path = __nccwpck_require__(1017);
const fs = __nccwpck_require__(7147);

const { Argument, humanReadableArgName } = __nccwpck_require__(647);
const { CommanderError } = __nccwpck_require__(8498);
const { Help } = __nccwpck_require__(1956);
const { Option, splitOptionFlags } = __nccwpck_require__(9663);
const { suggestSimilar } = __nccwpck_require__(4545);

// @ts-check

class Command extends EventEmitter {
  /**
   * Initialize a new `Command`.
   *
   * @param {string} [name]
   */

  constructor(name) {
    super();
    /** @type {Command[]} */
    this.commands = [];
    /** @type {Option[]} */
    this.options = [];
    this.parent = null;
    this._allowUnknownOption = false;
    this._allowExcessArguments = true;
    /** @type {Argument[]} */
    this._args = [];
    /** @type {string[]} */
    this.args = []; // cli args with options removed
    this.rawArgs = [];
    this.processedArgs = []; // like .args but after custom processing and collecting variadic
    this._scriptPath = null;
    this._name = name || '';
    this._optionValues = {};
    this._optionValueSources = {}; // default < config < env < cli
    this._storeOptionsAsProperties = false;
    this._actionHandler = null;
    this._executableHandler = false;
    this._executableFile = null; // custom name for executable
    this._defaultCommandName = null;
    this._exitCallback = null;
    this._aliases = [];
    this._combineFlagAndOptionalValue = true;
    this._description = '';
    this._argsDescription = undefined; // legacy
    this._enablePositionalOptions = false;
    this._passThroughOptions = false;
    this._lifeCycleHooks = {}; // a hash of arrays
    /** @type {boolean | string} */
    this._showHelpAfterError = false;
    this._showSuggestionAfterError = false;

    // see .configureOutput() for docs
    this._outputConfiguration = {
      writeOut: (str) => process.stdout.write(str),
      writeErr: (str) => process.stderr.write(str),
      getOutHelpWidth: () => process.stdout.isTTY ? process.stdout.columns : undefined,
      getErrHelpWidth: () => process.stderr.isTTY ? process.stderr.columns : undefined,
      outputError: (str, write) => write(str)
    };

    this._hidden = false;
    this._hasHelpOption = true;
    this._helpFlags = '-h, --help';
    this._helpDescription = 'display help for command';
    this._helpShortFlag = '-h';
    this._helpLongFlag = '--help';
    this._addImplicitHelpCommand = undefined; // Deliberately undefined, not decided whether true or false
    this._helpCommandName = 'help';
    this._helpCommandnameAndArgs = 'help [command]';
    this._helpCommandDescription = 'display help for command';
    this._helpConfiguration = {};
  }

  /**
   * Copy settings that are useful to have in common across root command and subcommands.
   *
   * (Used internally when adding a command using `.command()` so subcommands inherit parent settings.)
   *
   * @param {Command} sourceCommand
   * @return {Command} returns `this` for executable command
   */
  copyInheritedSettings(sourceCommand) {
    this._outputConfiguration = sourceCommand._outputConfiguration;
    this._hasHelpOption = sourceCommand._hasHelpOption;
    this._helpFlags = sourceCommand._helpFlags;
    this._helpDescription = sourceCommand._helpDescription;
    this._helpShortFlag = sourceCommand._helpShortFlag;
    this._helpLongFlag = sourceCommand._helpLongFlag;
    this._helpCommandName = sourceCommand._helpCommandName;
    this._helpCommandnameAndArgs = sourceCommand._helpCommandnameAndArgs;
    this._helpCommandDescription = sourceCommand._helpCommandDescription;
    this._helpConfiguration = sourceCommand._helpConfiguration;
    this._exitCallback = sourceCommand._exitCallback;
    this._storeOptionsAsProperties = sourceCommand._storeOptionsAsProperties;
    this._combineFlagAndOptionalValue = sourceCommand._combineFlagAndOptionalValue;
    this._allowExcessArguments = sourceCommand._allowExcessArguments;
    this._enablePositionalOptions = sourceCommand._enablePositionalOptions;
    this._showHelpAfterError = sourceCommand._showHelpAfterError;
    this._showSuggestionAfterError = sourceCommand._showSuggestionAfterError;

    return this;
  }

  /**
   * Define a command.
   *
   * There are two styles of command: pay attention to where to put the description.
   *
   * @example
   * // Command implemented using action handler (description is supplied separately to `.command`)
   * program
   *   .command('clone <source> [destination]')
   *   .description('clone a repository into a newly created directory')
   *   .action((source, destination) => {
   *     console.log('clone command called');
   *   });
   *
   * // Command implemented using separate executable file (description is second parameter to `.command`)
   * program
   *   .command('start <service>', 'start named service')
   *   .command('stop [service]', 'stop named service, or all if no name supplied');
   *
   * @param {string} nameAndArgs - command name and arguments, args are `<required>` or `[optional]` and last may also be `variadic...`
   * @param {Object|string} [actionOptsOrExecDesc] - configuration options (for action), or description (for executable)
   * @param {Object} [execOpts] - configuration options (for executable)
   * @return {Command} returns new command for action handler, or `this` for executable command
   */

  command(nameAndArgs, actionOptsOrExecDesc, execOpts) {
    let desc = actionOptsOrExecDesc;
    let opts = execOpts;
    if (typeof desc === 'object' && desc !== null) {
      opts = desc;
      desc = null;
    }
    opts = opts || {};
    const [, name, args] = nameAndArgs.match(/([^ ]+) *(.*)/);

    const cmd = this.createCommand(name);
    if (desc) {
      cmd.description(desc);
      cmd._executableHandler = true;
    }
    if (opts.isDefault) this._defaultCommandName = cmd._name;
    cmd._hidden = !!(opts.noHelp || opts.hidden); // noHelp is deprecated old name for hidden
    cmd._executableFile = opts.executableFile || null; // Custom name for executable file, set missing to null to match constructor
    if (args) cmd.arguments(args);
    this.commands.push(cmd);
    cmd.parent = this;
    cmd.copyInheritedSettings(this);

    if (desc) return this;
    return cmd;
  };

  /**
   * Factory routine to create a new unattached command.
   *
   * See .command() for creating an attached subcommand, which uses this routine to
   * create the command. You can override createCommand to customise subcommands.
   *
   * @param {string} [name]
   * @return {Command} new command
   */

  createCommand(name) {
    return new Command(name);
  };

  /**
   * You can customise the help with a subclass of Help by overriding createHelp,
   * or by overriding Help properties using configureHelp().
   *
   * @return {Help}
   */

  createHelp() {
    return Object.assign(new Help(), this.configureHelp());
  };

  /**
   * You can customise the help by overriding Help properties using configureHelp(),
   * or with a subclass of Help by overriding createHelp().
   *
   * @param {Object} [configuration] - configuration options
   * @return {Command|Object} `this` command for chaining, or stored configuration
   */

  configureHelp(configuration) {
    if (configuration === undefined) return this._helpConfiguration;

    this._helpConfiguration = configuration;
    return this;
  }

  /**
   * The default output goes to stdout and stderr. You can customise this for special
   * applications. You can also customise the display of errors by overriding outputError.
   *
   * The configuration properties are all functions:
   *
   *     // functions to change where being written, stdout and stderr
   *     writeOut(str)
   *     writeErr(str)
   *     // matching functions to specify width for wrapping help
   *     getOutHelpWidth()
   *     getErrHelpWidth()
   *     // functions based on what is being written out
   *     outputError(str, write) // used for displaying errors, and not used for displaying help
   *
   * @param {Object} [configuration] - configuration options
   * @return {Command|Object} `this` command for chaining, or stored configuration
   */

  configureOutput(configuration) {
    if (configuration === undefined) return this._outputConfiguration;

    Object.assign(this._outputConfiguration, configuration);
    return this;
  }

  /**
   * Display the help or a custom message after an error occurs.
   *
   * @param {boolean|string} [displayHelp]
   * @return {Command} `this` command for chaining
   */
  showHelpAfterError(displayHelp = true) {
    if (typeof displayHelp !== 'string') displayHelp = !!displayHelp;
    this._showHelpAfterError = displayHelp;
    return this;
  }

  /**
   * Display suggestion of similar commands for unknown commands, or options for unknown options.
   *
   * @param {boolean} [displaySuggestion]
   * @return {Command} `this` command for chaining
   */
  showSuggestionAfterError(displaySuggestion = true) {
    this._showSuggestionAfterError = !!displaySuggestion;
    return this;
  }

  /**
   * Add a prepared subcommand.
   *
   * See .command() for creating an attached subcommand which inherits settings from its parent.
   *
   * @param {Command} cmd - new subcommand
   * @param {Object} [opts] - configuration options
   * @return {Command} `this` command for chaining
   */

  addCommand(cmd, opts) {
    if (!cmd._name) throw new Error('Command passed to .addCommand() must have a name');

    // To keep things simple, block automatic name generation for deeply nested executables.
    // Fail fast and detect when adding rather than later when parsing.
    function checkExplicitNames(commandArray) {
      commandArray.forEach((cmd) => {
        if (cmd._executableHandler && !cmd._executableFile) {
          throw new Error(`Must specify executableFile for deeply nested executable: ${cmd.name()}`);
        }
        checkExplicitNames(cmd.commands);
      });
    }
    checkExplicitNames(cmd.commands);

    opts = opts || {};
    if (opts.isDefault) this._defaultCommandName = cmd._name;
    if (opts.noHelp || opts.hidden) cmd._hidden = true; // modifying passed command due to existing implementation

    this.commands.push(cmd);
    cmd.parent = this;
    return this;
  };

  /**
   * Factory routine to create a new unattached argument.
   *
   * See .argument() for creating an attached argument, which uses this routine to
   * create the argument. You can override createArgument to return a custom argument.
   *
   * @param {string} name
   * @param {string} [description]
   * @return {Argument} new argument
   */

  createArgument(name, description) {
    return new Argument(name, description);
  };

  /**
   * Define argument syntax for command.
   *
   * The default is that the argument is required, and you can explicitly
   * indicate this with <> around the name. Put [] around the name for an optional argument.
   *
   * @example
   * program.argument('<input-file>');
   * program.argument('[output-file]');
   *
   * @param {string} name
   * @param {string} [description]
   * @param {Function|*} [fn] - custom argument processing function
   * @param {*} [defaultValue]
   * @return {Command} `this` command for chaining
   */
  argument(name, description, fn, defaultValue) {
    const argument = this.createArgument(name, description);
    if (typeof fn === 'function') {
      argument.default(defaultValue).argParser(fn);
    } else {
      argument.default(fn);
    }
    this.addArgument(argument);
    return this;
  }

  /**
   * Define argument syntax for command, adding multiple at once (without descriptions).
   *
   * See also .argument().
   *
   * @example
   * program.arguments('<cmd> [env]');
   *
   * @param {string} names
   * @return {Command} `this` command for chaining
   */

  arguments(names) {
    names.split(/ +/).forEach((detail) => {
      this.argument(detail);
    });
    return this;
  };

  /**
   * Define argument syntax for command, adding a prepared argument.
   *
   * @param {Argument} argument
   * @return {Command} `this` command for chaining
   */
  addArgument(argument) {
    const previousArgument = this._args.slice(-1)[0];
    if (previousArgument && previousArgument.variadic) {
      throw new Error(`only the last argument can be variadic '${previousArgument.name()}'`);
    }
    if (argument.required && argument.defaultValue !== undefined && argument.parseArg === undefined) {
      throw new Error(`a default value for a required argument is never used: '${argument.name()}'`);
    }
    this._args.push(argument);
    return this;
  }

  /**
   * Override default decision whether to add implicit help command.
   *
   *    addHelpCommand() // force on
   *    addHelpCommand(false); // force off
   *    addHelpCommand('help [cmd]', 'display help for [cmd]'); // force on with custom details
   *
   * @return {Command} `this` command for chaining
   */

  addHelpCommand(enableOrNameAndArgs, description) {
    if (enableOrNameAndArgs === false) {
      this._addImplicitHelpCommand = false;
    } else {
      this._addImplicitHelpCommand = true;
      if (typeof enableOrNameAndArgs === 'string') {
        this._helpCommandName = enableOrNameAndArgs.split(' ')[0];
        this._helpCommandnameAndArgs = enableOrNameAndArgs;
      }
      this._helpCommandDescription = description || this._helpCommandDescription;
    }
    return this;
  };

  /**
   * @return {boolean}
   * @api private
   */

  _hasImplicitHelpCommand() {
    if (this._addImplicitHelpCommand === undefined) {
      return this.commands.length && !this._actionHandler && !this._findCommand('help');
    }
    return this._addImplicitHelpCommand;
  };

  /**
   * Add hook for life cycle event.
   *
   * @param {string} event
   * @param {Function} listener
   * @return {Command} `this` command for chaining
   */

  hook(event, listener) {
    const allowedValues = ['preAction', 'postAction'];
    if (!allowedValues.includes(event)) {
      throw new Error(`Unexpected value for event passed to hook : '${event}'.
Expecting one of '${allowedValues.join("', '")}'`);
    }
    if (this._lifeCycleHooks[event]) {
      this._lifeCycleHooks[event].push(listener);
    } else {
      this._lifeCycleHooks[event] = [listener];
    }
    return this;
  }

  /**
   * Register callback to use as replacement for calling process.exit.
   *
   * @param {Function} [fn] optional callback which will be passed a CommanderError, defaults to throwing
   * @return {Command} `this` command for chaining
   */

  exitOverride(fn) {
    if (fn) {
      this._exitCallback = fn;
    } else {
      this._exitCallback = (err) => {
        if (err.code !== 'commander.executeSubCommandAsync') {
          throw err;
        } else {
          // Async callback from spawn events, not useful to throw.
        }
      };
    }
    return this;
  };

  /**
   * Call process.exit, and _exitCallback if defined.
   *
   * @param {number} exitCode exit code for using with process.exit
   * @param {string} code an id string representing the error
   * @param {string} message human-readable description of the error
   * @return never
   * @api private
   */

  _exit(exitCode, code, message) {
    if (this._exitCallback) {
      this._exitCallback(new CommanderError(exitCode, code, message));
      // Expecting this line is not reached.
    }
    process.exit(exitCode);
  };

  /**
   * Register callback `fn` for the command.
   *
   * @example
   * program
   *   .command('serve')
   *   .description('start service')
   *   .action(function() {
   *      // do work here
   *   });
   *
   * @param {Function} fn
   * @return {Command} `this` command for chaining
   */

  action(fn) {
    const listener = (args) => {
      // The .action callback takes an extra parameter which is the command or options.
      const expectedArgsCount = this._args.length;
      const actionArgs = args.slice(0, expectedArgsCount);
      if (this._storeOptionsAsProperties) {
        actionArgs[expectedArgsCount] = this; // backwards compatible "options"
      } else {
        actionArgs[expectedArgsCount] = this.opts();
      }
      actionArgs.push(this);

      return fn.apply(this, actionArgs);
    };
    this._actionHandler = listener;
    return this;
  };

  /**
   * Factory routine to create a new unattached option.
   *
   * See .option() for creating an attached option, which uses this routine to
   * create the option. You can override createOption to return a custom option.
   *
   * @param {string} flags
   * @param {string} [description]
   * @return {Option} new option
   */

  createOption(flags, description) {
    return new Option(flags, description);
  };

  /**
   * Add an option.
   *
   * @param {Option} option
   * @return {Command} `this` command for chaining
   */
  addOption(option) {
    const oname = option.name();
    const name = option.attributeName();

    let defaultValue = option.defaultValue;

    // preassign default value for --no-*, [optional], <required>, or plain flag if boolean value
    if (option.negate || option.optional || option.required || typeof defaultValue === 'boolean') {
      // when --no-foo we make sure default is true, unless a --foo option is already defined
      if (option.negate) {
        const positiveLongFlag = option.long.replace(/^--no-/, '--');
        defaultValue = this._findOption(positiveLongFlag) ? this.getOptionValue(name) : true;
      }
      // preassign only if we have a default
      if (defaultValue !== undefined) {
        this.setOptionValueWithSource(name, defaultValue, 'default');
      }
    }

    // register the option
    this.options.push(option);

    // handler for cli and env supplied values
    const handleOptionValue = (val, invalidValueMessage, valueSource) => {
      // Note: using closure to access lots of lexical scoped variables.
      const oldValue = this.getOptionValue(name);

      // custom processing
      if (val !== null && option.parseArg) {
        try {
          val = option.parseArg(val, oldValue === undefined ? defaultValue : oldValue);
        } catch (err) {
          if (err.code === 'commander.invalidArgument') {
            const message = `${invalidValueMessage} ${err.message}`;
            this._displayError(err.exitCode, err.code, message);
          }
          throw err;
        }
      } else if (val !== null && option.variadic) {
        val = option._concatValue(val, oldValue);
      }

      // unassigned or boolean value
      if (typeof oldValue === 'boolean' || typeof oldValue === 'undefined') {
        // if no value, negate false, and we have a default, then use it!
        if (val == null) {
          this.setOptionValueWithSource(name, option.negate ? false : defaultValue || true, valueSource);
        } else {
          this.setOptionValueWithSource(name, val, valueSource);
        }
      } else if (val !== null) {
        // reassign
        this.setOptionValueWithSource(name, option.negate ? false : val, valueSource);
      }
    };

    this.on('option:' + oname, (val) => {
      const invalidValueMessage = `error: option '${option.flags}' argument '${val}' is invalid.`;
      handleOptionValue(val, invalidValueMessage, 'cli');
    });

    if (option.envVar) {
      this.on('optionEnv:' + oname, (val) => {
        const invalidValueMessage = `error: option '${option.flags}' value '${val}' from env '${option.envVar}' is invalid.`;
        handleOptionValue(val, invalidValueMessage, 'env');
      });
    }

    return this;
  }

  /**
   * Internal implementation shared by .option() and .requiredOption()
   *
   * @api private
   */
  _optionEx(config, flags, description, fn, defaultValue) {
    const option = this.createOption(flags, description);
    option.makeOptionMandatory(!!config.mandatory);
    if (typeof fn === 'function') {
      option.default(defaultValue).argParser(fn);
    } else if (fn instanceof RegExp) {
      // deprecated
      const regex = fn;
      fn = (val, def) => {
        const m = regex.exec(val);
        return m ? m[0] : def;
      };
      option.default(defaultValue).argParser(fn);
    } else {
      option.default(fn);
    }

    return this.addOption(option);
  }

  /**
   * Define option with `flags`, `description` and optional
   * coercion `fn`.
   *
   * The `flags` string contains the short and/or long flags,
   * separated by comma, a pipe or space. The following are all valid
   * all will output this way when `--help` is used.
   *
   *     "-p, --pepper"
   *     "-p|--pepper"
   *     "-p --pepper"
   *
   * @example
   * // simple boolean defaulting to undefined
   * program.option('-p, --pepper', 'add pepper');
   *
   * program.pepper
   * // => undefined
   *
   * --pepper
   * program.pepper
   * // => true
   *
   * // simple boolean defaulting to true (unless non-negated option is also defined)
   * program.option('-C, --no-cheese', 'remove cheese');
   *
   * program.cheese
   * // => true
   *
   * --no-cheese
   * program.cheese
   * // => false
   *
   * // required argument
   * program.option('-C, --chdir <path>', 'change the working directory');
   *
   * --chdir /tmp
   * program.chdir
   * // => "/tmp"
   *
   * // optional argument
   * program.option('-c, --cheese [type]', 'add cheese [marble]');
   *
   * @param {string} flags
   * @param {string} [description]
   * @param {Function|*} [fn] - custom option processing function or default value
   * @param {*} [defaultValue]
   * @return {Command} `this` command for chaining
   */

  option(flags, description, fn, defaultValue) {
    return this._optionEx({}, flags, description, fn, defaultValue);
  };

  /**
  * Add a required option which must have a value after parsing. This usually means
  * the option must be specified on the command line. (Otherwise the same as .option().)
  *
  * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space.
  *
  * @param {string} flags
  * @param {string} [description]
  * @param {Function|*} [fn] - custom option processing function or default value
  * @param {*} [defaultValue]
  * @return {Command} `this` command for chaining
  */

  requiredOption(flags, description, fn, defaultValue) {
    return this._optionEx({ mandatory: true }, flags, description, fn, defaultValue);
  };

  /**
   * Alter parsing of short flags with optional values.
   *
   * @example
   * // for `.option('-f,--flag [value]'):
   * program.combineFlagAndOptionalValue(true);  // `-f80` is treated like `--flag=80`, this is the default behaviour
   * program.combineFlagAndOptionalValue(false) // `-fb` is treated like `-f -b`
   *
   * @param {Boolean} [combine=true] - if `true` or omitted, an optional value can be specified directly after the flag.
   */
  combineFlagAndOptionalValue(combine = true) {
    this._combineFlagAndOptionalValue = !!combine;
    return this;
  };

  /**
   * Allow unknown options on the command line.
   *
   * @param {Boolean} [allowUnknown=true] - if `true` or omitted, no error will be thrown
   * for unknown options.
   */
  allowUnknownOption(allowUnknown = true) {
    this._allowUnknownOption = !!allowUnknown;
    return this;
  };

  /**
   * Allow excess command-arguments on the command line. Pass false to make excess arguments an error.
   *
   * @param {Boolean} [allowExcess=true] - if `true` or omitted, no error will be thrown
   * for excess arguments.
   */
  allowExcessArguments(allowExcess = true) {
    this._allowExcessArguments = !!allowExcess;
    return this;
  };

  /**
   * Enable positional options. Positional means global options are specified before subcommands which lets
   * subcommands reuse the same option names, and also enables subcommands to turn on passThroughOptions.
   * The default behaviour is non-positional and global options may appear anywhere on the command line.
   *
   * @param {Boolean} [positional=true]
   */
  enablePositionalOptions(positional = true) {
    this._enablePositionalOptions = !!positional;
    return this;
  };

  /**
   * Pass through options that come after command-arguments rather than treat them as command-options,
   * so actual command-options come before command-arguments. Turning this on for a subcommand requires
   * positional options to have been enabled on the program (parent commands).
   * The default behaviour is non-positional and options may appear before or after command-arguments.
   *
   * @param {Boolean} [passThrough=true]
   * for unknown options.
   */
  passThroughOptions(passThrough = true) {
    this._passThroughOptions = !!passThrough;
    if (!!this.parent && passThrough && !this.parent._enablePositionalOptions) {
      throw new Error('passThroughOptions can not be used without turning on enablePositionalOptions for parent command(s)');
    }
    return this;
  };

  /**
    * Whether to store option values as properties on command object,
    * or store separately (specify false). In both cases the option values can be accessed using .opts().
    *
    * @param {boolean} [storeAsProperties=true]
    * @return {Command} `this` command for chaining
    */

  storeOptionsAsProperties(storeAsProperties = true) {
    this._storeOptionsAsProperties = !!storeAsProperties;
    if (this.options.length) {
      throw new Error('call .storeOptionsAsProperties() before adding options');
    }
    return this;
  };

  /**
   * Retrieve option value.
   *
   * @param {string} key
   * @return {Object} value
   */

  getOptionValue(key) {
    if (this._storeOptionsAsProperties) {
      return this[key];
    }
    return this._optionValues[key];
  };

  /**
   * Store option value.
   *
   * @param {string} key
   * @param {Object} value
   * @return {Command} `this` command for chaining
   */

  setOptionValue(key, value) {
    if (this._storeOptionsAsProperties) {
      this[key] = value;
    } else {
      this._optionValues[key] = value;
    }
    return this;
  };

  /**
   * Store option value and where the value came from.
    *
    * @param {string} key
    * @param {Object} value
    * @param {string} source - expected values are default/config/env/cli
    * @return {Command} `this` command for chaining
    */

  setOptionValueWithSource(key, value, source) {
    this.setOptionValue(key, value);
    this._optionValueSources[key] = source;
    return this;
  }

  /**
    * Get source of option value.
    * Expected values are default | config | env | cli
    *
    * @param {string} key
    * @return {string}
    */

  getOptionValueSource(key) {
    return this._optionValueSources[key];
  };

  /**
   * Get user arguments implied or explicit arguments.
   * Side-effects: set _scriptPath if args included application, and use that to set implicit command name.
   *
   * @api private
   */

  _prepareUserArgs(argv, parseOptions) {
    if (argv !== undefined && !Array.isArray(argv)) {
      throw new Error('first parameter to parse must be array or undefined');
    }
    parseOptions = parseOptions || {};

    // Default to using process.argv
    if (argv === undefined) {
      argv = process.argv;
      // @ts-ignore: unknown property
      if (process.versions && process.versions.electron) {
        parseOptions.from = 'electron';
      }
    }
    this.rawArgs = argv.slice();

    // make it a little easier for callers by supporting various argv conventions
    let userArgs;
    switch (parseOptions.from) {
      case undefined:
      case 'node':
        this._scriptPath = argv[1];
        userArgs = argv.slice(2);
        break;
      case 'electron':
        // @ts-ignore: unknown property
        if (process.defaultApp) {
          this._scriptPath = argv[1];
          userArgs = argv.slice(2);
        } else {
          userArgs = argv.slice(1);
        }
        break;
      case 'user':
        userArgs = argv.slice(0);
        break;
      default:
        throw new Error(`unexpected parse option { from: '${parseOptions.from}' }`);
    }
    if (!this._scriptPath && require.main) {
      this._scriptPath = require.main.filename;
    }

    // Guess name, used in usage in help.
    this._name = this._name || (this._scriptPath && path.basename(this._scriptPath, path.extname(this._scriptPath)));

    return userArgs;
  }

  /**
   * Parse `argv`, setting options and invoking commands when defined.
   *
   * The default expectation is that the arguments are from node and have the application as argv[0]
   * and the script being run in argv[1], with user parameters after that.
   *
   * @example
   * program.parse(process.argv);
   * program.parse(); // implicitly use process.argv and auto-detect node vs electron conventions
   * program.parse(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]
   *
   * @param {string[]} [argv] - optional, defaults to process.argv
   * @param {Object} [parseOptions] - optionally specify style of options with from: node/user/electron
   * @param {string} [parseOptions.from] - where the args are from: 'node', 'user', 'electron'
   * @return {Command} `this` command for chaining
   */

  parse(argv, parseOptions) {
    const userArgs = this._prepareUserArgs(argv, parseOptions);
    this._parseCommand([], userArgs);

    return this;
  };

  /**
   * Parse `argv`, setting options and invoking commands when defined.
   *
   * Use parseAsync instead of parse if any of your action handlers are async. Returns a Promise.
   *
   * The default expectation is that the arguments are from node and have the application as argv[0]
   * and the script being run in argv[1], with user parameters after that.
   *
   * @example
   * await program.parseAsync(process.argv);
   * await program.parseAsync(); // implicitly use process.argv and auto-detect node vs electron conventions
   * await program.parseAsync(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]
   *
   * @param {string[]} [argv]
   * @param {Object} [parseOptions]
   * @param {string} parseOptions.from - where the args are from: 'node', 'user', 'electron'
   * @return {Promise}
   */

  async parseAsync(argv, parseOptions) {
    const userArgs = this._prepareUserArgs(argv, parseOptions);
    await this._parseCommand([], userArgs);

    return this;
  };

  /**
   * Execute a sub-command executable.
   *
   * @api private
   */

  _executeSubCommand(subcommand, args) {
    args = args.slice();
    let launchWithNode = false; // Use node for source targets so do not need to get permissions correct, and on Windows.
    const sourceExt = ['.js', '.ts', '.tsx', '.mjs', '.cjs'];

    // Not checking for help first. Unlikely to have mandatory and executable, and can't robustly test for help flags in external command.
    this._checkForMissingMandatoryOptions();

    // Want the entry script as the reference for command name and directory for searching for other files.
    let scriptPath = this._scriptPath;
    // Fallback in case not set, due to how Command created or called.
    if (!scriptPath && require.main) {
      scriptPath = require.main.filename;
    }

    let baseDir;
    try {
      const resolvedLink = fs.realpathSync(scriptPath);
      baseDir = path.dirname(resolvedLink);
    } catch (e) {
      baseDir = '.'; // dummy, probably not going to find executable!
    }

    // name of the subcommand, like `pm-install`
    let bin = path.basename(scriptPath, path.extname(scriptPath)) + '-' + subcommand._name;
    if (subcommand._executableFile) {
      bin = subcommand._executableFile;
    }

    const localBin = path.join(baseDir, bin);
    if (fs.existsSync(localBin)) {
      // prefer local `./<bin>` to bin in the $PATH
      bin = localBin;
    } else {
      // Look for source files.
      sourceExt.forEach((ext) => {
        if (fs.existsSync(`${localBin}${ext}`)) {
          bin = `${localBin}${ext}`;
        }
      });
    }
    launchWithNode = sourceExt.includes(path.extname(bin));

    let proc;
    if (process.platform !== 'win32') {
      if (launchWithNode) {
        args.unshift(bin);
        // add executable arguments to spawn
        args = incrementNodeInspectorPort(process.execArgv).concat(args);

        proc = childProcess.spawn(process.argv[0], args, { stdio: 'inherit' });
      } else {
        proc = childProcess.spawn(bin, args, { stdio: 'inherit' });
      }
    } else {
      args.unshift(bin);
      // add executable arguments to spawn
      args = incrementNodeInspectorPort(process.execArgv).concat(args);
      proc = childProcess.spawn(process.execPath, args, { stdio: 'inherit' });
    }

    const signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];
    signals.forEach((signal) => {
      // @ts-ignore
      process.on(signal, () => {
        if (proc.killed === false && proc.exitCode === null) {
          proc.kill(signal);
        }
      });
    });

    // By default terminate process when spawned process terminates.
    // Suppressing the exit if exitCallback defined is a bit messy and of limited use, but does allow process to stay running!
    const exitCallback = this._exitCallback;
    if (!exitCallback) {
      proc.on('close', process.exit.bind(process));
    } else {
      proc.on('close', () => {
        exitCallback(new CommanderError(process.exitCode || 0, 'commander.executeSubCommandAsync', '(close)'));
      });
    }
    proc.on('error', (err) => {
      // @ts-ignore
      if (err.code === 'ENOENT') {
        const executableMissing = `'${bin}' does not exist
 - if '${subcommand._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead
 - if the default executable name is not suitable, use the executableFile option to supply a custom name`;
        throw new Error(executableMissing);
      // @ts-ignore
      } else if (err.code === 'EACCES') {
        throw new Error(`'${bin}' not executable`);
      }
      if (!exitCallback) {
        process.exit(1);
      } else {
        const wrappedError = new CommanderError(1, 'commander.executeSubCommandAsync', '(error)');
        wrappedError.nestedError = err;
        exitCallback(wrappedError);
      }
    });

    // Store the reference to the child process
    this.runningCommand = proc;
  };

  /**
   * @api private
   */

  _dispatchSubcommand(commandName, operands, unknown) {
    const subCommand = this._findCommand(commandName);
    if (!subCommand) this.help({ error: true });

    if (subCommand._executableHandler) {
      this._executeSubCommand(subCommand, operands.concat(unknown));
    } else {
      return subCommand._parseCommand(operands, unknown);
    }
  };

  /**
   * Check this.args against expected this._args.
   *
   * @api private
   */

  _checkNumberOfArguments() {
    // too few
    this._args.forEach((arg, i) => {
      if (arg.required && this.args[i] == null) {
        this.missingArgument(arg.name());
      }
    });
    // too many
    if (this._args.length > 0 && this._args[this._args.length - 1].variadic) {
      return;
    }
    if (this.args.length > this._args.length) {
      this._excessArguments(this.args);
    }
  };

  /**
   * Process this.args using this._args and save as this.processedArgs!
   *
   * @api private
   */

  _processArguments() {
    const myParseArg = (argument, value, previous) => {
      // Extra processing for nice error message on parsing failure.
      let parsedValue = value;
      if (value !== null && argument.parseArg) {
        try {
          parsedValue = argument.parseArg(value, previous);
        } catch (err) {
          if (err.code === 'commander.invalidArgument') {
            const message = `error: command-argument value '${value}' is invalid for argument '${argument.name()}'. ${err.message}`;
            this._displayError(err.exitCode, err.code, message);
          }
          throw err;
        }
      }
      return parsedValue;
    };

    this._checkNumberOfArguments();

    const processedArgs = [];
    this._args.forEach((declaredArg, index) => {
      let value = declaredArg.defaultValue;
      if (declaredArg.variadic) {
        // Collect together remaining arguments for passing together as an array.
        if (index < this.args.length) {
          value = this.args.slice(index);
          if (declaredArg.parseArg) {
            value = value.reduce((processed, v) => {
              return myParseArg(declaredArg, v, processed);
            }, declaredArg.defaultValue);
          }
        } else if (value === undefined) {
          value = [];
        }
      } else if (index < this.args.length) {
        value = this.args[index];
        if (declaredArg.parseArg) {
          value = myParseArg(declaredArg, value, declaredArg.defaultValue);
        }
      }
      processedArgs[index] = value;
    });
    this.processedArgs = processedArgs;
  }

  /**
   * Once we have a promise we chain, but call synchronously until then.
   *
   * @param {Promise|undefined} promise
   * @param {Function} fn
   * @return {Promise|undefined}
   * @api private
   */

  _chainOrCall(promise, fn) {
    // thenable
    if (promise && promise.then && typeof promise.then === 'function') {
      // already have a promise, chain callback
      return promise.then(() => fn());
    }
    // callback might return a promise
    return fn();
  }

  /**
   *
   * @param {Promise|undefined} promise
   * @param {string} event
   * @return {Promise|undefined}
   * @api private
   */

  _chainOrCallHooks(promise, event) {
    let result = promise;
    const hooks = [];
    getCommandAndParents(this)
      .reverse()
      .filter(cmd => cmd._lifeCycleHooks[event] !== undefined)
      .forEach(hookedCommand => {
        hookedCommand._lifeCycleHooks[event].forEach((callback) => {
          hooks.push({ hookedCommand, callback });
        });
      });
    if (event === 'postAction') {
      hooks.reverse();
    }

    hooks.forEach((hookDetail) => {
      result = this._chainOrCall(result, () => {
        return hookDetail.callback(hookDetail.hookedCommand, this);
      });
    });
    return result;
  }

  /**
   * Process arguments in context of this command.
   * Returns action result, in case it is a promise.
   *
   * @api private
   */

  _parseCommand(operands, unknown) {
    const parsed = this.parseOptions(unknown);
    this._parseOptionsEnv(); // after cli, so parseArg not called on both cli and env
    operands = operands.concat(parsed.operands);
    unknown = parsed.unknown;
    this.args = operands.concat(unknown);

    if (operands && this._findCommand(operands[0])) {
      return this._dispatchSubcommand(operands[0], operands.slice(1), unknown);
    }
    if (this._hasImplicitHelpCommand() && operands[0] === this._helpCommandName) {
      if (operands.length === 1) {
        this.help();
      }
      return this._dispatchSubcommand(operands[1], [], [this._helpLongFlag]);
    }
    if (this._defaultCommandName) {
      outputHelpIfRequested(this, unknown); // Run the help for default command from parent rather than passing to default command
      return this._dispatchSubcommand(this._defaultCommandName, operands, unknown);
    }
    if (this.commands.length && this.args.length === 0 && !this._actionHandler && !this._defaultCommandName) {
      // probably missing subcommand and no handler, user needs help (and exit)
      this.help({ error: true });
    }

    outputHelpIfRequested(this, parsed.unknown);
    this._checkForMissingMandatoryOptions();

    // We do not always call this check to avoid masking a "better" error, like unknown command.
    const checkForUnknownOptions = () => {
      if (parsed.unknown.length > 0) {
        this.unknownOption(parsed.unknown[0]);
      }
    };

    const commandEvent = `command:${this.name()}`;
    if (this._actionHandler) {
      checkForUnknownOptions();
      this._processArguments();

      let actionResult;
      actionResult = this._chainOrCallHooks(actionResult, 'preAction');
      actionResult = this._chainOrCall(actionResult, () => this._actionHandler(this.processedArgs));
      if (this.parent) this.parent.emit(commandEvent, operands, unknown); // legacy
      actionResult = this._chainOrCallHooks(actionResult, 'postAction');
      return actionResult;
    }
    if (this.parent && this.parent.listenerCount(commandEvent)) {
      checkForUnknownOptions();
      this._processArguments();
      this.parent.emit(commandEvent, operands, unknown); // legacy
    } else if (operands.length) {
      if (this._findCommand('*')) { // legacy default command
        return this._dispatchSubcommand('*', operands, unknown);
      }
      if (this.listenerCount('command:*')) {
        // skip option check, emit event for possible misspelling suggestion
        this.emit('command:*', operands, unknown);
      } else if (this.commands.length) {
        this.unknownCommand();
      } else {
        checkForUnknownOptions();
        this._processArguments();
      }
    } else if (this.commands.length) {
      checkForUnknownOptions();
      // This command has subcommands and nothing hooked up at this level, so display help (and exit).
      this.help({ error: true });
    } else {
      checkForUnknownOptions();
      this._processArguments();
      // fall through for caller to handle after calling .parse()
    }
  };

  /**
   * Find matching command.
   *
   * @api private
   */
  _findCommand(name) {
    if (!name) return undefined;
    return this.commands.find(cmd => cmd._name === name || cmd._aliases.includes(name));
  };

  /**
   * Return an option matching `arg` if any.
   *
   * @param {string} arg
   * @return {Option}
   * @api private
   */

  _findOption(arg) {
    return this.options.find(option => option.is(arg));
  };

  /**
   * Display an error message if a mandatory option does not have a value.
   * Lazy calling after checking for help flags from leaf subcommand.
   *
   * @api private
   */

  _checkForMissingMandatoryOptions() {
    // Walk up hierarchy so can call in subcommand after checking for displaying help.
    for (let cmd = this; cmd; cmd = cmd.parent) {
      cmd.options.forEach((anOption) => {
        if (anOption.mandatory && (cmd.getOptionValue(anOption.attributeName()) === undefined)) {
          cmd.missingMandatoryOptionValue(anOption);
        }
      });
    }
  };

  /**
   * Parse options from `argv` removing known options,
   * and return argv split into operands and unknown arguments.
   *
   * Examples:
   *
   *     argv => operands, unknown
   *     --known kkk op => [op], []
   *     op --known kkk => [op], []
   *     sub --unknown uuu op => [sub], [--unknown uuu op]
   *     sub -- --unknown uuu op => [sub --unknown uuu op], []
   *
   * @param {String[]} argv
   * @return {{operands: String[], unknown: String[]}}
   */

  parseOptions(argv) {
    const operands = []; // operands, not options or values
    const unknown = []; // first unknown option and remaining unknown args
    let dest = operands;
    const args = argv.slice();

    function maybeOption(arg) {
      return arg.length > 1 && arg[0] === '-';
    }

    // parse options
    let activeVariadicOption = null;
    while (args.length) {
      const arg = args.shift();

      // literal
      if (arg === '--') {
        if (dest === unknown) dest.push(arg);
        dest.push(...args);
        break;
      }

      if (activeVariadicOption && !maybeOption(arg)) {
        this.emit(`option:${activeVariadicOption.name()}`, arg);
        continue;
      }
      activeVariadicOption = null;

      if (maybeOption(arg)) {
        const option = this._findOption(arg);
        // recognised option, call listener to assign value with possible custom processing
        if (option) {
          if (option.required) {
            const value = args.shift();
            if (value === undefined) this.optionMissingArgument(option);
            this.emit(`option:${option.name()}`, value);
          } else if (option.optional) {
            let value = null;
            // historical behaviour is optional value is following arg unless an option
            if (args.length > 0 && !maybeOption(args[0])) {
              value = args.shift();
            }
            this.emit(`option:${option.name()}`, value);
          } else { // boolean flag
            this.emit(`option:${option.name()}`);
          }
          activeVariadicOption = option.variadic ? option : null;
          continue;
        }
      }

      // Look for combo options following single dash, eat first one if known.
      if (arg.length > 2 && arg[0] === '-' && arg[1] !== '-') {
        const option = this._findOption(`-${arg[1]}`);
        if (option) {
          if (option.required || (option.optional && this._combineFlagAndOptionalValue)) {
            // option with value following in same argument
            this.emit(`option:${option.name()}`, arg.slice(2));
          } else {
            // boolean option, emit and put back remainder of arg for further processing
            this.emit(`option:${option.name()}`);
            args.unshift(`-${arg.slice(2)}`);
          }
          continue;
        }
      }

      // Look for known long flag with value, like --foo=bar
      if (/^--[^=]+=/.test(arg)) {
        const index = arg.indexOf('=');
        const option = this._findOption(arg.slice(0, index));
        if (option && (option.required || option.optional)) {
          this.emit(`option:${option.name()}`, arg.slice(index + 1));
          continue;
        }
      }

      // Not a recognised option by this command.
      // Might be a command-argument, or subcommand option, or unknown option, or help command or option.

      // An unknown option means further arguments also classified as unknown so can be reprocessed by subcommands.
      if (maybeOption(arg)) {
        dest = unknown;
      }

      // If using positionalOptions, stop processing our options at subcommand.
      if ((this._enablePositionalOptions || this._passThroughOptions) && operands.length === 0 && unknown.length === 0) {
        if (this._findCommand(arg)) {
          operands.push(arg);
          if (args.length > 0) unknown.push(...args);
          break;
        } else if (arg === this._helpCommandName && this._hasImplicitHelpCommand()) {
          operands.push(arg);
          if (args.length > 0) operands.push(...args);
          break;
        } else if (this._defaultCommandName) {
          unknown.push(arg);
          if (args.length > 0) unknown.push(...args);
          break;
        }
      }

      // If using passThroughOptions, stop processing options at first command-argument.
      if (this._passThroughOptions) {
        dest.push(arg);
        if (args.length > 0) dest.push(...args);
        break;
      }

      // add arg
      dest.push(arg);
    }

    return { operands, unknown };
  };

  /**
   * Return an object containing options as key-value pairs
   *
   * @return {Object}
   */
  opts() {
    if (this._storeOptionsAsProperties) {
      // Preserve original behaviour so backwards compatible when still using properties
      const result = {};
      const len = this.options.length;

      for (let i = 0; i < len; i++) {
        const key = this.options[i].attributeName();
        result[key] = key === this._versionOptionName ? this._version : this[key];
      }
      return result;
    }

    return this._optionValues;
  };

  /**
   * Internal bottleneck for handling of parsing errors.
   *
   * @api private
   */
  _displayError(exitCode, code, message) {
    this._outputConfiguration.outputError(`${message}\n`, this._outputConfiguration.writeErr);
    if (typeof this._showHelpAfterError === 'string') {
      this._outputConfiguration.writeErr(`${this._showHelpAfterError}\n`);
    } else if (this._showHelpAfterError) {
      this._outputConfiguration.writeErr('\n');
      this.outputHelp({ error: true });
    }
    this._exit(exitCode, code, message);
  }

  /**
   * Apply any option related environment variables, if option does
   * not have a value from cli or client code.
   *
   * @api private
   */
  _parseOptionsEnv() {
    this.options.forEach((option) => {
      if (option.envVar && option.envVar in process.env) {
        const optionKey = option.attributeName();
        // Priority check. Do not overwrite cli or options from unknown source (client-code).
        if (this.getOptionValue(optionKey) === undefined || ['default', 'config', 'env'].includes(this.getOptionValueSource(optionKey))) {
          if (option.required || option.optional) { // option can take a value
            // keep very simple, optional always takes value
            this.emit(`optionEnv:${option.name()}`, process.env[option.envVar]);
          } else { // boolean
            // keep very simple, only care that envVar defined and not the value
            this.emit(`optionEnv:${option.name()}`);
          }
        }
      }
    });
  }

  /**
   * Argument `name` is missing.
   *
   * @param {string} name
   * @api private
   */

  missingArgument(name) {
    const message = `error: missing required argument '${name}'`;
    this._displayError(1, 'commander.missingArgument', message);
  };

  /**
   * `Option` is missing an argument.
   *
   * @param {Option} option
   * @api private
   */

  optionMissingArgument(option) {
    const message = `error: option '${option.flags}' argument missing`;
    this._displayError(1, 'commander.optionMissingArgument', message);
  };

  /**
   * `Option` does not have a value, and is a mandatory option.
   *
   * @param {Option} option
   * @api private
   */

  missingMandatoryOptionValue(option) {
    const message = `error: required option '${option.flags}' not specified`;
    this._displayError(1, 'commander.missingMandatoryOptionValue', message);
  };

  /**
   * Unknown option `flag`.
   *
   * @param {string} flag
   * @api private
   */

  unknownOption(flag) {
    if (this._allowUnknownOption) return;
    let suggestion = '';

    if (flag.startsWith('--') && this._showSuggestionAfterError) {
      // Looping to pick up the global options too
      let candidateFlags = [];
      let command = this;
      do {
        const moreFlags = command.createHelp().visibleOptions(command)
          .filter(option => option.long)
          .map(option => option.long);
        candidateFlags = candidateFlags.concat(moreFlags);
        command = command.parent;
      } while (command && !command._enablePositionalOptions);
      suggestion = suggestSimilar(flag, candidateFlags);
    }

    const message = `error: unknown option '${flag}'${suggestion}`;
    this._displayError(1, 'commander.unknownOption', message);
  };

  /**
   * Excess arguments, more than expected.
   *
   * @param {string[]} receivedArgs
   * @api private
   */

  _excessArguments(receivedArgs) {
    if (this._allowExcessArguments) return;

    const expected = this._args.length;
    const s = (expected === 1) ? '' : 's';
    const forSubcommand = this.parent ? ` for '${this.name()}'` : '';
    const message = `error: too many arguments${forSubcommand}. Expected ${expected} argument${s} but got ${receivedArgs.length}.`;
    this._displayError(1, 'commander.excessArguments', message);
  };

  /**
   * Unknown command.
   *
   * @api private
   */

  unknownCommand() {
    const unknownName = this.args[0];
    let suggestion = '';

    if (this._showSuggestionAfterError) {
      const candidateNames = [];
      this.createHelp().visibleCommands(this).forEach((command) => {
        candidateNames.push(command.name());
        // just visible alias
        if (command.alias()) candidateNames.push(command.alias());
      });
      suggestion = suggestSimilar(unknownName, candidateNames);
    }

    const message = `error: unknown command '${unknownName}'${suggestion}`;
    this._displayError(1, 'commander.unknownCommand', message);
  };

  /**
   * Set the program version to `str`.
   *
   * This method auto-registers the "-V, --version" flag
   * which will print the version number when passed.
   *
   * You can optionally supply the  flags and description to override the defaults.
   *
   * @param {string} str
   * @param {string} [flags]
   * @param {string} [description]
   * @return {this | string} `this` command for chaining, or version string if no arguments
   */

  version(str, flags, description) {
    if (str === undefined) return this._version;
    this._version = str;
    flags = flags || '-V, --version';
    description = description || 'output the version number';
    const versionOption = this.createOption(flags, description);
    this._versionOptionName = versionOption.attributeName();
    this.options.push(versionOption);
    this.on('option:' + versionOption.name(), () => {
      this._outputConfiguration.writeOut(`${str}\n`);
      this._exit(0, 'commander.version', str);
    });
    return this;
  };

  /**
   * Set the description to `str`.
   *
   * @param {string} [str]
   * @param {Object} [argsDescription]
   * @return {string|Command}
   */
  description(str, argsDescription) {
    if (str === undefined && argsDescription === undefined) return this._description;
    this._description = str;
    if (argsDescription) {
      this._argsDescription = argsDescription;
    }
    return this;
  };

  /**
   * Set an alias for the command.
   *
   * You may call more than once to add multiple aliases. Only the first alias is shown in the auto-generated help.
   *
   * @param {string} [alias]
   * @return {string|Command}
   */

  alias(alias) {
    if (alias === undefined) return this._aliases[0]; // just return first, for backwards compatibility

    /** @type {Command} */
    let command = this;
    if (this.commands.length !== 0 && this.commands[this.commands.length - 1]._executableHandler) {
      // assume adding alias for last added executable subcommand, rather than this
      command = this.commands[this.commands.length - 1];
    }

    if (alias === command._name) throw new Error('Command alias can\'t be the same as its name');

    command._aliases.push(alias);
    return this;
  };

  /**
   * Set aliases for the command.
   *
   * Only the first alias is shown in the auto-generated help.
   *
   * @param {string[]} [aliases]
   * @return {string[]|Command}
   */

  aliases(aliases) {
    // Getter for the array of aliases is the main reason for having aliases() in addition to alias().
    if (aliases === undefined) return this._aliases;

    aliases.forEach((alias) => this.alias(alias));
    return this;
  };

  /**
   * Set / get the command usage `str`.
   *
   * @param {string} [str]
   * @return {String|Command}
   */

  usage(str) {
    if (str === undefined) {
      if (this._usage) return this._usage;

      const args = this._args.map((arg) => {
        return humanReadableArgName(arg);
      });
      return [].concat(
        (this.options.length || this._hasHelpOption ? '[options]' : []),
        (this.commands.length ? '[command]' : []),
        (this._args.length ? args : [])
      ).join(' ');
    }

    this._usage = str;
    return this;
  };

  /**
   * Get or set the name of the command
   *
   * @param {string} [str]
   * @return {string|Command}
   */

  name(str) {
    if (str === undefined) return this._name;
    this._name = str;
    return this;
  };

  /**
   * Return program help documentation.
   *
   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to wrap for stderr instead of stdout
   * @return {string}
   */

  helpInformation(contextOptions) {
    const helper = this.createHelp();
    if (helper.helpWidth === undefined) {
      helper.helpWidth = (contextOptions && contextOptions.error) ? this._outputConfiguration.getErrHelpWidth() : this._outputConfiguration.getOutHelpWidth();
    }
    return helper.formatHelp(this, helper);
  };

  /**
   * @api private
   */

  _getHelpContext(contextOptions) {
    contextOptions = contextOptions || {};
    const context = { error: !!contextOptions.error };
    let write;
    if (context.error) {
      write = (arg) => this._outputConfiguration.writeErr(arg);
    } else {
      write = (arg) => this._outputConfiguration.writeOut(arg);
    }
    context.write = contextOptions.write || write;
    context.command = this;
    return context;
  }

  /**
   * Output help information for this command.
   *
   * Outputs built-in help, and custom text added using `.addHelpText()`.
   *
   * @param {{ error: boolean } | Function} [contextOptions] - pass {error:true} to write to stderr instead of stdout
   */

  outputHelp(contextOptions) {
    let deprecatedCallback;
    if (typeof contextOptions === 'function') {
      deprecatedCallback = contextOptions;
      contextOptions = undefined;
    }
    const context = this._getHelpContext(contextOptions);

    getCommandAndParents(this).reverse().forEach(command => command.emit('beforeAllHelp', context));
    this.emit('beforeHelp', context);

    let helpInformation = this.helpInformation(context);
    if (deprecatedCallback) {
      helpInformation = deprecatedCallback(helpInformation);
      if (typeof helpInformation !== 'string' && !Buffer.isBuffer(helpInformation)) {
        throw new Error('outputHelp callback must return a string or a Buffer');
      }
    }
    context.write(helpInformation);

    this.emit(this._helpLongFlag); // deprecated
    this.emit('afterHelp', context);
    getCommandAndParents(this).forEach(command => command.emit('afterAllHelp', context));
  };

  /**
   * You can pass in flags and a description to override the help
   * flags and help description for your command. Pass in false to
   * disable the built-in help option.
   *
   * @param {string | boolean} [flags]
   * @param {string} [description]
   * @return {Command} `this` command for chaining
   */

  helpOption(flags, description) {
    if (typeof flags === 'boolean') {
      this._hasHelpOption = flags;
      return this;
    }
    this._helpFlags = flags || this._helpFlags;
    this._helpDescription = description || this._helpDescription;

    const helpFlags = splitOptionFlags(this._helpFlags);
    this._helpShortFlag = helpFlags.shortFlag;
    this._helpLongFlag = helpFlags.longFlag;

    return this;
  };

  /**
   * Output help information and exit.
   *
   * Outputs built-in help, and custom text added using `.addHelpText()`.
   *
   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to write to stderr instead of stdout
   */

  help(contextOptions) {
    this.outputHelp(contextOptions);
    let exitCode = process.exitCode || 0;
    if (exitCode === 0 && contextOptions && typeof contextOptions !== 'function' && contextOptions.error) {
      exitCode = 1;
    }
    // message: do not have all displayed text available so only passing placeholder.
    this._exit(exitCode, 'commander.help', '(outputHelp)');
  };

  /**
   * Add additional text to be displayed with the built-in help.
   *
   * Position is 'before' or 'after' to affect just this command,
   * and 'beforeAll' or 'afterAll' to affect this command and all its subcommands.
   *
   * @param {string} position - before or after built-in help
   * @param {string | Function} text - string to add, or a function returning a string
   * @return {Command} `this` command for chaining
   */
  addHelpText(position, text) {
    const allowedValues = ['beforeAll', 'before', 'after', 'afterAll'];
    if (!allowedValues.includes(position)) {
      throw new Error(`Unexpected value for position to addHelpText.
Expecting one of '${allowedValues.join("', '")}'`);
    }
    const helpEvent = `${position}Help`;
    this.on(helpEvent, (context) => {
      let helpStr;
      if (typeof text === 'function') {
        helpStr = text({ error: context.error, command: context.command });
      } else {
        helpStr = text;
      }
      // Ignore falsy value when nothing to output.
      if (helpStr) {
        context.write(`${helpStr}\n`);
      }
    });
    return this;
  }
};

/**
 * Output help information if help flags specified
 *
 * @param {Command} cmd - command to output help for
 * @param {Array} args - array of options to search for help flags
 * @api private
 */

function outputHelpIfRequested(cmd, args) {
  const helpOption = cmd._hasHelpOption && args.find(arg => arg === cmd._helpLongFlag || arg === cmd._helpShortFlag);
  if (helpOption) {
    cmd.outputHelp();
    // (Do not have all displayed text available so only passing placeholder.)
    cmd._exit(0, 'commander.helpDisplayed', '(outputHelp)');
  }
}

/**
 * Scan arguments and increment port number for inspect calls (to avoid conflicts when spawning new command).
 *
 * @param {string[]} args - array of arguments from node.execArgv
 * @returns {string[]}
 * @api private
 */

function incrementNodeInspectorPort(args) {
  // Testing for these options:
  //  --inspect[=[host:]port]
  //  --inspect-brk[=[host:]port]
  //  --inspect-port=[host:]port
  return args.map((arg) => {
    if (!arg.startsWith('--inspect')) {
      return arg;
    }
    let debugOption;
    let debugHost = '127.0.0.1';
    let debugPort = '9229';
    let match;
    if ((match = arg.match(/^(--inspect(-brk)?)$/)) !== null) {
      // e.g. --inspect
      debugOption = match[1];
    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null) {
      debugOption = match[1];
      if (/^\d+$/.test(match[3])) {
        // e.g. --inspect=1234
        debugPort = match[3];
      } else {
        // e.g. --inspect=localhost
        debugHost = match[3];
      }
    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+):(\d+)$/)) !== null) {
      // e.g. --inspect=localhost:1234
      debugOption = match[1];
      debugHost = match[3];
      debugPort = match[4];
    }

    if (debugOption && debugPort !== '0') {
      return `${debugOption}=${debugHost}:${parseInt(debugPort) + 1}`;
    }
    return arg;
  });
}

/**
 * @param {Command} startCommand
 * @returns {Command[]}
 * @api private
 */

function getCommandAndParents(startCommand) {
  const result = [];
  for (let command = startCommand; command; command = command.parent) {
    result.push(command);
  }
  return result;
}

exports.Command = Command;


/***/ }),

/***/ 8498:
/***/ ((__unused_webpack_module, exports) => {

// @ts-check

/**
 * CommanderError class
 * @class
 */
class CommanderError extends Error {
  /**
   * Constructs the CommanderError class
   * @param {number} exitCode suggested exit code which could be used with process.exit
   * @param {string} code an id string representing the error
   * @param {string} message human-readable description of the error
   * @constructor
   */
  constructor(exitCode, code, message) {
    super(message);
    // properly capture stack trace in Node.js
    Error.captureStackTrace(this, this.constructor);
    this.name = this.constructor.name;
    this.code = code;
    this.exitCode = exitCode;
    this.nestedError = undefined;
  }
}

/**
 * InvalidArgumentError class
 * @class
 */
class InvalidArgumentError extends CommanderError {
  /**
   * Constructs the InvalidArgumentError class
   * @param {string} [message] explanation of why argument is invalid
   * @constructor
   */
  constructor(message) {
    super(1, 'commander.invalidArgument', message);
    // properly capture stack trace in Node.js
    Error.captureStackTrace(this, this.constructor);
    this.name = this.constructor.name;
  }
}

exports.CommanderError = CommanderError;
exports.InvalidArgumentError = InvalidArgumentError;


/***/ }),

/***/ 1956:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

const { humanReadableArgName } = __nccwpck_require__(647);

/**
 * TypeScript import types for JSDoc, used by Visual Studio Code IntelliSense and `npm run typescript-checkJS`
 * https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#import-types
 * @typedef { import("./argument.js").Argument } Argument
 * @typedef { import("./command.js").Command } Command
 * @typedef { import("./option.js").Option } Option
 */

// @ts-check

// Although this is a class, methods are static in style to allow override using subclass or just functions.
class Help {
  constructor() {
    this.helpWidth = undefined;
    this.sortSubcommands = false;
    this.sortOptions = false;
  }

  /**
   * Get an array of the visible subcommands. Includes a placeholder for the implicit help command, if there is one.
   *
   * @param {Command} cmd
   * @returns {Command[]}
   */

  visibleCommands(cmd) {
    const visibleCommands = cmd.commands.filter(cmd => !cmd._hidden);
    if (cmd._hasImplicitHelpCommand()) {
      // Create a command matching the implicit help command.
      const [, helpName, helpArgs] = cmd._helpCommandnameAndArgs.match(/([^ ]+) *(.*)/);
      const helpCommand = cmd.createCommand(helpName)
        .helpOption(false);
      helpCommand.description(cmd._helpCommandDescription);
      if (helpArgs) helpCommand.arguments(helpArgs);
      visibleCommands.push(helpCommand);
    }
    if (this.sortSubcommands) {
      visibleCommands.sort((a, b) => {
        // @ts-ignore: overloaded return type
        return a.name().localeCompare(b.name());
      });
    }
    return visibleCommands;
  }

  /**
   * Get an array of the visible options. Includes a placeholder for the implicit help option, if there is one.
   *
   * @param {Command} cmd
   * @returns {Option[]}
   */

  visibleOptions(cmd) {
    const visibleOptions = cmd.options.filter((option) => !option.hidden);
    // Implicit help
    const showShortHelpFlag = cmd._hasHelpOption && cmd._helpShortFlag && !cmd._findOption(cmd._helpShortFlag);
    const showLongHelpFlag = cmd._hasHelpOption && !cmd._findOption(cmd._helpLongFlag);
    if (showShortHelpFlag || showLongHelpFlag) {
      let helpOption;
      if (!showShortHelpFlag) {
        helpOption = cmd.createOption(cmd._helpLongFlag, cmd._helpDescription);
      } else if (!showLongHelpFlag) {
        helpOption = cmd.createOption(cmd._helpShortFlag, cmd._helpDescription);
      } else {
        helpOption = cmd.createOption(cmd._helpFlags, cmd._helpDescription);
      }
      visibleOptions.push(helpOption);
    }
    if (this.sortOptions) {
      const getSortKey = (option) => {
        // WYSIWYG for order displayed in help with short before long, no special handling for negated.
        return option.short ? option.short.replace(/^-/, '') : option.long.replace(/^--/, '');
      };
      visibleOptions.sort((a, b) => {
        return getSortKey(a).localeCompare(getSortKey(b));
      });
    }
    return visibleOptions;
  }

  /**
   * Get an array of the arguments if any have a description.
   *
   * @param {Command} cmd
   * @returns {Argument[]}
   */

  visibleArguments(cmd) {
    // Side effect! Apply the legacy descriptions before the arguments are displayed.
    if (cmd._argsDescription) {
      cmd._args.forEach(argument => {
        argument.description = argument.description || cmd._argsDescription[argument.name()] || '';
      });
    }

    // If there are any arguments with a description then return all the arguments.
    if (cmd._args.find(argument => argument.description)) {
      return cmd._args;
    };
    return [];
  }

  /**
   * Get the command term to show in the list of subcommands.
   *
   * @param {Command} cmd
   * @returns {string}
   */

  subcommandTerm(cmd) {
    // Legacy. Ignores custom usage string, and nested commands.
    const args = cmd._args.map(arg => humanReadableArgName(arg)).join(' ');
    return cmd._name +
      (cmd._aliases[0] ? '|' + cmd._aliases[0] : '') +
      (cmd.options.length ? ' [options]' : '') + // simplistic check for non-help option
      (args ? ' ' + args : '');
  }

  /**
   * Get the option term to show in the list of options.
   *
   * @param {Option} option
   * @returns {string}
   */

  optionTerm(option) {
    return option.flags;
  }

  /**
   * Get the argument term to show in the list of arguments.
   *
   * @param {Argument} argument
   * @returns {string}
   */

  argumentTerm(argument) {
    return argument.name();
  }

  /**
   * Get the longest command term length.
   *
   * @param {Command} cmd
   * @param {Help} helper
   * @returns {number}
   */

  longestSubcommandTermLength(cmd, helper) {
    return helper.visibleCommands(cmd).reduce((max, command) => {
      return Math.max(max, helper.subcommandTerm(command).length);
    }, 0);
  };

  /**
   * Get the longest option term length.
   *
   * @param {Command} cmd
   * @param {Help} helper
   * @returns {number}
   */

  longestOptionTermLength(cmd, helper) {
    return helper.visibleOptions(cmd).reduce((max, option) => {
      return Math.max(max, helper.optionTerm(option).length);
    }, 0);
  };

  /**
   * Get the longest argument term length.
   *
   * @param {Command} cmd
   * @param {Help} helper
   * @returns {number}
   */

  longestArgumentTermLength(cmd, helper) {
    return helper.visibleArguments(cmd).reduce((max, argument) => {
      return Math.max(max, helper.argumentTerm(argument).length);
    }, 0);
  };

  /**
   * Get the command usage to be displayed at the top of the built-in help.
   *
   * @param {Command} cmd
   * @returns {string}
   */

  commandUsage(cmd) {
    // Usage
    let cmdName = cmd._name;
    if (cmd._aliases[0]) {
      cmdName = cmdName + '|' + cmd._aliases[0];
    }
    let parentCmdNames = '';
    for (let parentCmd = cmd.parent; parentCmd; parentCmd = parentCmd.parent) {
      parentCmdNames = parentCmd.name() + ' ' + parentCmdNames;
    }
    return parentCmdNames + cmdName + ' ' + cmd.usage();
  }

  /**
   * Get the description for the command.
   *
   * @param {Command} cmd
   * @returns {string}
   */

  commandDescription(cmd) {
    // @ts-ignore: overloaded return type
    return cmd.description();
  }

  /**
   * Get the command description to show in the list of subcommands.
   *
   * @param {Command} cmd
   * @returns {string}
   */

  subcommandDescription(cmd) {
    // @ts-ignore: overloaded return type
    return cmd.description();
  }

  /**
   * Get the option description to show in the list of options.
   *
   * @param {Option} option
   * @return {string}
   */

  optionDescription(option) {
    const extraInfo = [];
    // Some of these do not make sense for negated boolean and suppress for backwards compatibility.

    if (option.argChoices && !option.negate) {
      extraInfo.push(
        // use stringify to match the display of the default value
        `choices: ${option.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`);
    }
    if (option.defaultValue !== undefined && !option.negate) {
      extraInfo.push(`default: ${option.defaultValueDescription || JSON.stringify(option.defaultValue)}`);
    }
    if (option.envVar !== undefined) {
      extraInfo.push(`env: ${option.envVar}`);
    }
    if (extraInfo.length > 0) {
      return `${option.description} (${extraInfo.join(', ')})`;
    }

    return option.description;
  };

  /**
   * Get the argument description to show in the list of arguments.
   *
   * @param {Argument} argument
   * @return {string}
   */

  argumentDescription(argument) {
    const extraInfo = [];
    if (argument.argChoices) {
      extraInfo.push(
        // use stringify to match the display of the default value
        `choices: ${argument.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`);
    }
    if (argument.defaultValue !== undefined) {
      extraInfo.push(`default: ${argument.defaultValueDescription || JSON.stringify(argument.defaultValue)}`);
    }
    if (extraInfo.length > 0) {
      const extraDescripton = `(${extraInfo.join(', ')})`;
      if (argument.description) {
        return `${argument.description} ${extraDescripton}`;
      }
      return extraDescripton;
    }
    return argument.description;
  }

  /**
   * Generate the built-in help text.
   *
   * @param {Command} cmd
   * @param {Help} helper
   * @returns {string}
   */

  formatHelp(cmd, helper) {
    const termWidth = helper.padWidth(cmd, helper);
    const helpWidth = helper.helpWidth || 80;
    const itemIndentWidth = 2;
    const itemSeparatorWidth = 2; // between term and description
    function formatItem(term, description) {
      if (description) {
        const fullText = `${term.padEnd(termWidth + itemSeparatorWidth)}${description}`;
        return helper.wrap(fullText, helpWidth - itemIndentWidth, termWidth + itemSeparatorWidth);
      }
      return term;
    };
    function formatList(textArray) {
      return textArray.join('\n').replace(/^/gm, ' '.repeat(itemIndentWidth));
    }

    // Usage
    let output = [`Usage: ${helper.commandUsage(cmd)}`, ''];

    // Description
    const commandDescription = helper.commandDescription(cmd);
    if (commandDescription.length > 0) {
      output = output.concat([commandDescription, '']);
    }

    // Arguments
    const argumentList = helper.visibleArguments(cmd).map((argument) => {
      return formatItem(helper.argumentTerm(argument), helper.argumentDescription(argument));
    });
    if (argumentList.length > 0) {
      output = output.concat(['Arguments:', formatList(argumentList), '']);
    }

    // Options
    const optionList = helper.visibleOptions(cmd).map((option) => {
      return formatItem(helper.optionTerm(option), helper.optionDescription(option));
    });
    if (optionList.length > 0) {
      output = output.concat(['Options:', formatList(optionList), '']);
    }

    // Commands
    const commandList = helper.visibleCommands(cmd).map((cmd) => {
      return formatItem(helper.subcommandTerm(cmd), helper.subcommandDescription(cmd));
    });
    if (commandList.length > 0) {
      output = output.concat(['Commands:', formatList(commandList), '']);
    }

    return output.join('\n');
  }

  /**
   * Calculate the pad width from the maximum term length.
   *
   * @param {Command} cmd
   * @param {Help} helper
   * @returns {number}
   */

  padWidth(cmd, helper) {
    return Math.max(
      helper.longestOptionTermLength(cmd, helper),
      helper.longestSubcommandTermLength(cmd, helper),
      helper.longestArgumentTermLength(cmd, helper)
    );
  };

  /**
   * Wrap the given string to width characters per line, with lines after the first indented.
   * Do not wrap if insufficient room for wrapping (minColumnWidth), or string is manually formatted.
   *
   * @param {string} str
   * @param {number} width
   * @param {number} indent
   * @param {number} [minColumnWidth=40]
   * @return {string}
   *
   */

  wrap(str, width, indent, minColumnWidth = 40) {
    // Detect manually wrapped and indented strings by searching for line breaks
    // followed by multiple spaces/tabs.
    if (str.match(/[\n]\s+/)) return str;
    // Do not wrap if not enough room for a wrapped column of text (as could end up with a word per line).
    const columnWidth = width - indent;
    if (columnWidth < minColumnWidth) return str;

    const leadingStr = str.substr(0, indent);
    const columnText = str.substr(indent);

    const indentString = ' '.repeat(indent);
    const regex = new RegExp('.{1,' + (columnWidth - 1) + '}([\\s\u200B]|$)|[^\\s\u200B]+?([\\s\u200B]|$)', 'g');
    const lines = columnText.match(regex) || [];
    return leadingStr + lines.map((line, i) => {
      if (line.slice(-1) === '\n') {
        line = line.slice(0, line.length - 1);
      }
      return ((i > 0) ? indentString : '') + line.trimRight();
    }).join('\n');
  }
}

exports.Help = Help;


/***/ }),

/***/ 9663:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

const { InvalidArgumentError } = __nccwpck_require__(8498);

// @ts-check

class Option {
  /**
   * Initialize a new `Option` with the given `flags` and `description`.
   *
   * @param {string} flags
   * @param {string} [description]
   */

  constructor(flags, description) {
    this.flags = flags;
    this.description = description || '';

    this.required = flags.includes('<'); // A value must be supplied when the option is specified.
    this.optional = flags.includes('['); // A value is optional when the option is specified.
    // variadic test ignores <value,...> et al which might be used to describe custom splitting of single argument
    this.variadic = /\w\.\.\.[>\]]$/.test(flags); // The option can take multiple values.
    this.mandatory = false; // The option must have a value after parsing, which usually means it must be specified on command line.
    const optionFlags = splitOptionFlags(flags);
    this.short = optionFlags.shortFlag;
    this.long = optionFlags.longFlag;
    this.negate = false;
    if (this.long) {
      this.negate = this.long.startsWith('--no-');
    }
    this.defaultValue = undefined;
    this.defaultValueDescription = undefined;
    this.envVar = undefined;
    this.parseArg = undefined;
    this.hidden = false;
    this.argChoices = undefined;
  }

  /**
   * Set the default value, and optionally supply the description to be displayed in the help.
   *
   * @param {any} value
   * @param {string} [description]
   * @return {Option}
   */

  default(value, description) {
    this.defaultValue = value;
    this.defaultValueDescription = description;
    return this;
  };

  /**
   * Set environment variable to check for option value.
   * Priority order of option values is default < env < cli
   *
   * @param {string} name
   * @return {Option}
   */

  env(name) {
    this.envVar = name;
    return this;
  };

  /**
   * Set the custom handler for processing CLI option arguments into option values.
   *
   * @param {Function} [fn]
   * @return {Option}
   */

  argParser(fn) {
    this.parseArg = fn;
    return this;
  };

  /**
   * Whether the option is mandatory and must have a value after parsing.
   *
   * @param {boolean} [mandatory=true]
   * @return {Option}
   */

  makeOptionMandatory(mandatory = true) {
    this.mandatory = !!mandatory;
    return this;
  };

  /**
   * Hide option in help.
   *
   * @param {boolean} [hide=true]
   * @return {Option}
   */

  hideHelp(hide = true) {
    this.hidden = !!hide;
    return this;
  };

  /**
   * @api private
   */

  _concatValue(value, previous) {
    if (previous === this.defaultValue || !Array.isArray(previous)) {
      return [value];
    }

    return previous.concat(value);
  }

  /**
   * Only allow option value to be one of choices.
   *
   * @param {string[]} values
   * @return {Option}
   */

  choices(values) {
    this.argChoices = values;
    this.parseArg = (arg, previous) => {
      if (!values.includes(arg)) {
        throw new InvalidArgumentError(`Allowed choices are ${values.join(', ')}.`);
      }
      if (this.variadic) {
        return this._concatValue(arg, previous);
      }
      return arg;
    };
    return this;
  };

  /**
   * Return option name.
   *
   * @return {string}
   */

  name() {
    if (this.long) {
      return this.long.replace(/^--/, '');
    }
    return this.short.replace(/^-/, '');
  };

  /**
   * Return option name, in a camelcase format that can be used
   * as a object attribute key.
   *
   * @return {string}
   * @api private
   */

  attributeName() {
    return camelcase(this.name().replace(/^no-/, ''));
  };

  /**
   * Check if `arg` matches the short or long flag.
   *
   * @param {string} arg
   * @return {boolean}
   * @api private
   */

  is(arg) {
    return this.short === arg || this.long === arg;
  };
}

/**
 * Convert string from kebab-case to camelCase.
 *
 * @param {string} str
 * @return {string}
 * @api private
 */

function camelcase(str) {
  return str.split('-').reduce((str, word) => {
    return str + word[0].toUpperCase() + word.slice(1);
  });
}

/**
 * Split the short and long flag out of something like '-m,--mixed <value>'
 *
 * @api private
 */

function splitOptionFlags(flags) {
  let shortFlag;
  let longFlag;
  // Use original very loose parsing to maintain backwards compatibility for now,
  // which allowed for example unintended `-sw, --short-word` [sic].
  const flagParts = flags.split(/[ |,]+/);
  if (flagParts.length > 1 && !/^[[<]/.test(flagParts[1])) shortFlag = flagParts.shift();
  longFlag = flagParts.shift();
  // Add support for lone short flag without significantly changing parsing!
  if (!shortFlag && /^-[^-]$/.test(longFlag)) {
    shortFlag = longFlag;
    longFlag = undefined;
  }
  return { shortFlag, longFlag };
}

exports.Option = Option;
exports.splitOptionFlags = splitOptionFlags;


/***/ }),

/***/ 4545:
/***/ ((__unused_webpack_module, exports) => {

const maxDistance = 3;

function editDistance(a, b) {
  // https://en.wikipedia.org/wiki/Damerau–Levenshtein_distance
  // Calculating optimal string alignment distance, no substring is edited more than once.
  // (Simple implementation.)

  // Quick early exit, return worst case.
  if (Math.abs(a.length - b.length) > maxDistance) return Math.max(a.length, b.length);

  // distance between prefix substrings of a and b
  const d = [];

  // pure deletions turn a into empty string
  for (let i = 0; i <= a.length; i++) {
    d[i] = [i];
  }
  // pure insertions turn empty string into b
  for (let j = 0; j <= b.length; j++) {
    d[0][j] = j;
  }

  // fill matrix
  for (let j = 1; j <= b.length; j++) {
    for (let i = 1; i <= a.length; i++) {
      let cost = 1;
      if (a[i - 1] === b[j - 1]) {
        cost = 0;
      } else {
        cost = 1;
      }
      d[i][j] = Math.min(
        d[i - 1][j] + 1, // deletion
        d[i][j - 1] + 1, // insertion
        d[i - 1][j - 1] + cost // substitution
      );
      // transposition
      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {
        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + 1);
      }
    }
  }

  return d[a.length][b.length];
}

/**
 * Find close matches, restricted to same number of edits.
 *
 * @param {string} word
 * @param {string[]} candidates
 * @returns {string}
 */

function suggestSimilar(word, candidates) {
  if (!candidates || candidates.length === 0) return '';
  // remove possible duplicates
  candidates = Array.from(new Set(candidates));

  const searchingOptions = word.startsWith('--');
  if (searchingOptions) {
    word = word.slice(2);
    candidates = candidates.map(candidate => candidate.slice(2));
  }

  let similar = [];
  let bestDistance = maxDistance;
  const minSimilarity = 0.4;
  candidates.forEach((candidate) => {
    if (candidate.length <= 1) return; // no one character guesses

    const distance = editDistance(word, candidate);
    const length = Math.max(word.length, candidate.length);
    const similarity = (length - distance) / length;
    if (similarity > minSimilarity) {
      if (distance < bestDistance) {
        // better edit distance, throw away previous worse matches
        bestDistance = distance;
        similar = [candidate];
      } else if (distance === bestDistance) {
        similar.push(candidate);
      }
    }
  });

  similar.sort((a, b) => a.localeCompare(b));
  if (searchingOptions) {
    similar = similar.map(candidate => `--${candidate}`);
  }

  if (similar.length > 1) {
    return `\n(Did you mean one of ${similar.join(', ')}?)`;
  }
  if (similar.length === 1) {
    return `\n(Did you mean ${similar[0]}?)`;
  }
  return '';
}

exports.suggestSimilar = suggestSimilar;


/***/ }),

/***/ 1002:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"@terminusdb/terminusdb-client","version":"10.0.32","description":"TerminusDB client library","main":"index.js","types":"./dist/typescript/index.d.ts","files":["*.md","lib","dist"],"directories":{"lib":"lib","test":"test","dist":"dist"},"publishConfig":{"access":"public"},"author":"kevin@terminusdb.com","license":"Apache-2.0","dependencies":{"axios":"^0.25.0","follow-redirects":"^1.14.8","form-data":"^4.0.0","jest":"^29.1.2","node-forge":"^1.0.0","pako":"^2.0.4","pathval":"^1.1.1","ts-node":"^10.9.1","underscore":"^1.13.2"},"devDependencies":{"@babel/core":"^7.13.10","@babel/preset-env":"^7.13.12","@babel/register":"^7.13.8","@types/jest":"^29.1.2","babel-loader":"^8.0.6","chai":"^4.3.4","concurrently":"^7.4.0","eol":"^0.9.1","eslint":"^8.6.0","eslint-config-airbnb-base":"^15.0.0","eslint-config-prettier":"6.11.0","eslint-plugin-import":"^2.25.4","eslint-plugin-prettier":"3.1.3","html-webpack-plugin":"^5.3.1","husky":"^7.0.4","jsdoc-to-markdown":"^7.1.0","mocha":"^9.1.3","nyc":"^15.1.0","prettier":"^1.19.1","sinon":"^12.0.1","ts-jest":"^29.0.3","typescript":"^4.6.4","webpack":"^5.36.2","webpack-cli":"^4.6.0","webpack-dev-server":"^4.6.0"},"scripts":{"mkdocs:multi":"node ./docs/createDocs.js","mkdocs:src":"docco lib/*.js -l plain -x md -o docs/api","mkdocs:api":"jsdoc2md --configure docs/doc_config.json --partial  docs/partial/scope.hbs docs/partial/member-index.hbs docs/partial/header.hbs --helper docs/helper/format.js --files lib/woql.js lib/woqlClient.js lib/typedef.js > docs/api/api.js.md","mkdocs":"cp README.md docs/ && npm run mkdocs:multi","test:integration":"jest","test":"npm run cover","test:only":"mocha --require @babel/register --require @babel/preset-env --recursive  ","test:watch":"mocha --watch --require @babel/register --require @babel/preset-env --recursive","test:examples":"node examples/","cover":"nyc --check-coverage --lines 30 npm run test:only ","lint:check":"eslint .","lint":"eslint --fix .","build":"webpack --mode production && tsc","coveralls-after":"nyc --reporter=lcov mocha --require @babel/register --require @babel/preset-env","npm:publish":"npm publish --access public","test-single":"mocha $1","woql-test":"mocha test/woqlTripleBuilder.spec.js  test/woql.spec.js test/woqlTripleBuilder01.spec.js test/woqlExtra.spec.js","git-tag":"git tag $npm_package_version","prepare":"husky install","generate-types":"tsc"},"repository":{"type":"git","url":"git+https://github.com/terminusdb/terminusdb-client-js.git"},"keywords":["Terminus","WOQL","Driver","Database","DB"],"bugs":{"url":"https://github.com/terminusdb/terminusdb-client/issues"},"homepage":"https://github.com/terminusdb/terminusdb-client#readme","browser":{"http":false,"https":false,"net":false,"path":false,"stream":false,"tls":false,"fs":false}}');

/***/ }),

/***/ 3765:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"application/1d-interleaved-parityfec":{"source":"iana"},"application/3gpdash-qoe-report+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/3gpp-ims+xml":{"source":"iana","compressible":true},"application/3gpphal+json":{"source":"iana","compressible":true},"application/3gpphalforms+json":{"source":"iana","compressible":true},"application/a2l":{"source":"iana"},"application/ace+cbor":{"source":"iana"},"application/activemessage":{"source":"iana"},"application/activity+json":{"source":"iana","compressible":true},"application/alto-costmap+json":{"source":"iana","compressible":true},"application/alto-costmapfilter+json":{"source":"iana","compressible":true},"application/alto-directory+json":{"source":"iana","compressible":true},"application/alto-endpointcost+json":{"source":"iana","compressible":true},"application/alto-endpointcostparams+json":{"source":"iana","compressible":true},"application/alto-endpointprop+json":{"source":"iana","compressible":true},"application/alto-endpointpropparams+json":{"source":"iana","compressible":true},"application/alto-error+json":{"source":"iana","compressible":true},"application/alto-networkmap+json":{"source":"iana","compressible":true},"application/alto-networkmapfilter+json":{"source":"iana","compressible":true},"application/alto-updatestreamcontrol+json":{"source":"iana","compressible":true},"application/alto-updatestreamparams+json":{"source":"iana","compressible":true},"application/aml":{"source":"iana"},"application/andrew-inset":{"source":"iana","extensions":["ez"]},"application/applefile":{"source":"iana"},"application/applixware":{"source":"apache","extensions":["aw"]},"application/at+jwt":{"source":"iana"},"application/atf":{"source":"iana"},"application/atfx":{"source":"iana"},"application/atom+xml":{"source":"iana","compressible":true,"extensions":["atom"]},"application/atomcat+xml":{"source":"iana","compressible":true,"extensions":["atomcat"]},"application/atomdeleted+xml":{"source":"iana","compressible":true,"extensions":["atomdeleted"]},"application/atomicmail":{"source":"iana"},"application/atomsvc+xml":{"source":"iana","compressible":true,"extensions":["atomsvc"]},"application/atsc-dwd+xml":{"source":"iana","compressible":true,"extensions":["dwd"]},"application/atsc-dynamic-event-message":{"source":"iana"},"application/atsc-held+xml":{"source":"iana","compressible":true,"extensions":["held"]},"application/atsc-rdt+json":{"source":"iana","compressible":true},"application/atsc-rsat+xml":{"source":"iana","compressible":true,"extensions":["rsat"]},"application/atxml":{"source":"iana"},"application/auth-policy+xml":{"source":"iana","compressible":true},"application/bacnet-xdd+zip":{"source":"iana","compressible":false},"application/batch-smtp":{"source":"iana"},"application/bdoc":{"compressible":false,"extensions":["bdoc"]},"application/beep+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/calendar+json":{"source":"iana","compressible":true},"application/calendar+xml":{"source":"iana","compressible":true,"extensions":["xcs"]},"application/call-completion":{"source":"iana"},"application/cals-1840":{"source":"iana"},"application/captive+json":{"source":"iana","compressible":true},"application/cbor":{"source":"iana"},"application/cbor-seq":{"source":"iana"},"application/cccex":{"source":"iana"},"application/ccmp+xml":{"source":"iana","compressible":true},"application/ccxml+xml":{"source":"iana","compressible":true,"extensions":["ccxml"]},"application/cdfx+xml":{"source":"iana","compressible":true,"extensions":["cdfx"]},"application/cdmi-capability":{"source":"iana","extensions":["cdmia"]},"application/cdmi-container":{"source":"iana","extensions":["cdmic"]},"application/cdmi-domain":{"source":"iana","extensions":["cdmid"]},"application/cdmi-object":{"source":"iana","extensions":["cdmio"]},"application/cdmi-queue":{"source":"iana","extensions":["cdmiq"]},"application/cdni":{"source":"iana"},"application/cea":{"source":"iana"},"application/cea-2018+xml":{"source":"iana","compressible":true},"application/cellml+xml":{"source":"iana","compressible":true},"application/cfw":{"source":"iana"},"application/city+json":{"source":"iana","compressible":true},"application/clr":{"source":"iana"},"application/clue+xml":{"source":"iana","compressible":true},"application/clue_info+xml":{"source":"iana","compressible":true},"application/cms":{"source":"iana"},"application/cnrp+xml":{"source":"iana","compressible":true},"application/coap-group+json":{"source":"iana","compressible":true},"application/coap-payload":{"source":"iana"},"application/commonground":{"source":"iana"},"application/conference-info+xml":{"source":"iana","compressible":true},"application/cose":{"source":"iana"},"application/cose-key":{"source":"iana"},"application/cose-key-set":{"source":"iana"},"application/cpl+xml":{"source":"iana","compressible":true,"extensions":["cpl"]},"application/csrattrs":{"source":"iana"},"application/csta+xml":{"source":"iana","compressible":true},"application/cstadata+xml":{"source":"iana","compressible":true},"application/csvm+json":{"source":"iana","compressible":true},"application/cu-seeme":{"source":"apache","extensions":["cu"]},"application/cwt":{"source":"iana"},"application/cybercash":{"source":"iana"},"application/dart":{"compressible":true},"application/dash+xml":{"source":"iana","compressible":true,"extensions":["mpd"]},"application/dash-patch+xml":{"source":"iana","compressible":true,"extensions":["mpp"]},"application/dashdelta":{"source":"iana"},"application/davmount+xml":{"source":"iana","compressible":true,"extensions":["davmount"]},"application/dca-rft":{"source":"iana"},"application/dcd":{"source":"iana"},"application/dec-dx":{"source":"iana"},"application/dialog-info+xml":{"source":"iana","compressible":true},"application/dicom":{"source":"iana"},"application/dicom+json":{"source":"iana","compressible":true},"application/dicom+xml":{"source":"iana","compressible":true},"application/dii":{"source":"iana"},"application/dit":{"source":"iana"},"application/dns":{"source":"iana"},"application/dns+json":{"source":"iana","compressible":true},"application/dns-message":{"source":"iana"},"application/docbook+xml":{"source":"apache","compressible":true,"extensions":["dbk"]},"application/dots+cbor":{"source":"iana"},"application/dskpp+xml":{"source":"iana","compressible":true},"application/dssc+der":{"source":"iana","extensions":["dssc"]},"application/dssc+xml":{"source":"iana","compressible":true,"extensions":["xdssc"]},"application/dvcs":{"source":"iana"},"application/ecmascript":{"source":"iana","compressible":true,"extensions":["es","ecma"]},"application/edi-consent":{"source":"iana"},"application/edi-x12":{"source":"iana","compressible":false},"application/edifact":{"source":"iana","compressible":false},"application/efi":{"source":"iana"},"application/elm+json":{"source":"iana","charset":"UTF-8","compressible":true},"application/elm+xml":{"source":"iana","compressible":true},"application/emergencycalldata.cap+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/emergencycalldata.comment+xml":{"source":"iana","compressible":true},"application/emergencycalldata.control+xml":{"source":"iana","compressible":true},"application/emergencycalldata.deviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.ecall.msd":{"source":"iana"},"application/emergencycalldata.providerinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.serviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.subscriberinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.veds+xml":{"source":"iana","compressible":true},"application/emma+xml":{"source":"iana","compressible":true,"extensions":["emma"]},"application/emotionml+xml":{"source":"iana","compressible":true,"extensions":["emotionml"]},"application/encaprtp":{"source":"iana"},"application/epp+xml":{"source":"iana","compressible":true},"application/epub+zip":{"source":"iana","compressible":false,"extensions":["epub"]},"application/eshop":{"source":"iana"},"application/exi":{"source":"iana","extensions":["exi"]},"application/expect-ct-report+json":{"source":"iana","compressible":true},"application/express":{"source":"iana","extensions":["exp"]},"application/fastinfoset":{"source":"iana"},"application/fastsoap":{"source":"iana"},"application/fdt+xml":{"source":"iana","compressible":true,"extensions":["fdt"]},"application/fhir+json":{"source":"iana","charset":"UTF-8","compressible":true},"application/fhir+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/fido.trusted-apps+json":{"compressible":true},"application/fits":{"source":"iana"},"application/flexfec":{"source":"iana"},"application/font-sfnt":{"source":"iana"},"application/font-tdpfr":{"source":"iana","extensions":["pfr"]},"application/font-woff":{"source":"iana","compressible":false},"application/framework-attributes+xml":{"source":"iana","compressible":true},"application/geo+json":{"source":"iana","compressible":true,"extensions":["geojson"]},"application/geo+json-seq":{"source":"iana"},"application/geopackage+sqlite3":{"source":"iana"},"application/geoxacml+xml":{"source":"iana","compressible":true},"application/gltf-buffer":{"source":"iana"},"application/gml+xml":{"source":"iana","compressible":true,"extensions":["gml"]},"application/gpx+xml":{"source":"apache","compressible":true,"extensions":["gpx"]},"application/gxf":{"source":"apache","extensions":["gxf"]},"application/gzip":{"source":"iana","compressible":false,"extensions":["gz"]},"application/h224":{"source":"iana"},"application/held+xml":{"source":"iana","compressible":true},"application/hjson":{"extensions":["hjson"]},"application/http":{"source":"iana"},"application/hyperstudio":{"source":"iana","extensions":["stk"]},"application/ibe-key-request+xml":{"source":"iana","compressible":true},"application/ibe-pkg-reply+xml":{"source":"iana","compressible":true},"application/ibe-pp-data":{"source":"iana"},"application/iges":{"source":"iana"},"application/im-iscomposing+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/index":{"source":"iana"},"application/index.cmd":{"source":"iana"},"application/index.obj":{"source":"iana"},"application/index.response":{"source":"iana"},"application/index.vnd":{"source":"iana"},"application/inkml+xml":{"source":"iana","compressible":true,"extensions":["ink","inkml"]},"application/iotp":{"source":"iana"},"application/ipfix":{"source":"iana","extensions":["ipfix"]},"application/ipp":{"source":"iana"},"application/isup":{"source":"iana"},"application/its+xml":{"source":"iana","compressible":true,"extensions":["its"]},"application/java-archive":{"source":"apache","compressible":false,"extensions":["jar","war","ear"]},"application/java-serialized-object":{"source":"apache","compressible":false,"extensions":["ser"]},"application/java-vm":{"source":"apache","compressible":false,"extensions":["class"]},"application/javascript":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["js","mjs"]},"application/jf2feed+json":{"source":"iana","compressible":true},"application/jose":{"source":"iana"},"application/jose+json":{"source":"iana","compressible":true},"application/jrd+json":{"source":"iana","compressible":true},"application/jscalendar+json":{"source":"iana","compressible":true},"application/json":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["json","map"]},"application/json-patch+json":{"source":"iana","compressible":true},"application/json-seq":{"source":"iana"},"application/json5":{"extensions":["json5"]},"application/jsonml+json":{"source":"apache","compressible":true,"extensions":["jsonml"]},"application/jwk+json":{"source":"iana","compressible":true},"application/jwk-set+json":{"source":"iana","compressible":true},"application/jwt":{"source":"iana"},"application/kpml-request+xml":{"source":"iana","compressible":true},"application/kpml-response+xml":{"source":"iana","compressible":true},"application/ld+json":{"source":"iana","compressible":true,"extensions":["jsonld"]},"application/lgr+xml":{"source":"iana","compressible":true,"extensions":["lgr"]},"application/link-format":{"source":"iana"},"application/load-control+xml":{"source":"iana","compressible":true},"application/lost+xml":{"source":"iana","compressible":true,"extensions":["lostxml"]},"application/lostsync+xml":{"source":"iana","compressible":true},"application/lpf+zip":{"source":"iana","compressible":false},"application/lxf":{"source":"iana"},"application/mac-binhex40":{"source":"iana","extensions":["hqx"]},"application/mac-compactpro":{"source":"apache","extensions":["cpt"]},"application/macwriteii":{"source":"iana"},"application/mads+xml":{"source":"iana","compressible":true,"extensions":["mads"]},"application/manifest+json":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["webmanifest"]},"application/marc":{"source":"iana","extensions":["mrc"]},"application/marcxml+xml":{"source":"iana","compressible":true,"extensions":["mrcx"]},"application/mathematica":{"source":"iana","extensions":["ma","nb","mb"]},"application/mathml+xml":{"source":"iana","compressible":true,"extensions":["mathml"]},"application/mathml-content+xml":{"source":"iana","compressible":true},"application/mathml-presentation+xml":{"source":"iana","compressible":true},"application/mbms-associated-procedure-description+xml":{"source":"iana","compressible":true},"application/mbms-deregister+xml":{"source":"iana","compressible":true},"application/mbms-envelope+xml":{"source":"iana","compressible":true},"application/mbms-msk+xml":{"source":"iana","compressible":true},"application/mbms-msk-response+xml":{"source":"iana","compressible":true},"application/mbms-protection-description+xml":{"source":"iana","compressible":true},"application/mbms-reception-report+xml":{"source":"iana","compressible":true},"application/mbms-register+xml":{"source":"iana","compressible":true},"application/mbms-register-response+xml":{"source":"iana","compressible":true},"application/mbms-schedule+xml":{"source":"iana","compressible":true},"application/mbms-user-service-description+xml":{"source":"iana","compressible":true},"application/mbox":{"source":"iana","extensions":["mbox"]},"application/media-policy-dataset+xml":{"source":"iana","compressible":true,"extensions":["mpf"]},"application/media_control+xml":{"source":"iana","compressible":true},"application/mediaservercontrol+xml":{"source":"iana","compressible":true,"extensions":["mscml"]},"application/merge-patch+json":{"source":"iana","compressible":true},"application/metalink+xml":{"source":"apache","compressible":true,"extensions":["metalink"]},"application/metalink4+xml":{"source":"iana","compressible":true,"extensions":["meta4"]},"application/mets+xml":{"source":"iana","compressible":true,"extensions":["mets"]},"application/mf4":{"source":"iana"},"application/mikey":{"source":"iana"},"application/mipc":{"source":"iana"},"application/missing-blocks+cbor-seq":{"source":"iana"},"application/mmt-aei+xml":{"source":"iana","compressible":true,"extensions":["maei"]},"application/mmt-usd+xml":{"source":"iana","compressible":true,"extensions":["musd"]},"application/mods+xml":{"source":"iana","compressible":true,"extensions":["mods"]},"application/moss-keys":{"source":"iana"},"application/moss-signature":{"source":"iana"},"application/mosskey-data":{"source":"iana"},"application/mosskey-request":{"source":"iana"},"application/mp21":{"source":"iana","extensions":["m21","mp21"]},"application/mp4":{"source":"iana","extensions":["mp4s","m4p"]},"application/mpeg4-generic":{"source":"iana"},"application/mpeg4-iod":{"source":"iana"},"application/mpeg4-iod-xmt":{"source":"iana"},"application/mrb-consumer+xml":{"source":"iana","compressible":true},"application/mrb-publish+xml":{"source":"iana","compressible":true},"application/msc-ivr+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/msc-mixer+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/msword":{"source":"iana","compressible":false,"extensions":["doc","dot"]},"application/mud+json":{"source":"iana","compressible":true},"application/multipart-core":{"source":"iana"},"application/mxf":{"source":"iana","extensions":["mxf"]},"application/n-quads":{"source":"iana","extensions":["nq"]},"application/n-triples":{"source":"iana","extensions":["nt"]},"application/nasdata":{"source":"iana"},"application/news-checkgroups":{"source":"iana","charset":"US-ASCII"},"application/news-groupinfo":{"source":"iana","charset":"US-ASCII"},"application/news-transmission":{"source":"iana"},"application/nlsml+xml":{"source":"iana","compressible":true},"application/node":{"source":"iana","extensions":["cjs"]},"application/nss":{"source":"iana"},"application/oauth-authz-req+jwt":{"source":"iana"},"application/oblivious-dns-message":{"source":"iana"},"application/ocsp-request":{"source":"iana"},"application/ocsp-response":{"source":"iana"},"application/octet-stream":{"source":"iana","compressible":false,"extensions":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{"source":"iana","extensions":["oda"]},"application/odm+xml":{"source":"iana","compressible":true},"application/odx":{"source":"iana"},"application/oebps-package+xml":{"source":"iana","compressible":true,"extensions":["opf"]},"application/ogg":{"source":"iana","compressible":false,"extensions":["ogx"]},"application/omdoc+xml":{"source":"apache","compressible":true,"extensions":["omdoc"]},"application/onenote":{"source":"apache","extensions":["onetoc","onetoc2","onetmp","onepkg"]},"application/opc-nodeset+xml":{"source":"iana","compressible":true},"application/oscore":{"source":"iana"},"application/oxps":{"source":"iana","extensions":["oxps"]},"application/p21":{"source":"iana"},"application/p21+zip":{"source":"iana","compressible":false},"application/p2p-overlay+xml":{"source":"iana","compressible":true,"extensions":["relo"]},"application/parityfec":{"source":"iana"},"application/passport":{"source":"iana"},"application/patch-ops-error+xml":{"source":"iana","compressible":true,"extensions":["xer"]},"application/pdf":{"source":"iana","compressible":false,"extensions":["pdf"]},"application/pdx":{"source":"iana"},"application/pem-certificate-chain":{"source":"iana"},"application/pgp-encrypted":{"source":"iana","compressible":false,"extensions":["pgp"]},"application/pgp-keys":{"source":"iana","extensions":["asc"]},"application/pgp-signature":{"source":"iana","extensions":["asc","sig"]},"application/pics-rules":{"source":"apache","extensions":["prf"]},"application/pidf+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/pidf-diff+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/pkcs10":{"source":"iana","extensions":["p10"]},"application/pkcs12":{"source":"iana"},"application/pkcs7-mime":{"source":"iana","extensions":["p7m","p7c"]},"application/pkcs7-signature":{"source":"iana","extensions":["p7s"]},"application/pkcs8":{"source":"iana","extensions":["p8"]},"application/pkcs8-encrypted":{"source":"iana"},"application/pkix-attr-cert":{"source":"iana","extensions":["ac"]},"application/pkix-cert":{"source":"iana","extensions":["cer"]},"application/pkix-crl":{"source":"iana","extensions":["crl"]},"application/pkix-pkipath":{"source":"iana","extensions":["pkipath"]},"application/pkixcmp":{"source":"iana","extensions":["pki"]},"application/pls+xml":{"source":"iana","compressible":true,"extensions":["pls"]},"application/poc-settings+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/postscript":{"source":"iana","compressible":true,"extensions":["ai","eps","ps"]},"application/ppsp-tracker+json":{"source":"iana","compressible":true},"application/problem+json":{"source":"iana","compressible":true},"application/problem+xml":{"source":"iana","compressible":true},"application/provenance+xml":{"source":"iana","compressible":true,"extensions":["provx"]},"application/prs.alvestrand.titrax-sheet":{"source":"iana"},"application/prs.cww":{"source":"iana","extensions":["cww"]},"application/prs.cyn":{"source":"iana","charset":"7-BIT"},"application/prs.hpub+zip":{"source":"iana","compressible":false},"application/prs.nprend":{"source":"iana"},"application/prs.plucker":{"source":"iana"},"application/prs.rdf-xml-crypt":{"source":"iana"},"application/prs.xsf+xml":{"source":"iana","compressible":true},"application/pskc+xml":{"source":"iana","compressible":true,"extensions":["pskcxml"]},"application/pvd+json":{"source":"iana","compressible":true},"application/qsig":{"source":"iana"},"application/raml+yaml":{"compressible":true,"extensions":["raml"]},"application/raptorfec":{"source":"iana"},"application/rdap+json":{"source":"iana","compressible":true},"application/rdf+xml":{"source":"iana","compressible":true,"extensions":["rdf","owl"]},"application/reginfo+xml":{"source":"iana","compressible":true,"extensions":["rif"]},"application/relax-ng-compact-syntax":{"source":"iana","extensions":["rnc"]},"application/remote-printing":{"source":"iana"},"application/reputon+json":{"source":"iana","compressible":true},"application/resource-lists+xml":{"source":"iana","compressible":true,"extensions":["rl"]},"application/resource-lists-diff+xml":{"source":"iana","compressible":true,"extensions":["rld"]},"application/rfc+xml":{"source":"iana","compressible":true},"application/riscos":{"source":"iana"},"application/rlmi+xml":{"source":"iana","compressible":true},"application/rls-services+xml":{"source":"iana","compressible":true,"extensions":["rs"]},"application/route-apd+xml":{"source":"iana","compressible":true,"extensions":["rapd"]},"application/route-s-tsid+xml":{"source":"iana","compressible":true,"extensions":["sls"]},"application/route-usd+xml":{"source":"iana","compressible":true,"extensions":["rusd"]},"application/rpki-ghostbusters":{"source":"iana","extensions":["gbr"]},"application/rpki-manifest":{"source":"iana","extensions":["mft"]},"application/rpki-publication":{"source":"iana"},"application/rpki-roa":{"source":"iana","extensions":["roa"]},"application/rpki-updown":{"source":"iana"},"application/rsd+xml":{"source":"apache","compressible":true,"extensions":["rsd"]},"application/rss+xml":{"source":"apache","compressible":true,"extensions":["rss"]},"application/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"application/rtploopback":{"source":"iana"},"application/rtx":{"source":"iana"},"application/samlassertion+xml":{"source":"iana","compressible":true},"application/samlmetadata+xml":{"source":"iana","compressible":true},"application/sarif+json":{"source":"iana","compressible":true},"application/sarif-external-properties+json":{"source":"iana","compressible":true},"application/sbe":{"source":"iana"},"application/sbml+xml":{"source":"iana","compressible":true,"extensions":["sbml"]},"application/scaip+xml":{"source":"iana","compressible":true},"application/scim+json":{"source":"iana","compressible":true},"application/scvp-cv-request":{"source":"iana","extensions":["scq"]},"application/scvp-cv-response":{"source":"iana","extensions":["scs"]},"application/scvp-vp-request":{"source":"iana","extensions":["spq"]},"application/scvp-vp-response":{"source":"iana","extensions":["spp"]},"application/sdp":{"source":"iana","extensions":["sdp"]},"application/secevent+jwt":{"source":"iana"},"application/senml+cbor":{"source":"iana"},"application/senml+json":{"source":"iana","compressible":true},"application/senml+xml":{"source":"iana","compressible":true,"extensions":["senmlx"]},"application/senml-etch+cbor":{"source":"iana"},"application/senml-etch+json":{"source":"iana","compressible":true},"application/senml-exi":{"source":"iana"},"application/sensml+cbor":{"source":"iana"},"application/sensml+json":{"source":"iana","compressible":true},"application/sensml+xml":{"source":"iana","compressible":true,"extensions":["sensmlx"]},"application/sensml-exi":{"source":"iana"},"application/sep+xml":{"source":"iana","compressible":true},"application/sep-exi":{"source":"iana"},"application/session-info":{"source":"iana"},"application/set-payment":{"source":"iana"},"application/set-payment-initiation":{"source":"iana","extensions":["setpay"]},"application/set-registration":{"source":"iana"},"application/set-registration-initiation":{"source":"iana","extensions":["setreg"]},"application/sgml":{"source":"iana"},"application/sgml-open-catalog":{"source":"iana"},"application/shf+xml":{"source":"iana","compressible":true,"extensions":["shf"]},"application/sieve":{"source":"iana","extensions":["siv","sieve"]},"application/simple-filter+xml":{"source":"iana","compressible":true},"application/simple-message-summary":{"source":"iana"},"application/simplesymbolcontainer":{"source":"iana"},"application/sipc":{"source":"iana"},"application/slate":{"source":"iana"},"application/smil":{"source":"iana"},"application/smil+xml":{"source":"iana","compressible":true,"extensions":["smi","smil"]},"application/smpte336m":{"source":"iana"},"application/soap+fastinfoset":{"source":"iana"},"application/soap+xml":{"source":"iana","compressible":true},"application/sparql-query":{"source":"iana","extensions":["rq"]},"application/sparql-results+xml":{"source":"iana","compressible":true,"extensions":["srx"]},"application/spdx+json":{"source":"iana","compressible":true},"application/spirits-event+xml":{"source":"iana","compressible":true},"application/sql":{"source":"iana"},"application/srgs":{"source":"iana","extensions":["gram"]},"application/srgs+xml":{"source":"iana","compressible":true,"extensions":["grxml"]},"application/sru+xml":{"source":"iana","compressible":true,"extensions":["sru"]},"application/ssdl+xml":{"source":"apache","compressible":true,"extensions":["ssdl"]},"application/ssml+xml":{"source":"iana","compressible":true,"extensions":["ssml"]},"application/stix+json":{"source":"iana","compressible":true},"application/swid+xml":{"source":"iana","compressible":true,"extensions":["swidtag"]},"application/tamp-apex-update":{"source":"iana"},"application/tamp-apex-update-confirm":{"source":"iana"},"application/tamp-community-update":{"source":"iana"},"application/tamp-community-update-confirm":{"source":"iana"},"application/tamp-error":{"source":"iana"},"application/tamp-sequence-adjust":{"source":"iana"},"application/tamp-sequence-adjust-confirm":{"source":"iana"},"application/tamp-status-query":{"source":"iana"},"application/tamp-status-response":{"source":"iana"},"application/tamp-update":{"source":"iana"},"application/tamp-update-confirm":{"source":"iana"},"application/tar":{"compressible":true},"application/taxii+json":{"source":"iana","compressible":true},"application/td+json":{"source":"iana","compressible":true},"application/tei+xml":{"source":"iana","compressible":true,"extensions":["tei","teicorpus"]},"application/tetra_isi":{"source":"iana"},"application/thraud+xml":{"source":"iana","compressible":true,"extensions":["tfi"]},"application/timestamp-query":{"source":"iana"},"application/timestamp-reply":{"source":"iana"},"application/timestamped-data":{"source":"iana","extensions":["tsd"]},"application/tlsrpt+gzip":{"source":"iana"},"application/tlsrpt+json":{"source":"iana","compressible":true},"application/tnauthlist":{"source":"iana"},"application/token-introspection+jwt":{"source":"iana"},"application/toml":{"compressible":true,"extensions":["toml"]},"application/trickle-ice-sdpfrag":{"source":"iana"},"application/trig":{"source":"iana","extensions":["trig"]},"application/ttml+xml":{"source":"iana","compressible":true,"extensions":["ttml"]},"application/tve-trigger":{"source":"iana"},"application/tzif":{"source":"iana"},"application/tzif-leap":{"source":"iana"},"application/ubjson":{"compressible":false,"extensions":["ubj"]},"application/ulpfec":{"source":"iana"},"application/urc-grpsheet+xml":{"source":"iana","compressible":true},"application/urc-ressheet+xml":{"source":"iana","compressible":true,"extensions":["rsheet"]},"application/urc-targetdesc+xml":{"source":"iana","compressible":true,"extensions":["td"]},"application/urc-uisocketdesc+xml":{"source":"iana","compressible":true},"application/vcard+json":{"source":"iana","compressible":true},"application/vcard+xml":{"source":"iana","compressible":true},"application/vemmi":{"source":"iana"},"application/vividence.scriptfile":{"source":"apache"},"application/vnd.1000minds.decision-model+xml":{"source":"iana","compressible":true,"extensions":["1km"]},"application/vnd.3gpp-prose+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-prose-pc3ch+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-v2x-local-service-information":{"source":"iana"},"application/vnd.3gpp.5gnas":{"source":"iana"},"application/vnd.3gpp.access-transfer-events+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.bsf+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.gmop+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.gtpc":{"source":"iana"},"application/vnd.3gpp.interworking-data":{"source":"iana"},"application/vnd.3gpp.lpp":{"source":"iana"},"application/vnd.3gpp.mc-signalling-ear":{"source":"iana"},"application/vnd.3gpp.mcdata-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-payload":{"source":"iana"},"application/vnd.3gpp.mcdata-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-signalling":{"source":"iana"},"application/vnd.3gpp.mcdata-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-floor-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-signed+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-init-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-transmission-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mid-call+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.ngap":{"source":"iana"},"application/vnd.3gpp.pfcp":{"source":"iana"},"application/vnd.3gpp.pic-bw-large":{"source":"iana","extensions":["plb"]},"application/vnd.3gpp.pic-bw-small":{"source":"iana","extensions":["psb"]},"application/vnd.3gpp.pic-bw-var":{"source":"iana","extensions":["pvb"]},"application/vnd.3gpp.s1ap":{"source":"iana"},"application/vnd.3gpp.sms":{"source":"iana"},"application/vnd.3gpp.sms+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-ext+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.state-and-event-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.ussd+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.bcmcsinfo+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.sms":{"source":"iana"},"application/vnd.3gpp2.tcap":{"source":"iana","extensions":["tcap"]},"application/vnd.3lightssoftware.imagescal":{"source":"iana"},"application/vnd.3m.post-it-notes":{"source":"iana","extensions":["pwn"]},"application/vnd.accpac.simply.aso":{"source":"iana","extensions":["aso"]},"application/vnd.accpac.simply.imp":{"source":"iana","extensions":["imp"]},"application/vnd.acucobol":{"source":"iana","extensions":["acu"]},"application/vnd.acucorp":{"source":"iana","extensions":["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{"source":"apache","compressible":false,"extensions":["air"]},"application/vnd.adobe.flash.movie":{"source":"iana"},"application/vnd.adobe.formscentral.fcdt":{"source":"iana","extensions":["fcdt"]},"application/vnd.adobe.fxp":{"source":"iana","extensions":["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{"source":"iana"},"application/vnd.adobe.xdp+xml":{"source":"iana","compressible":true,"extensions":["xdp"]},"application/vnd.adobe.xfdf":{"source":"iana","extensions":["xfdf"]},"application/vnd.aether.imp":{"source":"iana"},"application/vnd.afpc.afplinedata":{"source":"iana"},"application/vnd.afpc.afplinedata-pagedef":{"source":"iana"},"application/vnd.afpc.cmoca-cmresource":{"source":"iana"},"application/vnd.afpc.foca-charset":{"source":"iana"},"application/vnd.afpc.foca-codedfont":{"source":"iana"},"application/vnd.afpc.foca-codepage":{"source":"iana"},"application/vnd.afpc.modca":{"source":"iana"},"application/vnd.afpc.modca-cmtable":{"source":"iana"},"application/vnd.afpc.modca-formdef":{"source":"iana"},"application/vnd.afpc.modca-mediummap":{"source":"iana"},"application/vnd.afpc.modca-objectcontainer":{"source":"iana"},"application/vnd.afpc.modca-overlay":{"source":"iana"},"application/vnd.afpc.modca-pagesegment":{"source":"iana"},"application/vnd.age":{"source":"iana","extensions":["age"]},"application/vnd.ah-barcode":{"source":"iana"},"application/vnd.ahead.space":{"source":"iana","extensions":["ahead"]},"application/vnd.airzip.filesecure.azf":{"source":"iana","extensions":["azf"]},"application/vnd.airzip.filesecure.azs":{"source":"iana","extensions":["azs"]},"application/vnd.amadeus+json":{"source":"iana","compressible":true},"application/vnd.amazon.ebook":{"source":"apache","extensions":["azw"]},"application/vnd.amazon.mobi8-ebook":{"source":"iana"},"application/vnd.americandynamics.acc":{"source":"iana","extensions":["acc"]},"application/vnd.amiga.ami":{"source":"iana","extensions":["ami"]},"application/vnd.amundsen.maze+xml":{"source":"iana","compressible":true},"application/vnd.android.ota":{"source":"iana"},"application/vnd.android.package-archive":{"source":"apache","compressible":false,"extensions":["apk"]},"application/vnd.anki":{"source":"iana"},"application/vnd.anser-web-certificate-issue-initiation":{"source":"iana","extensions":["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{"source":"apache","extensions":["fti"]},"application/vnd.antix.game-component":{"source":"iana","extensions":["atx"]},"application/vnd.apache.arrow.file":{"source":"iana"},"application/vnd.apache.arrow.stream":{"source":"iana"},"application/vnd.apache.thrift.binary":{"source":"iana"},"application/vnd.apache.thrift.compact":{"source":"iana"},"application/vnd.apache.thrift.json":{"source":"iana"},"application/vnd.api+json":{"source":"iana","compressible":true},"application/vnd.aplextor.warrp+json":{"source":"iana","compressible":true},"application/vnd.apothekende.reservation+json":{"source":"iana","compressible":true},"application/vnd.apple.installer+xml":{"source":"iana","compressible":true,"extensions":["mpkg"]},"application/vnd.apple.keynote":{"source":"iana","extensions":["key"]},"application/vnd.apple.mpegurl":{"source":"iana","extensions":["m3u8"]},"application/vnd.apple.numbers":{"source":"iana","extensions":["numbers"]},"application/vnd.apple.pages":{"source":"iana","extensions":["pages"]},"application/vnd.apple.pkpass":{"compressible":false,"extensions":["pkpass"]},"application/vnd.arastra.swi":{"source":"iana"},"application/vnd.aristanetworks.swi":{"source":"iana","extensions":["swi"]},"application/vnd.artisan+json":{"source":"iana","compressible":true},"application/vnd.artsquare":{"source":"iana"},"application/vnd.astraea-software.iota":{"source":"iana","extensions":["iota"]},"application/vnd.audiograph":{"source":"iana","extensions":["aep"]},"application/vnd.autopackage":{"source":"iana"},"application/vnd.avalon+json":{"source":"iana","compressible":true},"application/vnd.avistar+xml":{"source":"iana","compressible":true},"application/vnd.balsamiq.bmml+xml":{"source":"iana","compressible":true,"extensions":["bmml"]},"application/vnd.balsamiq.bmpr":{"source":"iana"},"application/vnd.banana-accounting":{"source":"iana"},"application/vnd.bbf.usp.error":{"source":"iana"},"application/vnd.bbf.usp.msg":{"source":"iana"},"application/vnd.bbf.usp.msg+json":{"source":"iana","compressible":true},"application/vnd.bekitzur-stech+json":{"source":"iana","compressible":true},"application/vnd.bint.med-content":{"source":"iana"},"application/vnd.biopax.rdf+xml":{"source":"iana","compressible":true},"application/vnd.blink-idb-value-wrapper":{"source":"iana"},"application/vnd.blueice.multipass":{"source":"iana","extensions":["mpm"]},"application/vnd.bluetooth.ep.oob":{"source":"iana"},"application/vnd.bluetooth.le.oob":{"source":"iana"},"application/vnd.bmi":{"source":"iana","extensions":["bmi"]},"application/vnd.bpf":{"source":"iana"},"application/vnd.bpf3":{"source":"iana"},"application/vnd.businessobjects":{"source":"iana","extensions":["rep"]},"application/vnd.byu.uapi+json":{"source":"iana","compressible":true},"application/vnd.cab-jscript":{"source":"iana"},"application/vnd.canon-cpdl":{"source":"iana"},"application/vnd.canon-lips":{"source":"iana"},"application/vnd.capasystems-pg+json":{"source":"iana","compressible":true},"application/vnd.cendio.thinlinc.clientconf":{"source":"iana"},"application/vnd.century-systems.tcp_stream":{"source":"iana"},"application/vnd.chemdraw+xml":{"source":"iana","compressible":true,"extensions":["cdxml"]},"application/vnd.chess-pgn":{"source":"iana"},"application/vnd.chipnuts.karaoke-mmd":{"source":"iana","extensions":["mmd"]},"application/vnd.ciedi":{"source":"iana"},"application/vnd.cinderella":{"source":"iana","extensions":["cdy"]},"application/vnd.cirpack.isdn-ext":{"source":"iana"},"application/vnd.citationstyles.style+xml":{"source":"iana","compressible":true,"extensions":["csl"]},"application/vnd.claymore":{"source":"iana","extensions":["cla"]},"application/vnd.cloanto.rp9":{"source":"iana","extensions":["rp9"]},"application/vnd.clonk.c4group":{"source":"iana","extensions":["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{"source":"iana","extensions":["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{"source":"iana","extensions":["c11amz"]},"application/vnd.coffeescript":{"source":"iana"},"application/vnd.collabio.xodocuments.document":{"source":"iana"},"application/vnd.collabio.xodocuments.document-template":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation-template":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{"source":"iana"},"application/vnd.collection+json":{"source":"iana","compressible":true},"application/vnd.collection.doc+json":{"source":"iana","compressible":true},"application/vnd.collection.next+json":{"source":"iana","compressible":true},"application/vnd.comicbook+zip":{"source":"iana","compressible":false},"application/vnd.comicbook-rar":{"source":"iana"},"application/vnd.commerce-battelle":{"source":"iana"},"application/vnd.commonspace":{"source":"iana","extensions":["csp"]},"application/vnd.contact.cmsg":{"source":"iana","extensions":["cdbcmsg"]},"application/vnd.coreos.ignition+json":{"source":"iana","compressible":true},"application/vnd.cosmocaller":{"source":"iana","extensions":["cmc"]},"application/vnd.crick.clicker":{"source":"iana","extensions":["clkx"]},"application/vnd.crick.clicker.keyboard":{"source":"iana","extensions":["clkk"]},"application/vnd.crick.clicker.palette":{"source":"iana","extensions":["clkp"]},"application/vnd.crick.clicker.template":{"source":"iana","extensions":["clkt"]},"application/vnd.crick.clicker.wordbank":{"source":"iana","extensions":["clkw"]},"application/vnd.criticaltools.wbs+xml":{"source":"iana","compressible":true,"extensions":["wbs"]},"application/vnd.cryptii.pipe+json":{"source":"iana","compressible":true},"application/vnd.crypto-shade-file":{"source":"iana"},"application/vnd.cryptomator.encrypted":{"source":"iana"},"application/vnd.cryptomator.vault":{"source":"iana"},"application/vnd.ctc-posml":{"source":"iana","extensions":["pml"]},"application/vnd.ctct.ws+xml":{"source":"iana","compressible":true},"application/vnd.cups-pdf":{"source":"iana"},"application/vnd.cups-postscript":{"source":"iana"},"application/vnd.cups-ppd":{"source":"iana","extensions":["ppd"]},"application/vnd.cups-raster":{"source":"iana"},"application/vnd.cups-raw":{"source":"iana"},"application/vnd.curl":{"source":"iana"},"application/vnd.curl.car":{"source":"apache","extensions":["car"]},"application/vnd.curl.pcurl":{"source":"apache","extensions":["pcurl"]},"application/vnd.cyan.dean.root+xml":{"source":"iana","compressible":true},"application/vnd.cybank":{"source":"iana"},"application/vnd.cyclonedx+json":{"source":"iana","compressible":true},"application/vnd.cyclonedx+xml":{"source":"iana","compressible":true},"application/vnd.d2l.coursepackage1p0+zip":{"source":"iana","compressible":false},"application/vnd.d3m-dataset":{"source":"iana"},"application/vnd.d3m-problem":{"source":"iana"},"application/vnd.dart":{"source":"iana","compressible":true,"extensions":["dart"]},"application/vnd.data-vision.rdz":{"source":"iana","extensions":["rdz"]},"application/vnd.datapackage+json":{"source":"iana","compressible":true},"application/vnd.dataresource+json":{"source":"iana","compressible":true},"application/vnd.dbf":{"source":"iana","extensions":["dbf"]},"application/vnd.debian.binary-package":{"source":"iana"},"application/vnd.dece.data":{"source":"iana","extensions":["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{"source":"iana","compressible":true,"extensions":["uvt","uvvt"]},"application/vnd.dece.unspecified":{"source":"iana","extensions":["uvx","uvvx"]},"application/vnd.dece.zip":{"source":"iana","extensions":["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{"source":"iana","extensions":["fe_launch"]},"application/vnd.desmume.movie":{"source":"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{"source":"iana"},"application/vnd.dm.delegation+xml":{"source":"iana","compressible":true},"application/vnd.dna":{"source":"iana","extensions":["dna"]},"application/vnd.document+json":{"source":"iana","compressible":true},"application/vnd.dolby.mlp":{"source":"apache","extensions":["mlp"]},"application/vnd.dolby.mobile.1":{"source":"iana"},"application/vnd.dolby.mobile.2":{"source":"iana"},"application/vnd.doremir.scorecloud-binary-document":{"source":"iana"},"application/vnd.dpgraph":{"source":"iana","extensions":["dpg"]},"application/vnd.dreamfactory":{"source":"iana","extensions":["dfac"]},"application/vnd.drive+json":{"source":"iana","compressible":true},"application/vnd.ds-keypoint":{"source":"apache","extensions":["kpxx"]},"application/vnd.dtg.local":{"source":"iana"},"application/vnd.dtg.local.flash":{"source":"iana"},"application/vnd.dtg.local.html":{"source":"iana"},"application/vnd.dvb.ait":{"source":"iana","extensions":["ait"]},"application/vnd.dvb.dvbisl+xml":{"source":"iana","compressible":true},"application/vnd.dvb.dvbj":{"source":"iana"},"application/vnd.dvb.esgcontainer":{"source":"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess2":{"source":"iana"},"application/vnd.dvb.ipdcesgpdd":{"source":"iana"},"application/vnd.dvb.ipdcroaming":{"source":"iana"},"application/vnd.dvb.iptv.alfec-base":{"source":"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{"source":"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-container+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-generic+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-msglist+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-request+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-response+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-init+xml":{"source":"iana","compressible":true},"application/vnd.dvb.pfr":{"source":"iana"},"application/vnd.dvb.service":{"source":"iana","extensions":["svc"]},"application/vnd.dxr":{"source":"iana"},"application/vnd.dynageo":{"source":"iana","extensions":["geo"]},"application/vnd.dzr":{"source":"iana"},"application/vnd.easykaraoke.cdgdownload":{"source":"iana"},"application/vnd.ecdis-update":{"source":"iana"},"application/vnd.ecip.rlp":{"source":"iana"},"application/vnd.eclipse.ditto+json":{"source":"iana","compressible":true},"application/vnd.ecowin.chart":{"source":"iana","extensions":["mag"]},"application/vnd.ecowin.filerequest":{"source":"iana"},"application/vnd.ecowin.fileupdate":{"source":"iana"},"application/vnd.ecowin.series":{"source":"iana"},"application/vnd.ecowin.seriesrequest":{"source":"iana"},"application/vnd.ecowin.seriesupdate":{"source":"iana"},"application/vnd.efi.img":{"source":"iana"},"application/vnd.efi.iso":{"source":"iana"},"application/vnd.emclient.accessrequest+xml":{"source":"iana","compressible":true},"application/vnd.enliven":{"source":"iana","extensions":["nml"]},"application/vnd.enphase.envoy":{"source":"iana"},"application/vnd.eprints.data+xml":{"source":"iana","compressible":true},"application/vnd.epson.esf":{"source":"iana","extensions":["esf"]},"application/vnd.epson.msf":{"source":"iana","extensions":["msf"]},"application/vnd.epson.quickanime":{"source":"iana","extensions":["qam"]},"application/vnd.epson.salt":{"source":"iana","extensions":["slt"]},"application/vnd.epson.ssf":{"source":"iana","extensions":["ssf"]},"application/vnd.ericsson.quickcall":{"source":"iana"},"application/vnd.espass-espass+zip":{"source":"iana","compressible":false},"application/vnd.eszigno3+xml":{"source":"iana","compressible":true,"extensions":["es3","et3"]},"application/vnd.etsi.aoc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.asic-e+zip":{"source":"iana","compressible":false},"application/vnd.etsi.asic-s+zip":{"source":"iana","compressible":false},"application/vnd.etsi.cug+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvcommand+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-bc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-cod+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-npvr+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvservice+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsync+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvueprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mcid+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mheg5":{"source":"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{"source":"iana","compressible":true},"application/vnd.etsi.pstn+xml":{"source":"iana","compressible":true},"application/vnd.etsi.sci+xml":{"source":"iana","compressible":true},"application/vnd.etsi.simservs+xml":{"source":"iana","compressible":true},"application/vnd.etsi.timestamp-token":{"source":"iana"},"application/vnd.etsi.tsl+xml":{"source":"iana","compressible":true},"application/vnd.etsi.tsl.der":{"source":"iana"},"application/vnd.eu.kasparian.car+json":{"source":"iana","compressible":true},"application/vnd.eudora.data":{"source":"iana"},"application/vnd.evolv.ecig.profile":{"source":"iana"},"application/vnd.evolv.ecig.settings":{"source":"iana"},"application/vnd.evolv.ecig.theme":{"source":"iana"},"application/vnd.exstream-empower+zip":{"source":"iana","compressible":false},"application/vnd.exstream-package":{"source":"iana"},"application/vnd.ezpix-album":{"source":"iana","extensions":["ez2"]},"application/vnd.ezpix-package":{"source":"iana","extensions":["ez3"]},"application/vnd.f-secure.mobile":{"source":"iana"},"application/vnd.familysearch.gedcom+zip":{"source":"iana","compressible":false},"application/vnd.fastcopy-disk-image":{"source":"iana"},"application/vnd.fdf":{"source":"iana","extensions":["fdf"]},"application/vnd.fdsn.mseed":{"source":"iana","extensions":["mseed"]},"application/vnd.fdsn.seed":{"source":"iana","extensions":["seed","dataless"]},"application/vnd.ffsns":{"source":"iana"},"application/vnd.ficlab.flb+zip":{"source":"iana","compressible":false},"application/vnd.filmit.zfc":{"source":"iana"},"application/vnd.fints":{"source":"iana"},"application/vnd.firemonkeys.cloudcell":{"source":"iana"},"application/vnd.flographit":{"source":"iana","extensions":["gph"]},"application/vnd.fluxtime.clip":{"source":"iana","extensions":["ftc"]},"application/vnd.font-fontforge-sfd":{"source":"iana"},"application/vnd.framemaker":{"source":"iana","extensions":["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{"source":"iana","extensions":["fnc"]},"application/vnd.frogans.ltf":{"source":"iana","extensions":["ltf"]},"application/vnd.fsc.weblaunch":{"source":"iana","extensions":["fsc"]},"application/vnd.fujifilm.fb.docuworks":{"source":"iana"},"application/vnd.fujifilm.fb.docuworks.binder":{"source":"iana"},"application/vnd.fujifilm.fb.docuworks.container":{"source":"iana"},"application/vnd.fujifilm.fb.jfi+xml":{"source":"iana","compressible":true},"application/vnd.fujitsu.oasys":{"source":"iana","extensions":["oas"]},"application/vnd.fujitsu.oasys2":{"source":"iana","extensions":["oa2"]},"application/vnd.fujitsu.oasys3":{"source":"iana","extensions":["oa3"]},"application/vnd.fujitsu.oasysgp":{"source":"iana","extensions":["fg5"]},"application/vnd.fujitsu.oasysprs":{"source":"iana","extensions":["bh2"]},"application/vnd.fujixerox.art-ex":{"source":"iana"},"application/vnd.fujixerox.art4":{"source":"iana"},"application/vnd.fujixerox.ddd":{"source":"iana","extensions":["ddd"]},"application/vnd.fujixerox.docuworks":{"source":"iana","extensions":["xdw"]},"application/vnd.fujixerox.docuworks.binder":{"source":"iana","extensions":["xbd"]},"application/vnd.fujixerox.docuworks.container":{"source":"iana"},"application/vnd.fujixerox.hbpl":{"source":"iana"},"application/vnd.fut-misnet":{"source":"iana"},"application/vnd.futoin+cbor":{"source":"iana"},"application/vnd.futoin+json":{"source":"iana","compressible":true},"application/vnd.fuzzysheet":{"source":"iana","extensions":["fzs"]},"application/vnd.genomatix.tuxedo":{"source":"iana","extensions":["txd"]},"application/vnd.gentics.grd+json":{"source":"iana","compressible":true},"application/vnd.geo+json":{"source":"iana","compressible":true},"application/vnd.geocube+xml":{"source":"iana","compressible":true},"application/vnd.geogebra.file":{"source":"iana","extensions":["ggb"]},"application/vnd.geogebra.slides":{"source":"iana"},"application/vnd.geogebra.tool":{"source":"iana","extensions":["ggt"]},"application/vnd.geometry-explorer":{"source":"iana","extensions":["gex","gre"]},"application/vnd.geonext":{"source":"iana","extensions":["gxt"]},"application/vnd.geoplan":{"source":"iana","extensions":["g2w"]},"application/vnd.geospace":{"source":"iana","extensions":["g3w"]},"application/vnd.gerber":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt-response":{"source":"iana"},"application/vnd.gmx":{"source":"iana","extensions":["gmx"]},"application/vnd.google-apps.document":{"compressible":false,"extensions":["gdoc"]},"application/vnd.google-apps.presentation":{"compressible":false,"extensions":["gslides"]},"application/vnd.google-apps.spreadsheet":{"compressible":false,"extensions":["gsheet"]},"application/vnd.google-earth.kml+xml":{"source":"iana","compressible":true,"extensions":["kml"]},"application/vnd.google-earth.kmz":{"source":"iana","compressible":false,"extensions":["kmz"]},"application/vnd.gov.sk.e-form+xml":{"source":"iana","compressible":true},"application/vnd.gov.sk.e-form+zip":{"source":"iana","compressible":false},"application/vnd.gov.sk.xmldatacontainer+xml":{"source":"iana","compressible":true},"application/vnd.grafeq":{"source":"iana","extensions":["gqf","gqs"]},"application/vnd.gridmp":{"source":"iana"},"application/vnd.groove-account":{"source":"iana","extensions":["gac"]},"application/vnd.groove-help":{"source":"iana","extensions":["ghf"]},"application/vnd.groove-identity-message":{"source":"iana","extensions":["gim"]},"application/vnd.groove-injector":{"source":"iana","extensions":["grv"]},"application/vnd.groove-tool-message":{"source":"iana","extensions":["gtm"]},"application/vnd.groove-tool-template":{"source":"iana","extensions":["tpl"]},"application/vnd.groove-vcard":{"source":"iana","extensions":["vcg"]},"application/vnd.hal+json":{"source":"iana","compressible":true},"application/vnd.hal+xml":{"source":"iana","compressible":true,"extensions":["hal"]},"application/vnd.handheld-entertainment+xml":{"source":"iana","compressible":true,"extensions":["zmm"]},"application/vnd.hbci":{"source":"iana","extensions":["hbci"]},"application/vnd.hc+json":{"source":"iana","compressible":true},"application/vnd.hcl-bireports":{"source":"iana"},"application/vnd.hdt":{"source":"iana"},"application/vnd.heroku+json":{"source":"iana","compressible":true},"application/vnd.hhe.lesson-player":{"source":"iana","extensions":["les"]},"application/vnd.hl7cda+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.hl7v2+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.hp-hpgl":{"source":"iana","extensions":["hpgl"]},"application/vnd.hp-hpid":{"source":"iana","extensions":["hpid"]},"application/vnd.hp-hps":{"source":"iana","extensions":["hps"]},"application/vnd.hp-jlyt":{"source":"iana","extensions":["jlt"]},"application/vnd.hp-pcl":{"source":"iana","extensions":["pcl"]},"application/vnd.hp-pclxl":{"source":"iana","extensions":["pclxl"]},"application/vnd.httphone":{"source":"iana"},"application/vnd.hydrostatix.sof-data":{"source":"iana","extensions":["sfd-hdstx"]},"application/vnd.hyper+json":{"source":"iana","compressible":true},"application/vnd.hyper-item+json":{"source":"iana","compressible":true},"application/vnd.hyperdrive+json":{"source":"iana","compressible":true},"application/vnd.hzn-3d-crossword":{"source":"iana"},"application/vnd.ibm.afplinedata":{"source":"iana"},"application/vnd.ibm.electronic-media":{"source":"iana"},"application/vnd.ibm.minipay":{"source":"iana","extensions":["mpy"]},"application/vnd.ibm.modcap":{"source":"iana","extensions":["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{"source":"iana","extensions":["irm"]},"application/vnd.ibm.secure-container":{"source":"iana","extensions":["sc"]},"application/vnd.iccprofile":{"source":"iana","extensions":["icc","icm"]},"application/vnd.ieee.1905":{"source":"iana"},"application/vnd.igloader":{"source":"iana","extensions":["igl"]},"application/vnd.imagemeter.folder+zip":{"source":"iana","compressible":false},"application/vnd.imagemeter.image+zip":{"source":"iana","compressible":false},"application/vnd.immervision-ivp":{"source":"iana","extensions":["ivp"]},"application/vnd.immervision-ivu":{"source":"iana","extensions":["ivu"]},"application/vnd.ims.imsccv1p1":{"source":"iana"},"application/vnd.ims.imsccv1p2":{"source":"iana"},"application/vnd.ims.imsccv1p3":{"source":"iana"},"application/vnd.ims.lis.v2.result+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy.id+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings.simple+json":{"source":"iana","compressible":true},"application/vnd.informedcontrol.rms+xml":{"source":"iana","compressible":true},"application/vnd.informix-visionary":{"source":"iana"},"application/vnd.infotech.project":{"source":"iana"},"application/vnd.infotech.project+xml":{"source":"iana","compressible":true},"application/vnd.innopath.wamp.notification":{"source":"iana"},"application/vnd.insors.igm":{"source":"iana","extensions":["igm"]},"application/vnd.intercon.formnet":{"source":"iana","extensions":["xpw","xpx"]},"application/vnd.intergeo":{"source":"iana","extensions":["i2g"]},"application/vnd.intertrust.digibox":{"source":"iana"},"application/vnd.intertrust.nncp":{"source":"iana"},"application/vnd.intu.qbo":{"source":"iana","extensions":["qbo"]},"application/vnd.intu.qfx":{"source":"iana","extensions":["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.conceptitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.knowledgeitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsmessage+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.packageitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.planningitem+xml":{"source":"iana","compressible":true},"application/vnd.ipunplugged.rcprofile":{"source":"iana","extensions":["rcprofile"]},"application/vnd.irepository.package+xml":{"source":"iana","compressible":true,"extensions":["irp"]},"application/vnd.is-xpr":{"source":"iana","extensions":["xpr"]},"application/vnd.isac.fcs":{"source":"iana","extensions":["fcs"]},"application/vnd.iso11783-10+zip":{"source":"iana","compressible":false},"application/vnd.jam":{"source":"iana","extensions":["jam"]},"application/vnd.japannet-directory-service":{"source":"iana"},"application/vnd.japannet-jpnstore-wakeup":{"source":"iana"},"application/vnd.japannet-payment-wakeup":{"source":"iana"},"application/vnd.japannet-registration":{"source":"iana"},"application/vnd.japannet-registration-wakeup":{"source":"iana"},"application/vnd.japannet-setstore-wakeup":{"source":"iana"},"application/vnd.japannet-verification":{"source":"iana"},"application/vnd.japannet-verification-wakeup":{"source":"iana"},"application/vnd.jcp.javame.midlet-rms":{"source":"iana","extensions":["rms"]},"application/vnd.jisp":{"source":"iana","extensions":["jisp"]},"application/vnd.joost.joda-archive":{"source":"iana","extensions":["joda"]},"application/vnd.jsk.isdn-ngn":{"source":"iana"},"application/vnd.kahootz":{"source":"iana","extensions":["ktz","ktr"]},"application/vnd.kde.karbon":{"source":"iana","extensions":["karbon"]},"application/vnd.kde.kchart":{"source":"iana","extensions":["chrt"]},"application/vnd.kde.kformula":{"source":"iana","extensions":["kfo"]},"application/vnd.kde.kivio":{"source":"iana","extensions":["flw"]},"application/vnd.kde.kontour":{"source":"iana","extensions":["kon"]},"application/vnd.kde.kpresenter":{"source":"iana","extensions":["kpr","kpt"]},"application/vnd.kde.kspread":{"source":"iana","extensions":["ksp"]},"application/vnd.kde.kword":{"source":"iana","extensions":["kwd","kwt"]},"application/vnd.kenameaapp":{"source":"iana","extensions":["htke"]},"application/vnd.kidspiration":{"source":"iana","extensions":["kia"]},"application/vnd.kinar":{"source":"iana","extensions":["kne","knp"]},"application/vnd.koan":{"source":"iana","extensions":["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{"source":"iana","extensions":["sse"]},"application/vnd.las":{"source":"iana"},"application/vnd.las.las+json":{"source":"iana","compressible":true},"application/vnd.las.las+xml":{"source":"iana","compressible":true,"extensions":["lasxml"]},"application/vnd.laszip":{"source":"iana"},"application/vnd.leap+json":{"source":"iana","compressible":true},"application/vnd.liberty-request+xml":{"source":"iana","compressible":true},"application/vnd.llamagraphics.life-balance.desktop":{"source":"iana","extensions":["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{"source":"iana","compressible":true,"extensions":["lbe"]},"application/vnd.logipipe.circuit+zip":{"source":"iana","compressible":false},"application/vnd.loom":{"source":"iana"},"application/vnd.lotus-1-2-3":{"source":"iana","extensions":["123"]},"application/vnd.lotus-approach":{"source":"iana","extensions":["apr"]},"application/vnd.lotus-freelance":{"source":"iana","extensions":["pre"]},"application/vnd.lotus-notes":{"source":"iana","extensions":["nsf"]},"application/vnd.lotus-organizer":{"source":"iana","extensions":["org"]},"application/vnd.lotus-screencam":{"source":"iana","extensions":["scm"]},"application/vnd.lotus-wordpro":{"source":"iana","extensions":["lwp"]},"application/vnd.macports.portpkg":{"source":"iana","extensions":["portpkg"]},"application/vnd.mapbox-vector-tile":{"source":"iana","extensions":["mvt"]},"application/vnd.marlin.drm.actiontoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.conftoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.license+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.mdcf":{"source":"iana"},"application/vnd.mason+json":{"source":"iana","compressible":true},"application/vnd.maxar.archive.3tz+zip":{"source":"iana","compressible":false},"application/vnd.maxmind.maxmind-db":{"source":"iana"},"application/vnd.mcd":{"source":"iana","extensions":["mcd"]},"application/vnd.medcalcdata":{"source":"iana","extensions":["mc1"]},"application/vnd.mediastation.cdkey":{"source":"iana","extensions":["cdkey"]},"application/vnd.meridian-slingshot":{"source":"iana"},"application/vnd.mfer":{"source":"iana","extensions":["mwf"]},"application/vnd.mfmp":{"source":"iana","extensions":["mfm"]},"application/vnd.micro+json":{"source":"iana","compressible":true},"application/vnd.micrografx.flo":{"source":"iana","extensions":["flo"]},"application/vnd.micrografx.igx":{"source":"iana","extensions":["igx"]},"application/vnd.microsoft.portable-executable":{"source":"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{"source":"iana"},"application/vnd.miele+json":{"source":"iana","compressible":true},"application/vnd.mif":{"source":"iana","extensions":["mif"]},"application/vnd.minisoft-hp3000-save":{"source":"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{"source":"iana"},"application/vnd.mobius.daf":{"source":"iana","extensions":["daf"]},"application/vnd.mobius.dis":{"source":"iana","extensions":["dis"]},"application/vnd.mobius.mbk":{"source":"iana","extensions":["mbk"]},"application/vnd.mobius.mqy":{"source":"iana","extensions":["mqy"]},"application/vnd.mobius.msl":{"source":"iana","extensions":["msl"]},"application/vnd.mobius.plc":{"source":"iana","extensions":["plc"]},"application/vnd.mobius.txf":{"source":"iana","extensions":["txf"]},"application/vnd.mophun.application":{"source":"iana","extensions":["mpn"]},"application/vnd.mophun.certificate":{"source":"iana","extensions":["mpc"]},"application/vnd.motorola.flexsuite":{"source":"iana"},"application/vnd.motorola.flexsuite.adsi":{"source":"iana"},"application/vnd.motorola.flexsuite.fis":{"source":"iana"},"application/vnd.motorola.flexsuite.gotap":{"source":"iana"},"application/vnd.motorola.flexsuite.kmr":{"source":"iana"},"application/vnd.motorola.flexsuite.ttc":{"source":"iana"},"application/vnd.motorola.flexsuite.wem":{"source":"iana"},"application/vnd.motorola.iprm":{"source":"iana"},"application/vnd.mozilla.xul+xml":{"source":"iana","compressible":true,"extensions":["xul"]},"application/vnd.ms-3mfdocument":{"source":"iana"},"application/vnd.ms-artgalry":{"source":"iana","extensions":["cil"]},"application/vnd.ms-asf":{"source":"iana"},"application/vnd.ms-cab-compressed":{"source":"iana","extensions":["cab"]},"application/vnd.ms-color.iccprofile":{"source":"apache"},"application/vnd.ms-excel":{"source":"iana","compressible":false,"extensions":["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{"source":"iana","extensions":["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{"source":"iana","extensions":["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{"source":"iana","extensions":["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{"source":"iana","extensions":["xltm"]},"application/vnd.ms-fontobject":{"source":"iana","compressible":true,"extensions":["eot"]},"application/vnd.ms-htmlhelp":{"source":"iana","extensions":["chm"]},"application/vnd.ms-ims":{"source":"iana","extensions":["ims"]},"application/vnd.ms-lrm":{"source":"iana","extensions":["lrm"]},"application/vnd.ms-office.activex+xml":{"source":"iana","compressible":true},"application/vnd.ms-officetheme":{"source":"iana","extensions":["thmx"]},"application/vnd.ms-opentype":{"source":"apache","compressible":true},"application/vnd.ms-outlook":{"compressible":false,"extensions":["msg"]},"application/vnd.ms-package.obfuscated-opentype":{"source":"apache"},"application/vnd.ms-pki.seccat":{"source":"apache","extensions":["cat"]},"application/vnd.ms-pki.stl":{"source":"apache","extensions":["stl"]},"application/vnd.ms-playready.initiator+xml":{"source":"iana","compressible":true},"application/vnd.ms-powerpoint":{"source":"iana","compressible":false,"extensions":["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{"source":"iana","extensions":["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{"source":"iana","extensions":["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{"source":"iana","extensions":["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{"source":"iana","extensions":["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{"source":"iana","extensions":["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{"source":"iana","compressible":true},"application/vnd.ms-printing.printticket+xml":{"source":"apache","compressible":true},"application/vnd.ms-printschematicket+xml":{"source":"iana","compressible":true},"application/vnd.ms-project":{"source":"iana","extensions":["mpp","mpt"]},"application/vnd.ms-tnef":{"source":"iana"},"application/vnd.ms-windows.devicepairing":{"source":"iana"},"application/vnd.ms-windows.nwprinting.oob":{"source":"iana"},"application/vnd.ms-windows.printerpairing":{"source":"iana"},"application/vnd.ms-windows.wsd.oob":{"source":"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.lic-resp":{"source":"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.meter-resp":{"source":"iana"},"application/vnd.ms-word.document.macroenabled.12":{"source":"iana","extensions":["docm"]},"application/vnd.ms-word.template.macroenabled.12":{"source":"iana","extensions":["dotm"]},"application/vnd.ms-works":{"source":"iana","extensions":["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{"source":"iana","extensions":["wpl"]},"application/vnd.ms-xpsdocument":{"source":"iana","compressible":false,"extensions":["xps"]},"application/vnd.msa-disk-image":{"source":"iana"},"application/vnd.mseq":{"source":"iana","extensions":["mseq"]},"application/vnd.msign":{"source":"iana"},"application/vnd.multiad.creator":{"source":"iana"},"application/vnd.multiad.creator.cif":{"source":"iana"},"application/vnd.music-niff":{"source":"iana"},"application/vnd.musician":{"source":"iana","extensions":["mus"]},"application/vnd.muvee.style":{"source":"iana","extensions":["msty"]},"application/vnd.mynfc":{"source":"iana","extensions":["taglet"]},"application/vnd.nacamar.ybrid+json":{"source":"iana","compressible":true},"application/vnd.ncd.control":{"source":"iana"},"application/vnd.ncd.reference":{"source":"iana"},"application/vnd.nearst.inv+json":{"source":"iana","compressible":true},"application/vnd.nebumind.line":{"source":"iana"},"application/vnd.nervana":{"source":"iana"},"application/vnd.netfpx":{"source":"iana"},"application/vnd.neurolanguage.nlu":{"source":"iana","extensions":["nlu"]},"application/vnd.nimn":{"source":"iana"},"application/vnd.nintendo.nitro.rom":{"source":"iana"},"application/vnd.nintendo.snes.rom":{"source":"iana"},"application/vnd.nitf":{"source":"iana","extensions":["ntf","nitf"]},"application/vnd.noblenet-directory":{"source":"iana","extensions":["nnd"]},"application/vnd.noblenet-sealer":{"source":"iana","extensions":["nns"]},"application/vnd.noblenet-web":{"source":"iana","extensions":["nnw"]},"application/vnd.nokia.catalogs":{"source":"iana"},"application/vnd.nokia.conml+wbxml":{"source":"iana"},"application/vnd.nokia.conml+xml":{"source":"iana","compressible":true},"application/vnd.nokia.iptv.config+xml":{"source":"iana","compressible":true},"application/vnd.nokia.isds-radio-presets":{"source":"iana"},"application/vnd.nokia.landmark+wbxml":{"source":"iana"},"application/vnd.nokia.landmark+xml":{"source":"iana","compressible":true},"application/vnd.nokia.landmarkcollection+xml":{"source":"iana","compressible":true},"application/vnd.nokia.n-gage.ac+xml":{"source":"iana","compressible":true,"extensions":["ac"]},"application/vnd.nokia.n-gage.data":{"source":"iana","extensions":["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{"source":"iana","extensions":["n-gage"]},"application/vnd.nokia.ncd":{"source":"iana"},"application/vnd.nokia.pcd+wbxml":{"source":"iana"},"application/vnd.nokia.pcd+xml":{"source":"iana","compressible":true},"application/vnd.nokia.radio-preset":{"source":"iana","extensions":["rpst"]},"application/vnd.nokia.radio-presets":{"source":"iana","extensions":["rpss"]},"application/vnd.novadigm.edm":{"source":"iana","extensions":["edm"]},"application/vnd.novadigm.edx":{"source":"iana","extensions":["edx"]},"application/vnd.novadigm.ext":{"source":"iana","extensions":["ext"]},"application/vnd.ntt-local.content-share":{"source":"iana"},"application/vnd.ntt-local.file-transfer":{"source":"iana"},"application/vnd.ntt-local.ogw_remote-access":{"source":"iana"},"application/vnd.ntt-local.sip-ta_remote":{"source":"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{"source":"iana"},"application/vnd.oasis.opendocument.chart":{"source":"iana","extensions":["odc"]},"application/vnd.oasis.opendocument.chart-template":{"source":"iana","extensions":["otc"]},"application/vnd.oasis.opendocument.database":{"source":"iana","extensions":["odb"]},"application/vnd.oasis.opendocument.formula":{"source":"iana","extensions":["odf"]},"application/vnd.oasis.opendocument.formula-template":{"source":"iana","extensions":["odft"]},"application/vnd.oasis.opendocument.graphics":{"source":"iana","compressible":false,"extensions":["odg"]},"application/vnd.oasis.opendocument.graphics-template":{"source":"iana","extensions":["otg"]},"application/vnd.oasis.opendocument.image":{"source":"iana","extensions":["odi"]},"application/vnd.oasis.opendocument.image-template":{"source":"iana","extensions":["oti"]},"application/vnd.oasis.opendocument.presentation":{"source":"iana","compressible":false,"extensions":["odp"]},"application/vnd.oasis.opendocument.presentation-template":{"source":"iana","extensions":["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{"source":"iana","compressible":false,"extensions":["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{"source":"iana","extensions":["ots"]},"application/vnd.oasis.opendocument.text":{"source":"iana","compressible":false,"extensions":["odt"]},"application/vnd.oasis.opendocument.text-master":{"source":"iana","extensions":["odm"]},"application/vnd.oasis.opendocument.text-template":{"source":"iana","extensions":["ott"]},"application/vnd.oasis.opendocument.text-web":{"source":"iana","extensions":["oth"]},"application/vnd.obn":{"source":"iana"},"application/vnd.ocf+cbor":{"source":"iana"},"application/vnd.oci.image.manifest.v1+json":{"source":"iana","compressible":true},"application/vnd.oftn.l10n+json":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessdownload+xml":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessstreaming+xml":{"source":"iana","compressible":true},"application/vnd.oipf.cspg-hexbinary":{"source":"iana"},"application/vnd.oipf.dae.svg+xml":{"source":"iana","compressible":true},"application/vnd.oipf.dae.xhtml+xml":{"source":"iana","compressible":true},"application/vnd.oipf.mippvcontrolmessage+xml":{"source":"iana","compressible":true},"application/vnd.oipf.pae.gem":{"source":"iana"},"application/vnd.oipf.spdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.oipf.spdlist+xml":{"source":"iana","compressible":true},"application/vnd.oipf.ueprofile+xml":{"source":"iana","compressible":true},"application/vnd.oipf.userprofile+xml":{"source":"iana","compressible":true},"application/vnd.olpc-sugar":{"source":"iana","extensions":["xo"]},"application/vnd.oma-scws-config":{"source":"iana"},"application/vnd.oma-scws-http-request":{"source":"iana"},"application/vnd.oma-scws-http-response":{"source":"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.drm-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.imd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.ltkm":{"source":"iana"},"application/vnd.oma.bcast.notification+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.provisioningtrigger":{"source":"iana"},"application/vnd.oma.bcast.sgboot":{"source":"iana"},"application/vnd.oma.bcast.sgdd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sgdu":{"source":"iana"},"application/vnd.oma.bcast.simple-symbol-container":{"source":"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sprov+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.stkm":{"source":"iana"},"application/vnd.oma.cab-address-book+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-feature-handler+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-pcc+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-subs-invite+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-user-prefs+xml":{"source":"iana","compressible":true},"application/vnd.oma.dcd":{"source":"iana"},"application/vnd.oma.dcdc":{"source":"iana"},"application/vnd.oma.dd2+xml":{"source":"iana","compressible":true,"extensions":["dd2"]},"application/vnd.oma.drm.risd+xml":{"source":"iana","compressible":true},"application/vnd.oma.group-usage-list+xml":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+cbor":{"source":"iana"},"application/vnd.oma.lwm2m+json":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+tlv":{"source":"iana"},"application/vnd.oma.pal+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.detailed-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.final-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.groups+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.invocation-descriptor+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.optimized-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.push":{"source":"iana"},"application/vnd.oma.scidm.messages+xml":{"source":"iana","compressible":true},"application/vnd.oma.xcap-directory+xml":{"source":"iana","compressible":true},"application/vnd.omads-email+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omads-file+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omads-folder+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omaloc-supl-init":{"source":"iana"},"application/vnd.onepager":{"source":"iana"},"application/vnd.onepagertamp":{"source":"iana"},"application/vnd.onepagertamx":{"source":"iana"},"application/vnd.onepagertat":{"source":"iana"},"application/vnd.onepagertatp":{"source":"iana"},"application/vnd.onepagertatx":{"source":"iana"},"application/vnd.openblox.game+xml":{"source":"iana","compressible":true,"extensions":["obgx"]},"application/vnd.openblox.game-binary":{"source":"iana"},"application/vnd.openeye.oeb":{"source":"iana"},"application/vnd.openofficeorg.extension":{"source":"apache","extensions":["oxt"]},"application/vnd.openstreetmap.data+xml":{"source":"iana","compressible":true,"extensions":["osm"]},"application/vnd.opentimestamps.ots":{"source":"iana"},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawing+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{"source":"iana","compressible":false,"extensions":["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slide":{"source":"iana","extensions":["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{"source":"iana","extensions":["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.template":{"source":"iana","extensions":["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{"source":"iana","compressible":false,"extensions":["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{"source":"iana","extensions":["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.theme+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.vmldrawing":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{"source":"iana","compressible":false,"extensions":["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{"source":"iana","extensions":["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.core-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.relationships+xml":{"source":"iana","compressible":true},"application/vnd.oracle.resource+json":{"source":"iana","compressible":true},"application/vnd.orange.indata":{"source":"iana"},"application/vnd.osa.netdeploy":{"source":"iana"},"application/vnd.osgeo.mapguide.package":{"source":"iana","extensions":["mgp"]},"application/vnd.osgi.bundle":{"source":"iana"},"application/vnd.osgi.dp":{"source":"iana","extensions":["dp"]},"application/vnd.osgi.subsystem":{"source":"iana","extensions":["esa"]},"application/vnd.otps.ct-kip+xml":{"source":"iana","compressible":true},"application/vnd.oxli.countgraph":{"source":"iana"},"application/vnd.pagerduty+json":{"source":"iana","compressible":true},"application/vnd.palm":{"source":"iana","extensions":["pdb","pqa","oprc"]},"application/vnd.panoply":{"source":"iana"},"application/vnd.paos.xml":{"source":"iana"},"application/vnd.patentdive":{"source":"iana"},"application/vnd.patientecommsdoc":{"source":"iana"},"application/vnd.pawaafile":{"source":"iana","extensions":["paw"]},"application/vnd.pcos":{"source":"iana"},"application/vnd.pg.format":{"source":"iana","extensions":["str"]},"application/vnd.pg.osasli":{"source":"iana","extensions":["ei6"]},"application/vnd.piaccess.application-licence":{"source":"iana"},"application/vnd.picsel":{"source":"iana","extensions":["efif"]},"application/vnd.pmi.widget":{"source":"iana","extensions":["wg"]},"application/vnd.poc.group-advertisement+xml":{"source":"iana","compressible":true},"application/vnd.pocketlearn":{"source":"iana","extensions":["plf"]},"application/vnd.powerbuilder6":{"source":"iana","extensions":["pbd"]},"application/vnd.powerbuilder6-s":{"source":"iana"},"application/vnd.powerbuilder7":{"source":"iana"},"application/vnd.powerbuilder7-s":{"source":"iana"},"application/vnd.powerbuilder75":{"source":"iana"},"application/vnd.powerbuilder75-s":{"source":"iana"},"application/vnd.preminet":{"source":"iana"},"application/vnd.previewsystems.box":{"source":"iana","extensions":["box"]},"application/vnd.proteus.magazine":{"source":"iana","extensions":["mgz"]},"application/vnd.psfs":{"source":"iana"},"application/vnd.publishare-delta-tree":{"source":"iana","extensions":["qps"]},"application/vnd.pvi.ptid1":{"source":"iana","extensions":["ptid"]},"application/vnd.pwg-multiplexed":{"source":"iana"},"application/vnd.pwg-xhtml-print+xml":{"source":"iana","compressible":true},"application/vnd.qualcomm.brew-app-res":{"source":"iana"},"application/vnd.quarantainenet":{"source":"iana"},"application/vnd.quark.quarkxpress":{"source":"iana","extensions":["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{"source":"iana"},"application/vnd.radisys.moml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conn+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-stream+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-base+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-detect+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-group+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-speech+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-transform+xml":{"source":"iana","compressible":true},"application/vnd.rainstor.data":{"source":"iana"},"application/vnd.rapid":{"source":"iana"},"application/vnd.rar":{"source":"iana","extensions":["rar"]},"application/vnd.realvnc.bed":{"source":"iana","extensions":["bed"]},"application/vnd.recordare.musicxml":{"source":"iana","extensions":["mxl"]},"application/vnd.recordare.musicxml+xml":{"source":"iana","compressible":true,"extensions":["musicxml"]},"application/vnd.renlearn.rlprint":{"source":"iana"},"application/vnd.resilient.logic":{"source":"iana"},"application/vnd.restful+json":{"source":"iana","compressible":true},"application/vnd.rig.cryptonote":{"source":"iana","extensions":["cryptonote"]},"application/vnd.rim.cod":{"source":"apache","extensions":["cod"]},"application/vnd.rn-realmedia":{"source":"apache","extensions":["rm"]},"application/vnd.rn-realmedia-vbr":{"source":"apache","extensions":["rmvb"]},"application/vnd.route66.link66+xml":{"source":"iana","compressible":true,"extensions":["link66"]},"application/vnd.rs-274x":{"source":"iana"},"application/vnd.ruckus.download":{"source":"iana"},"application/vnd.s3sms":{"source":"iana"},"application/vnd.sailingtracker.track":{"source":"iana","extensions":["st"]},"application/vnd.sar":{"source":"iana"},"application/vnd.sbm.cid":{"source":"iana"},"application/vnd.sbm.mid2":{"source":"iana"},"application/vnd.scribus":{"source":"iana"},"application/vnd.sealed.3df":{"source":"iana"},"application/vnd.sealed.csf":{"source":"iana"},"application/vnd.sealed.doc":{"source":"iana"},"application/vnd.sealed.eml":{"source":"iana"},"application/vnd.sealed.mht":{"source":"iana"},"application/vnd.sealed.net":{"source":"iana"},"application/vnd.sealed.ppt":{"source":"iana"},"application/vnd.sealed.tiff":{"source":"iana"},"application/vnd.sealed.xls":{"source":"iana"},"application/vnd.sealedmedia.softseal.html":{"source":"iana"},"application/vnd.sealedmedia.softseal.pdf":{"source":"iana"},"application/vnd.seemail":{"source":"iana","extensions":["see"]},"application/vnd.seis+json":{"source":"iana","compressible":true},"application/vnd.sema":{"source":"iana","extensions":["sema"]},"application/vnd.semd":{"source":"iana","extensions":["semd"]},"application/vnd.semf":{"source":"iana","extensions":["semf"]},"application/vnd.shade-save-file":{"source":"iana"},"application/vnd.shana.informed.formdata":{"source":"iana","extensions":["ifm"]},"application/vnd.shana.informed.formtemplate":{"source":"iana","extensions":["itp"]},"application/vnd.shana.informed.interchange":{"source":"iana","extensions":["iif"]},"application/vnd.shana.informed.package":{"source":"iana","extensions":["ipk"]},"application/vnd.shootproof+json":{"source":"iana","compressible":true},"application/vnd.shopkick+json":{"source":"iana","compressible":true},"application/vnd.shp":{"source":"iana"},"application/vnd.shx":{"source":"iana"},"application/vnd.sigrok.session":{"source":"iana"},"application/vnd.simtech-mindmapper":{"source":"iana","extensions":["twd","twds"]},"application/vnd.siren+json":{"source":"iana","compressible":true},"application/vnd.smaf":{"source":"iana","extensions":["mmf"]},"application/vnd.smart.notebook":{"source":"iana"},"application/vnd.smart.teacher":{"source":"iana","extensions":["teacher"]},"application/vnd.snesdev-page-table":{"source":"iana"},"application/vnd.software602.filler.form+xml":{"source":"iana","compressible":true,"extensions":["fo"]},"application/vnd.software602.filler.form-xml-zip":{"source":"iana"},"application/vnd.solent.sdkm+xml":{"source":"iana","compressible":true,"extensions":["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{"source":"iana","extensions":["dxp"]},"application/vnd.spotfire.sfs":{"source":"iana","extensions":["sfs"]},"application/vnd.sqlite3":{"source":"iana"},"application/vnd.sss-cod":{"source":"iana"},"application/vnd.sss-dtf":{"source":"iana"},"application/vnd.sss-ntf":{"source":"iana"},"application/vnd.stardivision.calc":{"source":"apache","extensions":["sdc"]},"application/vnd.stardivision.draw":{"source":"apache","extensions":["sda"]},"application/vnd.stardivision.impress":{"source":"apache","extensions":["sdd"]},"application/vnd.stardivision.math":{"source":"apache","extensions":["smf"]},"application/vnd.stardivision.writer":{"source":"apache","extensions":["sdw","vor"]},"application/vnd.stardivision.writer-global":{"source":"apache","extensions":["sgl"]},"application/vnd.stepmania.package":{"source":"iana","extensions":["smzip"]},"application/vnd.stepmania.stepchart":{"source":"iana","extensions":["sm"]},"application/vnd.street-stream":{"source":"iana"},"application/vnd.sun.wadl+xml":{"source":"iana","compressible":true,"extensions":["wadl"]},"application/vnd.sun.xml.calc":{"source":"apache","extensions":["sxc"]},"application/vnd.sun.xml.calc.template":{"source":"apache","extensions":["stc"]},"application/vnd.sun.xml.draw":{"source":"apache","extensions":["sxd"]},"application/vnd.sun.xml.draw.template":{"source":"apache","extensions":["std"]},"application/vnd.sun.xml.impress":{"source":"apache","extensions":["sxi"]},"application/vnd.sun.xml.impress.template":{"source":"apache","extensions":["sti"]},"application/vnd.sun.xml.math":{"source":"apache","extensions":["sxm"]},"application/vnd.sun.xml.writer":{"source":"apache","extensions":["sxw"]},"application/vnd.sun.xml.writer.global":{"source":"apache","extensions":["sxg"]},"application/vnd.sun.xml.writer.template":{"source":"apache","extensions":["stw"]},"application/vnd.sus-calendar":{"source":"iana","extensions":["sus","susp"]},"application/vnd.svd":{"source":"iana","extensions":["svd"]},"application/vnd.swiftview-ics":{"source":"iana"},"application/vnd.sycle+xml":{"source":"iana","compressible":true},"application/vnd.syft+json":{"source":"iana","compressible":true},"application/vnd.symbian.install":{"source":"apache","extensions":["sis","sisx"]},"application/vnd.syncml+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["xsm"]},"application/vnd.syncml.dm+wbxml":{"source":"iana","charset":"UTF-8","extensions":["bdm"]},"application/vnd.syncml.dm+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["xdm"]},"application/vnd.syncml.dm.notification":{"source":"iana"},"application/vnd.syncml.dmddf+wbxml":{"source":"iana"},"application/vnd.syncml.dmddf+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["ddf"]},"application/vnd.syncml.dmtnds+wbxml":{"source":"iana"},"application/vnd.syncml.dmtnds+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.syncml.ds.notification":{"source":"iana"},"application/vnd.tableschema+json":{"source":"iana","compressible":true},"application/vnd.tao.intent-module-archive":{"source":"iana","extensions":["tao"]},"application/vnd.tcpdump.pcap":{"source":"iana","extensions":["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{"source":"iana","compressible":true},"application/vnd.tmd.mediaflex.api+xml":{"source":"iana","compressible":true},"application/vnd.tml":{"source":"iana"},"application/vnd.tmobile-livetv":{"source":"iana","extensions":["tmo"]},"application/vnd.tri.onesource":{"source":"iana"},"application/vnd.trid.tpt":{"source":"iana","extensions":["tpt"]},"application/vnd.triscape.mxs":{"source":"iana","extensions":["mxs"]},"application/vnd.trueapp":{"source":"iana","extensions":["tra"]},"application/vnd.truedoc":{"source":"iana"},"application/vnd.ubisoft.webplayer":{"source":"iana"},"application/vnd.ufdl":{"source":"iana","extensions":["ufd","ufdl"]},"application/vnd.uiq.theme":{"source":"iana","extensions":["utz"]},"application/vnd.umajin":{"source":"iana","extensions":["umj"]},"application/vnd.unity":{"source":"iana","extensions":["unityweb"]},"application/vnd.uoml+xml":{"source":"iana","compressible":true,"extensions":["uoml"]},"application/vnd.uplanet.alert":{"source":"iana"},"application/vnd.uplanet.alert-wbxml":{"source":"iana"},"application/vnd.uplanet.bearer-choice":{"source":"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{"source":"iana"},"application/vnd.uplanet.cacheop":{"source":"iana"},"application/vnd.uplanet.cacheop-wbxml":{"source":"iana"},"application/vnd.uplanet.channel":{"source":"iana"},"application/vnd.uplanet.channel-wbxml":{"source":"iana"},"application/vnd.uplanet.list":{"source":"iana"},"application/vnd.uplanet.list-wbxml":{"source":"iana"},"application/vnd.uplanet.listcmd":{"source":"iana"},"application/vnd.uplanet.listcmd-wbxml":{"source":"iana"},"application/vnd.uplanet.signal":{"source":"iana"},"application/vnd.uri-map":{"source":"iana"},"application/vnd.valve.source.material":{"source":"iana"},"application/vnd.vcx":{"source":"iana","extensions":["vcx"]},"application/vnd.vd-study":{"source":"iana"},"application/vnd.vectorworks":{"source":"iana"},"application/vnd.vel+json":{"source":"iana","compressible":true},"application/vnd.verimatrix.vcas":{"source":"iana"},"application/vnd.veritone.aion+json":{"source":"iana","compressible":true},"application/vnd.veryant.thin":{"source":"iana"},"application/vnd.ves.encrypted":{"source":"iana"},"application/vnd.vidsoft.vidconference":{"source":"iana"},"application/vnd.visio":{"source":"iana","extensions":["vsd","vst","vss","vsw"]},"application/vnd.visionary":{"source":"iana","extensions":["vis"]},"application/vnd.vividence.scriptfile":{"source":"iana"},"application/vnd.vsf":{"source":"iana","extensions":["vsf"]},"application/vnd.wap.sic":{"source":"iana"},"application/vnd.wap.slc":{"source":"iana"},"application/vnd.wap.wbxml":{"source":"iana","charset":"UTF-8","extensions":["wbxml"]},"application/vnd.wap.wmlc":{"source":"iana","extensions":["wmlc"]},"application/vnd.wap.wmlscriptc":{"source":"iana","extensions":["wmlsc"]},"application/vnd.webturbo":{"source":"iana","extensions":["wtb"]},"application/vnd.wfa.dpp":{"source":"iana"},"application/vnd.wfa.p2p":{"source":"iana"},"application/vnd.wfa.wsc":{"source":"iana"},"application/vnd.windows.devicepairing":{"source":"iana"},"application/vnd.wmc":{"source":"iana"},"application/vnd.wmf.bootstrap":{"source":"iana"},"application/vnd.wolfram.mathematica":{"source":"iana"},"application/vnd.wolfram.mathematica.package":{"source":"iana"},"application/vnd.wolfram.player":{"source":"iana","extensions":["nbp"]},"application/vnd.wordperfect":{"source":"iana","extensions":["wpd"]},"application/vnd.wqd":{"source":"iana","extensions":["wqd"]},"application/vnd.wrq-hp3000-labelled":{"source":"iana"},"application/vnd.wt.stf":{"source":"iana","extensions":["stf"]},"application/vnd.wv.csp+wbxml":{"source":"iana"},"application/vnd.wv.csp+xml":{"source":"iana","compressible":true},"application/vnd.wv.ssp+xml":{"source":"iana","compressible":true},"application/vnd.xacml+json":{"source":"iana","compressible":true},"application/vnd.xara":{"source":"iana","extensions":["xar"]},"application/vnd.xfdl":{"source":"iana","extensions":["xfdl"]},"application/vnd.xfdl.webform":{"source":"iana"},"application/vnd.xmi+xml":{"source":"iana","compressible":true},"application/vnd.xmpie.cpkg":{"source":"iana"},"application/vnd.xmpie.dpkg":{"source":"iana"},"application/vnd.xmpie.plan":{"source":"iana"},"application/vnd.xmpie.ppkg":{"source":"iana"},"application/vnd.xmpie.xlim":{"source":"iana"},"application/vnd.yamaha.hv-dic":{"source":"iana","extensions":["hvd"]},"application/vnd.yamaha.hv-script":{"source":"iana","extensions":["hvs"]},"application/vnd.yamaha.hv-voice":{"source":"iana","extensions":["hvp"]},"application/vnd.yamaha.openscoreformat":{"source":"iana","extensions":["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{"source":"iana","compressible":true,"extensions":["osfpvg"]},"application/vnd.yamaha.remote-setup":{"source":"iana"},"application/vnd.yamaha.smaf-audio":{"source":"iana","extensions":["saf"]},"application/vnd.yamaha.smaf-phrase":{"source":"iana","extensions":["spf"]},"application/vnd.yamaha.through-ngn":{"source":"iana"},"application/vnd.yamaha.tunnel-udpencap":{"source":"iana"},"application/vnd.yaoweme":{"source":"iana"},"application/vnd.yellowriver-custom-menu":{"source":"iana","extensions":["cmp"]},"application/vnd.youtube.yt":{"source":"iana"},"application/vnd.zul":{"source":"iana","extensions":["zir","zirz"]},"application/vnd.zzazz.deck+xml":{"source":"iana","compressible":true,"extensions":["zaz"]},"application/voicexml+xml":{"source":"iana","compressible":true,"extensions":["vxml"]},"application/voucher-cms+json":{"source":"iana","compressible":true},"application/vq-rtcpxr":{"source":"iana"},"application/wasm":{"source":"iana","compressible":true,"extensions":["wasm"]},"application/watcherinfo+xml":{"source":"iana","compressible":true,"extensions":["wif"]},"application/webpush-options+json":{"source":"iana","compressible":true},"application/whoispp-query":{"source":"iana"},"application/whoispp-response":{"source":"iana"},"application/widget":{"source":"iana","extensions":["wgt"]},"application/winhlp":{"source":"apache","extensions":["hlp"]},"application/wita":{"source":"iana"},"application/wordperfect5.1":{"source":"iana"},"application/wsdl+xml":{"source":"iana","compressible":true,"extensions":["wsdl"]},"application/wspolicy+xml":{"source":"iana","compressible":true,"extensions":["wspolicy"]},"application/x-7z-compressed":{"source":"apache","compressible":false,"extensions":["7z"]},"application/x-abiword":{"source":"apache","extensions":["abw"]},"application/x-ace-compressed":{"source":"apache","extensions":["ace"]},"application/x-amf":{"source":"apache"},"application/x-apple-diskimage":{"source":"apache","extensions":["dmg"]},"application/x-arj":{"compressible":false,"extensions":["arj"]},"application/x-authorware-bin":{"source":"apache","extensions":["aab","x32","u32","vox"]},"application/x-authorware-map":{"source":"apache","extensions":["aam"]},"application/x-authorware-seg":{"source":"apache","extensions":["aas"]},"application/x-bcpio":{"source":"apache","extensions":["bcpio"]},"application/x-bdoc":{"compressible":false,"extensions":["bdoc"]},"application/x-bittorrent":{"source":"apache","extensions":["torrent"]},"application/x-blorb":{"source":"apache","extensions":["blb","blorb"]},"application/x-bzip":{"source":"apache","compressible":false,"extensions":["bz"]},"application/x-bzip2":{"source":"apache","compressible":false,"extensions":["bz2","boz"]},"application/x-cbr":{"source":"apache","extensions":["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{"source":"apache","extensions":["vcd"]},"application/x-cfs-compressed":{"source":"apache","extensions":["cfs"]},"application/x-chat":{"source":"apache","extensions":["chat"]},"application/x-chess-pgn":{"source":"apache","extensions":["pgn"]},"application/x-chrome-extension":{"extensions":["crx"]},"application/x-cocoa":{"source":"nginx","extensions":["cco"]},"application/x-compress":{"source":"apache"},"application/x-conference":{"source":"apache","extensions":["nsc"]},"application/x-cpio":{"source":"apache","extensions":["cpio"]},"application/x-csh":{"source":"apache","extensions":["csh"]},"application/x-deb":{"compressible":false},"application/x-debian-package":{"source":"apache","extensions":["deb","udeb"]},"application/x-dgc-compressed":{"source":"apache","extensions":["dgc"]},"application/x-director":{"source":"apache","extensions":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{"source":"apache","extensions":["wad"]},"application/x-dtbncx+xml":{"source":"apache","compressible":true,"extensions":["ncx"]},"application/x-dtbook+xml":{"source":"apache","compressible":true,"extensions":["dtb"]},"application/x-dtbresource+xml":{"source":"apache","compressible":true,"extensions":["res"]},"application/x-dvi":{"source":"apache","compressible":false,"extensions":["dvi"]},"application/x-envoy":{"source":"apache","extensions":["evy"]},"application/x-eva":{"source":"apache","extensions":["eva"]},"application/x-font-bdf":{"source":"apache","extensions":["bdf"]},"application/x-font-dos":{"source":"apache"},"application/x-font-framemaker":{"source":"apache"},"application/x-font-ghostscript":{"source":"apache","extensions":["gsf"]},"application/x-font-libgrx":{"source":"apache"},"application/x-font-linux-psf":{"source":"apache","extensions":["psf"]},"application/x-font-pcf":{"source":"apache","extensions":["pcf"]},"application/x-font-snf":{"source":"apache","extensions":["snf"]},"application/x-font-speedo":{"source":"apache"},"application/x-font-sunos-news":{"source":"apache"},"application/x-font-type1":{"source":"apache","extensions":["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{"source":"apache"},"application/x-freearc":{"source":"apache","extensions":["arc"]},"application/x-futuresplash":{"source":"apache","extensions":["spl"]},"application/x-gca-compressed":{"source":"apache","extensions":["gca"]},"application/x-glulx":{"source":"apache","extensions":["ulx"]},"application/x-gnumeric":{"source":"apache","extensions":["gnumeric"]},"application/x-gramps-xml":{"source":"apache","extensions":["gramps"]},"application/x-gtar":{"source":"apache","extensions":["gtar"]},"application/x-gzip":{"source":"apache"},"application/x-hdf":{"source":"apache","extensions":["hdf"]},"application/x-httpd-php":{"compressible":true,"extensions":["php"]},"application/x-install-instructions":{"source":"apache","extensions":["install"]},"application/x-iso9660-image":{"source":"apache","extensions":["iso"]},"application/x-iwork-keynote-sffkey":{"extensions":["key"]},"application/x-iwork-numbers-sffnumbers":{"extensions":["numbers"]},"application/x-iwork-pages-sffpages":{"extensions":["pages"]},"application/x-java-archive-diff":{"source":"nginx","extensions":["jardiff"]},"application/x-java-jnlp-file":{"source":"apache","compressible":false,"extensions":["jnlp"]},"application/x-javascript":{"compressible":true},"application/x-keepass2":{"extensions":["kdbx"]},"application/x-latex":{"source":"apache","compressible":false,"extensions":["latex"]},"application/x-lua-bytecode":{"extensions":["luac"]},"application/x-lzh-compressed":{"source":"apache","extensions":["lzh","lha"]},"application/x-makeself":{"source":"nginx","extensions":["run"]},"application/x-mie":{"source":"apache","extensions":["mie"]},"application/x-mobipocket-ebook":{"source":"apache","extensions":["prc","mobi"]},"application/x-mpegurl":{"compressible":false},"application/x-ms-application":{"source":"apache","extensions":["application"]},"application/x-ms-shortcut":{"source":"apache","extensions":["lnk"]},"application/x-ms-wmd":{"source":"apache","extensions":["wmd"]},"application/x-ms-wmz":{"source":"apache","extensions":["wmz"]},"application/x-ms-xbap":{"source":"apache","extensions":["xbap"]},"application/x-msaccess":{"source":"apache","extensions":["mdb"]},"application/x-msbinder":{"source":"apache","extensions":["obd"]},"application/x-mscardfile":{"source":"apache","extensions":["crd"]},"application/x-msclip":{"source":"apache","extensions":["clp"]},"application/x-msdos-program":{"extensions":["exe"]},"application/x-msdownload":{"source":"apache","extensions":["exe","dll","com","bat","msi"]},"application/x-msmediaview":{"source":"apache","extensions":["mvb","m13","m14"]},"application/x-msmetafile":{"source":"apache","extensions":["wmf","wmz","emf","emz"]},"application/x-msmoney":{"source":"apache","extensions":["mny"]},"application/x-mspublisher":{"source":"apache","extensions":["pub"]},"application/x-msschedule":{"source":"apache","extensions":["scd"]},"application/x-msterminal":{"source":"apache","extensions":["trm"]},"application/x-mswrite":{"source":"apache","extensions":["wri"]},"application/x-netcdf":{"source":"apache","extensions":["nc","cdf"]},"application/x-ns-proxy-autoconfig":{"compressible":true,"extensions":["pac"]},"application/x-nzb":{"source":"apache","extensions":["nzb"]},"application/x-perl":{"source":"nginx","extensions":["pl","pm"]},"application/x-pilot":{"source":"nginx","extensions":["prc","pdb"]},"application/x-pkcs12":{"source":"apache","compressible":false,"extensions":["p12","pfx"]},"application/x-pkcs7-certificates":{"source":"apache","extensions":["p7b","spc"]},"application/x-pkcs7-certreqresp":{"source":"apache","extensions":["p7r"]},"application/x-pki-message":{"source":"iana"},"application/x-rar-compressed":{"source":"apache","compressible":false,"extensions":["rar"]},"application/x-redhat-package-manager":{"source":"nginx","extensions":["rpm"]},"application/x-research-info-systems":{"source":"apache","extensions":["ris"]},"application/x-sea":{"source":"nginx","extensions":["sea"]},"application/x-sh":{"source":"apache","compressible":true,"extensions":["sh"]},"application/x-shar":{"source":"apache","extensions":["shar"]},"application/x-shockwave-flash":{"source":"apache","compressible":false,"extensions":["swf"]},"application/x-silverlight-app":{"source":"apache","extensions":["xap"]},"application/x-sql":{"source":"apache","extensions":["sql"]},"application/x-stuffit":{"source":"apache","compressible":false,"extensions":["sit"]},"application/x-stuffitx":{"source":"apache","extensions":["sitx"]},"application/x-subrip":{"source":"apache","extensions":["srt"]},"application/x-sv4cpio":{"source":"apache","extensions":["sv4cpio"]},"application/x-sv4crc":{"source":"apache","extensions":["sv4crc"]},"application/x-t3vm-image":{"source":"apache","extensions":["t3"]},"application/x-tads":{"source":"apache","extensions":["gam"]},"application/x-tar":{"source":"apache","compressible":true,"extensions":["tar"]},"application/x-tcl":{"source":"apache","extensions":["tcl","tk"]},"application/x-tex":{"source":"apache","extensions":["tex"]},"application/x-tex-tfm":{"source":"apache","extensions":["tfm"]},"application/x-texinfo":{"source":"apache","extensions":["texinfo","texi"]},"application/x-tgif":{"source":"apache","extensions":["obj"]},"application/x-ustar":{"source":"apache","extensions":["ustar"]},"application/x-virtualbox-hdd":{"compressible":true,"extensions":["hdd"]},"application/x-virtualbox-ova":{"compressible":true,"extensions":["ova"]},"application/x-virtualbox-ovf":{"compressible":true,"extensions":["ovf"]},"application/x-virtualbox-vbox":{"compressible":true,"extensions":["vbox"]},"application/x-virtualbox-vbox-extpack":{"compressible":false,"extensions":["vbox-extpack"]},"application/x-virtualbox-vdi":{"compressible":true,"extensions":["vdi"]},"application/x-virtualbox-vhd":{"compressible":true,"extensions":["vhd"]},"application/x-virtualbox-vmdk":{"compressible":true,"extensions":["vmdk"]},"application/x-wais-source":{"source":"apache","extensions":["src"]},"application/x-web-app-manifest+json":{"compressible":true,"extensions":["webapp"]},"application/x-www-form-urlencoded":{"source":"iana","compressible":true},"application/x-x509-ca-cert":{"source":"iana","extensions":["der","crt","pem"]},"application/x-x509-ca-ra-cert":{"source":"iana"},"application/x-x509-next-ca-cert":{"source":"iana"},"application/x-xfig":{"source":"apache","extensions":["fig"]},"application/x-xliff+xml":{"source":"apache","compressible":true,"extensions":["xlf"]},"application/x-xpinstall":{"source":"apache","compressible":false,"extensions":["xpi"]},"application/x-xz":{"source":"apache","extensions":["xz"]},"application/x-zmachine":{"source":"apache","extensions":["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{"source":"iana"},"application/xacml+xml":{"source":"iana","compressible":true},"application/xaml+xml":{"source":"apache","compressible":true,"extensions":["xaml"]},"application/xcap-att+xml":{"source":"iana","compressible":true,"extensions":["xav"]},"application/xcap-caps+xml":{"source":"iana","compressible":true,"extensions":["xca"]},"application/xcap-diff+xml":{"source":"iana","compressible":true,"extensions":["xdf"]},"application/xcap-el+xml":{"source":"iana","compressible":true,"extensions":["xel"]},"application/xcap-error+xml":{"source":"iana","compressible":true},"application/xcap-ns+xml":{"source":"iana","compressible":true,"extensions":["xns"]},"application/xcon-conference-info+xml":{"source":"iana","compressible":true},"application/xcon-conference-info-diff+xml":{"source":"iana","compressible":true},"application/xenc+xml":{"source":"iana","compressible":true,"extensions":["xenc"]},"application/xhtml+xml":{"source":"iana","compressible":true,"extensions":["xhtml","xht"]},"application/xhtml-voice+xml":{"source":"apache","compressible":true},"application/xliff+xml":{"source":"iana","compressible":true,"extensions":["xlf"]},"application/xml":{"source":"iana","compressible":true,"extensions":["xml","xsl","xsd","rng"]},"application/xml-dtd":{"source":"iana","compressible":true,"extensions":["dtd"]},"application/xml-external-parsed-entity":{"source":"iana"},"application/xml-patch+xml":{"source":"iana","compressible":true},"application/xmpp+xml":{"source":"iana","compressible":true},"application/xop+xml":{"source":"iana","compressible":true,"extensions":["xop"]},"application/xproc+xml":{"source":"apache","compressible":true,"extensions":["xpl"]},"application/xslt+xml":{"source":"iana","compressible":true,"extensions":["xsl","xslt"]},"application/xspf+xml":{"source":"apache","compressible":true,"extensions":["xspf"]},"application/xv+xml":{"source":"iana","compressible":true,"extensions":["mxml","xhvml","xvml","xvm"]},"application/yang":{"source":"iana","extensions":["yang"]},"application/yang-data+json":{"source":"iana","compressible":true},"application/yang-data+xml":{"source":"iana","compressible":true},"application/yang-patch+json":{"source":"iana","compressible":true},"application/yang-patch+xml":{"source":"iana","compressible":true},"application/yin+xml":{"source":"iana","compressible":true,"extensions":["yin"]},"application/zip":{"source":"iana","compressible":false,"extensions":["zip"]},"application/zlib":{"source":"iana"},"application/zstd":{"source":"iana"},"audio/1d-interleaved-parityfec":{"source":"iana"},"audio/32kadpcm":{"source":"iana"},"audio/3gpp":{"source":"iana","compressible":false,"extensions":["3gpp"]},"audio/3gpp2":{"source":"iana"},"audio/aac":{"source":"iana"},"audio/ac3":{"source":"iana"},"audio/adpcm":{"source":"apache","extensions":["adp"]},"audio/amr":{"source":"iana","extensions":["amr"]},"audio/amr-wb":{"source":"iana"},"audio/amr-wb+":{"source":"iana"},"audio/aptx":{"source":"iana"},"audio/asc":{"source":"iana"},"audio/atrac-advanced-lossless":{"source":"iana"},"audio/atrac-x":{"source":"iana"},"audio/atrac3":{"source":"iana"},"audio/basic":{"source":"iana","compressible":false,"extensions":["au","snd"]},"audio/bv16":{"source":"iana"},"audio/bv32":{"source":"iana"},"audio/clearmode":{"source":"iana"},"audio/cn":{"source":"iana"},"audio/dat12":{"source":"iana"},"audio/dls":{"source":"iana"},"audio/dsr-es201108":{"source":"iana"},"audio/dsr-es202050":{"source":"iana"},"audio/dsr-es202211":{"source":"iana"},"audio/dsr-es202212":{"source":"iana"},"audio/dv":{"source":"iana"},"audio/dvi4":{"source":"iana"},"audio/eac3":{"source":"iana"},"audio/encaprtp":{"source":"iana"},"audio/evrc":{"source":"iana"},"audio/evrc-qcp":{"source":"iana"},"audio/evrc0":{"source":"iana"},"audio/evrc1":{"source":"iana"},"audio/evrcb":{"source":"iana"},"audio/evrcb0":{"source":"iana"},"audio/evrcb1":{"source":"iana"},"audio/evrcnw":{"source":"iana"},"audio/evrcnw0":{"source":"iana"},"audio/evrcnw1":{"source":"iana"},"audio/evrcwb":{"source":"iana"},"audio/evrcwb0":{"source":"iana"},"audio/evrcwb1":{"source":"iana"},"audio/evs":{"source":"iana"},"audio/flexfec":{"source":"iana"},"audio/fwdred":{"source":"iana"},"audio/g711-0":{"source":"iana"},"audio/g719":{"source":"iana"},"audio/g722":{"source":"iana"},"audio/g7221":{"source":"iana"},"audio/g723":{"source":"iana"},"audio/g726-16":{"source":"iana"},"audio/g726-24":{"source":"iana"},"audio/g726-32":{"source":"iana"},"audio/g726-40":{"source":"iana"},"audio/g728":{"source":"iana"},"audio/g729":{"source":"iana"},"audio/g7291":{"source":"iana"},"audio/g729d":{"source":"iana"},"audio/g729e":{"source":"iana"},"audio/gsm":{"source":"iana"},"audio/gsm-efr":{"source":"iana"},"audio/gsm-hr-08":{"source":"iana"},"audio/ilbc":{"source":"iana"},"audio/ip-mr_v2.5":{"source":"iana"},"audio/isac":{"source":"apache"},"audio/l16":{"source":"iana"},"audio/l20":{"source":"iana"},"audio/l24":{"source":"iana","compressible":false},"audio/l8":{"source":"iana"},"audio/lpc":{"source":"iana"},"audio/melp":{"source":"iana"},"audio/melp1200":{"source":"iana"},"audio/melp2400":{"source":"iana"},"audio/melp600":{"source":"iana"},"audio/mhas":{"source":"iana"},"audio/midi":{"source":"apache","extensions":["mid","midi","kar","rmi"]},"audio/mobile-xmf":{"source":"iana","extensions":["mxmf"]},"audio/mp3":{"compressible":false,"extensions":["mp3"]},"audio/mp4":{"source":"iana","compressible":false,"extensions":["m4a","mp4a"]},"audio/mp4a-latm":{"source":"iana"},"audio/mpa":{"source":"iana"},"audio/mpa-robust":{"source":"iana"},"audio/mpeg":{"source":"iana","compressible":false,"extensions":["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{"source":"iana"},"audio/musepack":{"source":"apache"},"audio/ogg":{"source":"iana","compressible":false,"extensions":["oga","ogg","spx","opus"]},"audio/opus":{"source":"iana"},"audio/parityfec":{"source":"iana"},"audio/pcma":{"source":"iana"},"audio/pcma-wb":{"source":"iana"},"audio/pcmu":{"source":"iana"},"audio/pcmu-wb":{"source":"iana"},"audio/prs.sid":{"source":"iana"},"audio/qcelp":{"source":"iana"},"audio/raptorfec":{"source":"iana"},"audio/red":{"source":"iana"},"audio/rtp-enc-aescm128":{"source":"iana"},"audio/rtp-midi":{"source":"iana"},"audio/rtploopback":{"source":"iana"},"audio/rtx":{"source":"iana"},"audio/s3m":{"source":"apache","extensions":["s3m"]},"audio/scip":{"source":"iana"},"audio/silk":{"source":"apache","extensions":["sil"]},"audio/smv":{"source":"iana"},"audio/smv-qcp":{"source":"iana"},"audio/smv0":{"source":"iana"},"audio/sofa":{"source":"iana"},"audio/sp-midi":{"source":"iana"},"audio/speex":{"source":"iana"},"audio/t140c":{"source":"iana"},"audio/t38":{"source":"iana"},"audio/telephone-event":{"source":"iana"},"audio/tetra_acelp":{"source":"iana"},"audio/tetra_acelp_bb":{"source":"iana"},"audio/tone":{"source":"iana"},"audio/tsvcis":{"source":"iana"},"audio/uemclip":{"source":"iana"},"audio/ulpfec":{"source":"iana"},"audio/usac":{"source":"iana"},"audio/vdvi":{"source":"iana"},"audio/vmr-wb":{"source":"iana"},"audio/vnd.3gpp.iufp":{"source":"iana"},"audio/vnd.4sb":{"source":"iana"},"audio/vnd.audiokoz":{"source":"iana"},"audio/vnd.celp":{"source":"iana"},"audio/vnd.cisco.nse":{"source":"iana"},"audio/vnd.cmles.radio-events":{"source":"iana"},"audio/vnd.cns.anp1":{"source":"iana"},"audio/vnd.cns.inf1":{"source":"iana"},"audio/vnd.dece.audio":{"source":"iana","extensions":["uva","uvva"]},"audio/vnd.digital-winds":{"source":"iana","extensions":["eol"]},"audio/vnd.dlna.adts":{"source":"iana"},"audio/vnd.dolby.heaac.1":{"source":"iana"},"audio/vnd.dolby.heaac.2":{"source":"iana"},"audio/vnd.dolby.mlp":{"source":"iana"},"audio/vnd.dolby.mps":{"source":"iana"},"audio/vnd.dolby.pl2":{"source":"iana"},"audio/vnd.dolby.pl2x":{"source":"iana"},"audio/vnd.dolby.pl2z":{"source":"iana"},"audio/vnd.dolby.pulse.1":{"source":"iana"},"audio/vnd.dra":{"source":"iana","extensions":["dra"]},"audio/vnd.dts":{"source":"iana","extensions":["dts"]},"audio/vnd.dts.hd":{"source":"iana","extensions":["dtshd"]},"audio/vnd.dts.uhd":{"source":"iana"},"audio/vnd.dvb.file":{"source":"iana"},"audio/vnd.everad.plj":{"source":"iana"},"audio/vnd.hns.audio":{"source":"iana"},"audio/vnd.lucent.voice":{"source":"iana","extensions":["lvp"]},"audio/vnd.ms-playready.media.pya":{"source":"iana","extensions":["pya"]},"audio/vnd.nokia.mobile-xmf":{"source":"iana"},"audio/vnd.nortel.vbk":{"source":"iana"},"audio/vnd.nuera.ecelp4800":{"source":"iana","extensions":["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{"source":"iana","extensions":["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{"source":"iana","extensions":["ecelp9600"]},"audio/vnd.octel.sbc":{"source":"iana"},"audio/vnd.presonus.multitrack":{"source":"iana"},"audio/vnd.qcelp":{"source":"iana"},"audio/vnd.rhetorex.32kadpcm":{"source":"iana"},"audio/vnd.rip":{"source":"iana","extensions":["rip"]},"audio/vnd.rn-realaudio":{"compressible":false},"audio/vnd.sealedmedia.softseal.mpeg":{"source":"iana"},"audio/vnd.vmx.cvsd":{"source":"iana"},"audio/vnd.wave":{"compressible":false},"audio/vorbis":{"source":"iana","compressible":false},"audio/vorbis-config":{"source":"iana"},"audio/wav":{"compressible":false,"extensions":["wav"]},"audio/wave":{"compressible":false,"extensions":["wav"]},"audio/webm":{"source":"apache","compressible":false,"extensions":["weba"]},"audio/x-aac":{"source":"apache","compressible":false,"extensions":["aac"]},"audio/x-aiff":{"source":"apache","extensions":["aif","aiff","aifc"]},"audio/x-caf":{"source":"apache","compressible":false,"extensions":["caf"]},"audio/x-flac":{"source":"apache","extensions":["flac"]},"audio/x-m4a":{"source":"nginx","extensions":["m4a"]},"audio/x-matroska":{"source":"apache","extensions":["mka"]},"audio/x-mpegurl":{"source":"apache","extensions":["m3u"]},"audio/x-ms-wax":{"source":"apache","extensions":["wax"]},"audio/x-ms-wma":{"source":"apache","extensions":["wma"]},"audio/x-pn-realaudio":{"source":"apache","extensions":["ram","ra"]},"audio/x-pn-realaudio-plugin":{"source":"apache","extensions":["rmp"]},"audio/x-realaudio":{"source":"nginx","extensions":["ra"]},"audio/x-tta":{"source":"apache"},"audio/x-wav":{"source":"apache","extensions":["wav"]},"audio/xm":{"source":"apache","extensions":["xm"]},"chemical/x-cdx":{"source":"apache","extensions":["cdx"]},"chemical/x-cif":{"source":"apache","extensions":["cif"]},"chemical/x-cmdf":{"source":"apache","extensions":["cmdf"]},"chemical/x-cml":{"source":"apache","extensions":["cml"]},"chemical/x-csml":{"source":"apache","extensions":["csml"]},"chemical/x-pdb":{"source":"apache"},"chemical/x-xyz":{"source":"apache","extensions":["xyz"]},"font/collection":{"source":"iana","extensions":["ttc"]},"font/otf":{"source":"iana","compressible":true,"extensions":["otf"]},"font/sfnt":{"source":"iana"},"font/ttf":{"source":"iana","compressible":true,"extensions":["ttf"]},"font/woff":{"source":"iana","extensions":["woff"]},"font/woff2":{"source":"iana","extensions":["woff2"]},"image/aces":{"source":"iana","extensions":["exr"]},"image/apng":{"compressible":false,"extensions":["apng"]},"image/avci":{"source":"iana","extensions":["avci"]},"image/avcs":{"source":"iana","extensions":["avcs"]},"image/avif":{"source":"iana","compressible":false,"extensions":["avif"]},"image/bmp":{"source":"iana","compressible":true,"extensions":["bmp"]},"image/cgm":{"source":"iana","extensions":["cgm"]},"image/dicom-rle":{"source":"iana","extensions":["drle"]},"image/emf":{"source":"iana","extensions":["emf"]},"image/fits":{"source":"iana","extensions":["fits"]},"image/g3fax":{"source":"iana","extensions":["g3"]},"image/gif":{"source":"iana","compressible":false,"extensions":["gif"]},"image/heic":{"source":"iana","extensions":["heic"]},"image/heic-sequence":{"source":"iana","extensions":["heics"]},"image/heif":{"source":"iana","extensions":["heif"]},"image/heif-sequence":{"source":"iana","extensions":["heifs"]},"image/hej2k":{"source":"iana","extensions":["hej2"]},"image/hsj2":{"source":"iana","extensions":["hsj2"]},"image/ief":{"source":"iana","extensions":["ief"]},"image/jls":{"source":"iana","extensions":["jls"]},"image/jp2":{"source":"iana","compressible":false,"extensions":["jp2","jpg2"]},"image/jpeg":{"source":"iana","compressible":false,"extensions":["jpeg","jpg","jpe"]},"image/jph":{"source":"iana","extensions":["jph"]},"image/jphc":{"source":"iana","extensions":["jhc"]},"image/jpm":{"source":"iana","compressible":false,"extensions":["jpm"]},"image/jpx":{"source":"iana","compressible":false,"extensions":["jpx","jpf"]},"image/jxr":{"source":"iana","extensions":["jxr"]},"image/jxra":{"source":"iana","extensions":["jxra"]},"image/jxrs":{"source":"iana","extensions":["jxrs"]},"image/jxs":{"source":"iana","extensions":["jxs"]},"image/jxsc":{"source":"iana","extensions":["jxsc"]},"image/jxsi":{"source":"iana","extensions":["jxsi"]},"image/jxss":{"source":"iana","extensions":["jxss"]},"image/ktx":{"source":"iana","extensions":["ktx"]},"image/ktx2":{"source":"iana","extensions":["ktx2"]},"image/naplps":{"source":"iana"},"image/pjpeg":{"compressible":false},"image/png":{"source":"iana","compressible":false,"extensions":["png"]},"image/prs.btif":{"source":"iana","extensions":["btif"]},"image/prs.pti":{"source":"iana","extensions":["pti"]},"image/pwg-raster":{"source":"iana"},"image/sgi":{"source":"apache","extensions":["sgi"]},"image/svg+xml":{"source":"iana","compressible":true,"extensions":["svg","svgz"]},"image/t38":{"source":"iana","extensions":["t38"]},"image/tiff":{"source":"iana","compressible":false,"extensions":["tif","tiff"]},"image/tiff-fx":{"source":"iana","extensions":["tfx"]},"image/vnd.adobe.photoshop":{"source":"iana","compressible":true,"extensions":["psd"]},"image/vnd.airzip.accelerator.azv":{"source":"iana","extensions":["azv"]},"image/vnd.cns.inf2":{"source":"iana"},"image/vnd.dece.graphic":{"source":"iana","extensions":["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{"source":"iana","extensions":["djvu","djv"]},"image/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"image/vnd.dwg":{"source":"iana","extensions":["dwg"]},"image/vnd.dxf":{"source":"iana","extensions":["dxf"]},"image/vnd.fastbidsheet":{"source":"iana","extensions":["fbs"]},"image/vnd.fpx":{"source":"iana","extensions":["fpx"]},"image/vnd.fst":{"source":"iana","extensions":["fst"]},"image/vnd.fujixerox.edmics-mmr":{"source":"iana","extensions":["mmr"]},"image/vnd.fujixerox.edmics-rlc":{"source":"iana","extensions":["rlc"]},"image/vnd.globalgraphics.pgb":{"source":"iana"},"image/vnd.microsoft.icon":{"source":"iana","compressible":true,"extensions":["ico"]},"image/vnd.mix":{"source":"iana"},"image/vnd.mozilla.apng":{"source":"iana"},"image/vnd.ms-dds":{"compressible":true,"extensions":["dds"]},"image/vnd.ms-modi":{"source":"iana","extensions":["mdi"]},"image/vnd.ms-photo":{"source":"apache","extensions":["wdp"]},"image/vnd.net-fpx":{"source":"iana","extensions":["npx"]},"image/vnd.pco.b16":{"source":"iana","extensions":["b16"]},"image/vnd.radiance":{"source":"iana"},"image/vnd.sealed.png":{"source":"iana"},"image/vnd.sealedmedia.softseal.gif":{"source":"iana"},"image/vnd.sealedmedia.softseal.jpg":{"source":"iana"},"image/vnd.svf":{"source":"iana"},"image/vnd.tencent.tap":{"source":"iana","extensions":["tap"]},"image/vnd.valve.source.texture":{"source":"iana","extensions":["vtf"]},"image/vnd.wap.wbmp":{"source":"iana","extensions":["wbmp"]},"image/vnd.xiff":{"source":"iana","extensions":["xif"]},"image/vnd.zbrush.pcx":{"source":"iana","extensions":["pcx"]},"image/webp":{"source":"apache","extensions":["webp"]},"image/wmf":{"source":"iana","extensions":["wmf"]},"image/x-3ds":{"source":"apache","extensions":["3ds"]},"image/x-cmu-raster":{"source":"apache","extensions":["ras"]},"image/x-cmx":{"source":"apache","extensions":["cmx"]},"image/x-freehand":{"source":"apache","extensions":["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{"source":"apache","compressible":true,"extensions":["ico"]},"image/x-jng":{"source":"nginx","extensions":["jng"]},"image/x-mrsid-image":{"source":"apache","extensions":["sid"]},"image/x-ms-bmp":{"source":"nginx","compressible":true,"extensions":["bmp"]},"image/x-pcx":{"source":"apache","extensions":["pcx"]},"image/x-pict":{"source":"apache","extensions":["pic","pct"]},"image/x-portable-anymap":{"source":"apache","extensions":["pnm"]},"image/x-portable-bitmap":{"source":"apache","extensions":["pbm"]},"image/x-portable-graymap":{"source":"apache","extensions":["pgm"]},"image/x-portable-pixmap":{"source":"apache","extensions":["ppm"]},"image/x-rgb":{"source":"apache","extensions":["rgb"]},"image/x-tga":{"source":"apache","extensions":["tga"]},"image/x-xbitmap":{"source":"apache","extensions":["xbm"]},"image/x-xcf":{"compressible":false},"image/x-xpixmap":{"source":"apache","extensions":["xpm"]},"image/x-xwindowdump":{"source":"apache","extensions":["xwd"]},"message/cpim":{"source":"iana"},"message/delivery-status":{"source":"iana"},"message/disposition-notification":{"source":"iana","extensions":["disposition-notification"]},"message/external-body":{"source":"iana"},"message/feedback-report":{"source":"iana"},"message/global":{"source":"iana","extensions":["u8msg"]},"message/global-delivery-status":{"source":"iana","extensions":["u8dsn"]},"message/global-disposition-notification":{"source":"iana","extensions":["u8mdn"]},"message/global-headers":{"source":"iana","extensions":["u8hdr"]},"message/http":{"source":"iana","compressible":false},"message/imdn+xml":{"source":"iana","compressible":true},"message/news":{"source":"iana"},"message/partial":{"source":"iana","compressible":false},"message/rfc822":{"source":"iana","compressible":true,"extensions":["eml","mime"]},"message/s-http":{"source":"iana"},"message/sip":{"source":"iana"},"message/sipfrag":{"source":"iana"},"message/tracking-status":{"source":"iana"},"message/vnd.si.simp":{"source":"iana"},"message/vnd.wfa.wsc":{"source":"iana","extensions":["wsc"]},"model/3mf":{"source":"iana","extensions":["3mf"]},"model/e57":{"source":"iana"},"model/gltf+json":{"source":"iana","compressible":true,"extensions":["gltf"]},"model/gltf-binary":{"source":"iana","compressible":true,"extensions":["glb"]},"model/iges":{"source":"iana","compressible":false,"extensions":["igs","iges"]},"model/mesh":{"source":"iana","compressible":false,"extensions":["msh","mesh","silo"]},"model/mtl":{"source":"iana","extensions":["mtl"]},"model/obj":{"source":"iana","extensions":["obj"]},"model/step":{"source":"iana"},"model/step+xml":{"source":"iana","compressible":true,"extensions":["stpx"]},"model/step+zip":{"source":"iana","compressible":false,"extensions":["stpz"]},"model/step-xml+zip":{"source":"iana","compressible":false,"extensions":["stpxz"]},"model/stl":{"source":"iana","extensions":["stl"]},"model/vnd.collada+xml":{"source":"iana","compressible":true,"extensions":["dae"]},"model/vnd.dwf":{"source":"iana","extensions":["dwf"]},"model/vnd.flatland.3dml":{"source":"iana"},"model/vnd.gdl":{"source":"iana","extensions":["gdl"]},"model/vnd.gs-gdl":{"source":"apache"},"model/vnd.gs.gdl":{"source":"iana"},"model/vnd.gtw":{"source":"iana","extensions":["gtw"]},"model/vnd.moml+xml":{"source":"iana","compressible":true},"model/vnd.mts":{"source":"iana","extensions":["mts"]},"model/vnd.opengex":{"source":"iana","extensions":["ogex"]},"model/vnd.parasolid.transmit.binary":{"source":"iana","extensions":["x_b"]},"model/vnd.parasolid.transmit.text":{"source":"iana","extensions":["x_t"]},"model/vnd.pytha.pyox":{"source":"iana"},"model/vnd.rosette.annotated-data-model":{"source":"iana"},"model/vnd.sap.vds":{"source":"iana","extensions":["vds"]},"model/vnd.usdz+zip":{"source":"iana","compressible":false,"extensions":["usdz"]},"model/vnd.valve.source.compiled-map":{"source":"iana","extensions":["bsp"]},"model/vnd.vtu":{"source":"iana","extensions":["vtu"]},"model/vrml":{"source":"iana","compressible":false,"extensions":["wrl","vrml"]},"model/x3d+binary":{"source":"apache","compressible":false,"extensions":["x3db","x3dbz"]},"model/x3d+fastinfoset":{"source":"iana","extensions":["x3db"]},"model/x3d+vrml":{"source":"apache","compressible":false,"extensions":["x3dv","x3dvz"]},"model/x3d+xml":{"source":"iana","compressible":true,"extensions":["x3d","x3dz"]},"model/x3d-vrml":{"source":"iana","extensions":["x3dv"]},"multipart/alternative":{"source":"iana","compressible":false},"multipart/appledouble":{"source":"iana"},"multipart/byteranges":{"source":"iana"},"multipart/digest":{"source":"iana"},"multipart/encrypted":{"source":"iana","compressible":false},"multipart/form-data":{"source":"iana","compressible":false},"multipart/header-set":{"source":"iana"},"multipart/mixed":{"source":"iana"},"multipart/multilingual":{"source":"iana"},"multipart/parallel":{"source":"iana"},"multipart/related":{"source":"iana","compressible":false},"multipart/report":{"source":"iana"},"multipart/signed":{"source":"iana","compressible":false},"multipart/vnd.bint.med-plus":{"source":"iana"},"multipart/voice-message":{"source":"iana"},"multipart/x-mixed-replace":{"source":"iana"},"text/1d-interleaved-parityfec":{"source":"iana"},"text/cache-manifest":{"source":"iana","compressible":true,"extensions":["appcache","manifest"]},"text/calendar":{"source":"iana","extensions":["ics","ifb"]},"text/calender":{"compressible":true},"text/cmd":{"compressible":true},"text/coffeescript":{"extensions":["coffee","litcoffee"]},"text/cql":{"source":"iana"},"text/cql-expression":{"source":"iana"},"text/cql-identifier":{"source":"iana"},"text/css":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["css"]},"text/csv":{"source":"iana","compressible":true,"extensions":["csv"]},"text/csv-schema":{"source":"iana"},"text/directory":{"source":"iana"},"text/dns":{"source":"iana"},"text/ecmascript":{"source":"iana"},"text/encaprtp":{"source":"iana"},"text/enriched":{"source":"iana"},"text/fhirpath":{"source":"iana"},"text/flexfec":{"source":"iana"},"text/fwdred":{"source":"iana"},"text/gff3":{"source":"iana"},"text/grammar-ref-list":{"source":"iana"},"text/html":{"source":"iana","compressible":true,"extensions":["html","htm","shtml"]},"text/jade":{"extensions":["jade"]},"text/javascript":{"source":"iana","compressible":true},"text/jcr-cnd":{"source":"iana"},"text/jsx":{"compressible":true,"extensions":["jsx"]},"text/less":{"compressible":true,"extensions":["less"]},"text/markdown":{"source":"iana","compressible":true,"extensions":["markdown","md"]},"text/mathml":{"source":"nginx","extensions":["mml"]},"text/mdx":{"compressible":true,"extensions":["mdx"]},"text/mizar":{"source":"iana"},"text/n3":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["n3"]},"text/parameters":{"source":"iana","charset":"UTF-8"},"text/parityfec":{"source":"iana"},"text/plain":{"source":"iana","compressible":true,"extensions":["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{"source":"iana","charset":"UTF-8"},"text/prs.fallenstein.rst":{"source":"iana"},"text/prs.lines.tag":{"source":"iana","extensions":["dsc"]},"text/prs.prop.logic":{"source":"iana"},"text/raptorfec":{"source":"iana"},"text/red":{"source":"iana"},"text/rfc822-headers":{"source":"iana"},"text/richtext":{"source":"iana","compressible":true,"extensions":["rtx"]},"text/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"text/rtp-enc-aescm128":{"source":"iana"},"text/rtploopback":{"source":"iana"},"text/rtx":{"source":"iana"},"text/sgml":{"source":"iana","extensions":["sgml","sgm"]},"text/shaclc":{"source":"iana"},"text/shex":{"source":"iana","extensions":["shex"]},"text/slim":{"extensions":["slim","slm"]},"text/spdx":{"source":"iana","extensions":["spdx"]},"text/strings":{"source":"iana"},"text/stylus":{"extensions":["stylus","styl"]},"text/t140":{"source":"iana"},"text/tab-separated-values":{"source":"iana","compressible":true,"extensions":["tsv"]},"text/troff":{"source":"iana","extensions":["t","tr","roff","man","me","ms"]},"text/turtle":{"source":"iana","charset":"UTF-8","extensions":["ttl"]},"text/ulpfec":{"source":"iana"},"text/uri-list":{"source":"iana","compressible":true,"extensions":["uri","uris","urls"]},"text/vcard":{"source":"iana","compressible":true,"extensions":["vcard"]},"text/vnd.a":{"source":"iana"},"text/vnd.abc":{"source":"iana"},"text/vnd.ascii-art":{"source":"iana"},"text/vnd.curl":{"source":"iana","extensions":["curl"]},"text/vnd.curl.dcurl":{"source":"apache","extensions":["dcurl"]},"text/vnd.curl.mcurl":{"source":"apache","extensions":["mcurl"]},"text/vnd.curl.scurl":{"source":"apache","extensions":["scurl"]},"text/vnd.debian.copyright":{"source":"iana","charset":"UTF-8"},"text/vnd.dmclientscript":{"source":"iana"},"text/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"text/vnd.esmertec.theme-descriptor":{"source":"iana","charset":"UTF-8"},"text/vnd.familysearch.gedcom":{"source":"iana","extensions":["ged"]},"text/vnd.ficlab.flt":{"source":"iana"},"text/vnd.fly":{"source":"iana","extensions":["fly"]},"text/vnd.fmi.flexstor":{"source":"iana","extensions":["flx"]},"text/vnd.gml":{"source":"iana"},"text/vnd.graphviz":{"source":"iana","extensions":["gv"]},"text/vnd.hans":{"source":"iana"},"text/vnd.hgl":{"source":"iana"},"text/vnd.in3d.3dml":{"source":"iana","extensions":["3dml"]},"text/vnd.in3d.spot":{"source":"iana","extensions":["spot"]},"text/vnd.iptc.newsml":{"source":"iana"},"text/vnd.iptc.nitf":{"source":"iana"},"text/vnd.latex-z":{"source":"iana"},"text/vnd.motorola.reflex":{"source":"iana"},"text/vnd.ms-mediapackage":{"source":"iana"},"text/vnd.net2phone.commcenter.command":{"source":"iana"},"text/vnd.radisys.msml-basic-layout":{"source":"iana"},"text/vnd.senx.warpscript":{"source":"iana"},"text/vnd.si.uricatalogue":{"source":"iana"},"text/vnd.sosi":{"source":"iana"},"text/vnd.sun.j2me.app-descriptor":{"source":"iana","charset":"UTF-8","extensions":["jad"]},"text/vnd.trolltech.linguist":{"source":"iana","charset":"UTF-8"},"text/vnd.wap.si":{"source":"iana"},"text/vnd.wap.sl":{"source":"iana"},"text/vnd.wap.wml":{"source":"iana","extensions":["wml"]},"text/vnd.wap.wmlscript":{"source":"iana","extensions":["wmls"]},"text/vtt":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["vtt"]},"text/x-asm":{"source":"apache","extensions":["s","asm"]},"text/x-c":{"source":"apache","extensions":["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{"source":"nginx","extensions":["htc"]},"text/x-fortran":{"source":"apache","extensions":["f","for","f77","f90"]},"text/x-gwt-rpc":{"compressible":true},"text/x-handlebars-template":{"extensions":["hbs"]},"text/x-java-source":{"source":"apache","extensions":["java"]},"text/x-jquery-tmpl":{"compressible":true},"text/x-lua":{"extensions":["lua"]},"text/x-markdown":{"compressible":true,"extensions":["mkd"]},"text/x-nfo":{"source":"apache","extensions":["nfo"]},"text/x-opml":{"source":"apache","extensions":["opml"]},"text/x-org":{"compressible":true,"extensions":["org"]},"text/x-pascal":{"source":"apache","extensions":["p","pas"]},"text/x-processing":{"compressible":true,"extensions":["pde"]},"text/x-sass":{"extensions":["sass"]},"text/x-scss":{"extensions":["scss"]},"text/x-setext":{"source":"apache","extensions":["etx"]},"text/x-sfv":{"source":"apache","extensions":["sfv"]},"text/x-suse-ymp":{"compressible":true,"extensions":["ymp"]},"text/x-uuencode":{"source":"apache","extensions":["uu"]},"text/x-vcalendar":{"source":"apache","extensions":["vcs"]},"text/x-vcard":{"source":"apache","extensions":["vcf"]},"text/xml":{"source":"iana","compressible":true,"extensions":["xml"]},"text/xml-external-parsed-entity":{"source":"iana"},"text/yaml":{"compressible":true,"extensions":["yaml","yml"]},"video/1d-interleaved-parityfec":{"source":"iana"},"video/3gpp":{"source":"iana","extensions":["3gp","3gpp"]},"video/3gpp-tt":{"source":"iana"},"video/3gpp2":{"source":"iana","extensions":["3g2"]},"video/av1":{"source":"iana"},"video/bmpeg":{"source":"iana"},"video/bt656":{"source":"iana"},"video/celb":{"source":"iana"},"video/dv":{"source":"iana"},"video/encaprtp":{"source":"iana"},"video/ffv1":{"source":"iana"},"video/flexfec":{"source":"iana"},"video/h261":{"source":"iana","extensions":["h261"]},"video/h263":{"source":"iana","extensions":["h263"]},"video/h263-1998":{"source":"iana"},"video/h263-2000":{"source":"iana"},"video/h264":{"source":"iana","extensions":["h264"]},"video/h264-rcdo":{"source":"iana"},"video/h264-svc":{"source":"iana"},"video/h265":{"source":"iana"},"video/iso.segment":{"source":"iana","extensions":["m4s"]},"video/jpeg":{"source":"iana","extensions":["jpgv"]},"video/jpeg2000":{"source":"iana"},"video/jpm":{"source":"apache","extensions":["jpm","jpgm"]},"video/jxsv":{"source":"iana"},"video/mj2":{"source":"iana","extensions":["mj2","mjp2"]},"video/mp1s":{"source":"iana"},"video/mp2p":{"source":"iana"},"video/mp2t":{"source":"iana","extensions":["ts"]},"video/mp4":{"source":"iana","compressible":false,"extensions":["mp4","mp4v","mpg4"]},"video/mp4v-es":{"source":"iana"},"video/mpeg":{"source":"iana","compressible":false,"extensions":["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{"source":"iana"},"video/mpv":{"source":"iana"},"video/nv":{"source":"iana"},"video/ogg":{"source":"iana","compressible":false,"extensions":["ogv"]},"video/parityfec":{"source":"iana"},"video/pointer":{"source":"iana"},"video/quicktime":{"source":"iana","compressible":false,"extensions":["qt","mov"]},"video/raptorfec":{"source":"iana"},"video/raw":{"source":"iana"},"video/rtp-enc-aescm128":{"source":"iana"},"video/rtploopback":{"source":"iana"},"video/rtx":{"source":"iana"},"video/scip":{"source":"iana"},"video/smpte291":{"source":"iana"},"video/smpte292m":{"source":"iana"},"video/ulpfec":{"source":"iana"},"video/vc1":{"source":"iana"},"video/vc2":{"source":"iana"},"video/vnd.cctv":{"source":"iana"},"video/vnd.dece.hd":{"source":"iana","extensions":["uvh","uvvh"]},"video/vnd.dece.mobile":{"source":"iana","extensions":["uvm","uvvm"]},"video/vnd.dece.mp4":{"source":"iana"},"video/vnd.dece.pd":{"source":"iana","extensions":["uvp","uvvp"]},"video/vnd.dece.sd":{"source":"iana","extensions":["uvs","uvvs"]},"video/vnd.dece.video":{"source":"iana","extensions":["uvv","uvvv"]},"video/vnd.directv.mpeg":{"source":"iana"},"video/vnd.directv.mpeg-tts":{"source":"iana"},"video/vnd.dlna.mpeg-tts":{"source":"iana"},"video/vnd.dvb.file":{"source":"iana","extensions":["dvb"]},"video/vnd.fvt":{"source":"iana","extensions":["fvt"]},"video/vnd.hns.video":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.ttsavc":{"source":"iana"},"video/vnd.iptvforum.ttsmpeg2":{"source":"iana"},"video/vnd.motorola.video":{"source":"iana"},"video/vnd.motorola.videop":{"source":"iana"},"video/vnd.mpegurl":{"source":"iana","extensions":["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{"source":"iana","extensions":["pyv"]},"video/vnd.nokia.interleaved-multimedia":{"source":"iana"},"video/vnd.nokia.mp4vr":{"source":"iana"},"video/vnd.nokia.videovoip":{"source":"iana"},"video/vnd.objectvideo":{"source":"iana"},"video/vnd.radgamettools.bink":{"source":"iana"},"video/vnd.radgamettools.smacker":{"source":"iana"},"video/vnd.sealed.mpeg1":{"source":"iana"},"video/vnd.sealed.mpeg4":{"source":"iana"},"video/vnd.sealed.swf":{"source":"iana"},"video/vnd.sealedmedia.softseal.mov":{"source":"iana"},"video/vnd.uvvu.mp4":{"source":"iana","extensions":["uvu","uvvu"]},"video/vnd.vivo":{"source":"iana","extensions":["viv"]},"video/vnd.youtube.yt":{"source":"iana"},"video/vp8":{"source":"iana"},"video/vp9":{"source":"iana"},"video/webm":{"source":"apache","compressible":false,"extensions":["webm"]},"video/x-f4v":{"source":"apache","extensions":["f4v"]},"video/x-fli":{"source":"apache","extensions":["fli"]},"video/x-flv":{"source":"apache","compressible":false,"extensions":["flv"]},"video/x-m4v":{"source":"apache","extensions":["m4v"]},"video/x-matroska":{"source":"apache","compressible":false,"extensions":["mkv","mk3d","mks"]},"video/x-mng":{"source":"apache","extensions":["mng"]},"video/x-ms-asf":{"source":"apache","extensions":["asf","asx"]},"video/x-ms-vob":{"source":"apache","extensions":["vob"]},"video/x-ms-wm":{"source":"apache","extensions":["wm"]},"video/x-ms-wmv":{"source":"apache","compressible":false,"extensions":["wmv"]},"video/x-ms-wmx":{"source":"apache","extensions":["wmx"]},"video/x-ms-wvx":{"source":"apache","extensions":["wvx"]},"video/x-msvideo":{"source":"apache","extensions":["avi"]},"video/x-sgi-movie":{"source":"apache","extensions":["movie"]},"video/x-smv":{"source":"apache","extensions":["smv"]},"x-conference/x-cooltalk":{"source":"apache","extensions":["ice"]},"x-shader/x-fragment":{"compressible":true},"x-shader/x-vertex":{"compressible":true}}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nccwpck_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			__webpack_modules__[moduleId](module, module.exports, __nccwpck_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__nccwpck_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat */
/******/ 	
/******/ 	if (typeof __nccwpck_require__ !== 'undefined') __nccwpck_require__.ab = __dirname + "/";
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __nccwpck_require__(7348);
/******/ 	module.exports = __webpack_exports__;
/******/ 	
/******/ })()
;